<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="593"><g><title>rust-gkat`DYLD-STUB$$free (1 samples, 0.17%)</title><rect x="0.0000%" y="325" width="0.1686%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.84%)</title><rect x="0.1686%" y="325" width="0.8432%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="5"/><text x="0.4186%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (4 samples, 0.67%)</title><rect x="1.0118%" y="325" width="0.6745%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="4"/><text x="1.2618%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::to_bdd (3 samples, 0.51%)</title><rect x="1.6863%" y="325" width="0.5059%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="3"/><text x="1.9363%" y="335.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (8 samples, 1.35%)</title><rect x="6.2395%" y="309" width="1.3491%" height="15" fill="rgb(208,68,35)" fg:x="37" fg:w="8"/><text x="6.4895%" y="319.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 3.71%)</title><rect x="7.5885%" y="309" width="3.7099%" height="15" fill="rgb(232,128,0)" fg:x="45" fg:w="22"/><text x="7.8385%" y="319.50">rust..</text></g><g><title>rust-gkat`rsdd::builder::bdd::robdd::RobddBuilder&lt;T&gt;::new (1 samples, 0.17%)</title><rect x="11.2985%" y="309" width="0.1686%" height="15" fill="rgb(207,160,47)" fg:x="67" fg:w="1"/><text x="11.5485%" y="319.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (56 samples, 9.44%)</title><rect x="25.2951%" y="277" width="9.4435%" height="15" fill="rgb(228,23,34)" fg:x="150" fg:w="56"/><text x="25.5451%" y="287.50">rust-gkat`&lt;std..</text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (292 samples, 49.24%)</title><rect x="15.1771%" y="293" width="49.2411%" height="15" fill="rgb(218,30,26)" fg:x="90" fg:w="292"/><text x="15.4271%" y="303.50">rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (176 samples, 29.68%)</title><rect x="34.7386%" y="277" width="29.6796%" height="15" fill="rgb(220,122,19)" fg:x="206" fg:w="176"/><text x="34.9886%" y="287.50">rust-gkat`core::hash::BuildHasher::hash_one</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (30 samples, 5.06%)</title><rect x="64.4182%" y="293" width="5.0590%" height="15" fill="rgb(250,228,42)" fg:x="382" fg:w="30"/><text x="64.6682%" y="303.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (360 samples, 60.71%)</title><rect x="11.4671%" y="309" width="60.7083%" height="15" fill="rgb(240,193,28)" fg:x="68" fg:w="360"/><text x="11.7171%" y="319.50">rust-gkat`rust_gkat::gkat_ast::bexp::mk_and</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (16 samples, 2.70%)</title><rect x="69.4772%" y="293" width="2.6981%" height="15" fill="rgb(216,20,37)" fg:x="412" fg:w="16"/><text x="69.7272%" y="303.50">ru..</text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::to_bdd (15 samples, 2.53%)</title><rect x="72.1754%" y="309" width="2.5295%" height="15" fill="rgb(206,188,39)" fg:x="428" fg:w="15"/><text x="72.4254%" y="319.50">ru..</text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.34%)</title><rect x="74.7049%" y="245" width="0.3373%" height="15" fill="rgb(217,207,13)" fg:x="443" fg:w="2"/><text x="74.9549%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="74.7049%" y="229" width="0.3373%" height="15" fill="rgb(231,73,38)" fg:x="443" fg:w="2"/><text x="74.9549%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (3 samples, 0.51%)</title><rect x="74.7049%" y="261" width="0.5059%" height="15" fill="rgb(225,20,46)" fg:x="443" fg:w="3"/><text x="74.9549%" y="271.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="75.0422%" y="245" width="0.1686%" height="15" fill="rgb(210,31,41)" fg:x="445" fg:w="1"/><text x="75.2922%" y="255.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.67%)</title><rect x="74.7049%" y="293" width="0.6745%" height="15" fill="rgb(221,200,47)" fg:x="443" fg:w="4"/><text x="74.9549%" y="303.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.67%)</title><rect x="74.7049%" y="277" width="0.6745%" height="15" fill="rgb(226,26,5)" fg:x="443" fg:w="4"/><text x="74.9549%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="75.2108%" y="261" width="0.1686%" height="15" fill="rgb(249,33,26)" fg:x="446" fg:w="1"/><text x="75.4608%" y="271.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="75.2108%" y="245" width="0.1686%" height="15" fill="rgb(235,183,28)" fg:x="446" fg:w="1"/><text x="75.4608%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (2 samples, 0.34%)</title><rect x="75.3794%" y="245" width="0.3373%" height="15" fill="rgb(221,5,38)" fg:x="447" fg:w="2"/><text x="75.6294%" y="255.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.34%)</title><rect x="75.3794%" y="229" width="0.3373%" height="15" fill="rgb(247,18,42)" fg:x="447" fg:w="2"/><text x="75.6294%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="75.5481%" y="213" width="0.1686%" height="15" fill="rgb(241,131,45)" fg:x="448" fg:w="1"/><text x="75.7981%" y="223.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.51%)</title><rect x="75.3794%" y="277" width="0.5059%" height="15" fill="rgb(249,31,29)" fg:x="447" fg:w="3"/><text x="75.6294%" y="287.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.51%)</title><rect x="75.3794%" y="261" width="0.5059%" height="15" fill="rgb(225,111,53)" fg:x="447" fg:w="3"/><text x="75.6294%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="75.7167%" y="245" width="0.1686%" height="15" fill="rgb(238,160,17)" fg:x="449" fg:w="1"/><text x="75.9667%" y="255.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="75.7167%" y="229" width="0.1686%" height="15" fill="rgb(214,148,48)" fg:x="449" fg:w="1"/><text x="75.9667%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="75.8853%" y="229" width="0.1686%" height="15" fill="rgb(232,36,49)" fg:x="450" fg:w="1"/><text x="76.1353%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 0.67%)</title><rect x="76.0540%" y="213" width="0.6745%" height="15" fill="rgb(209,103,24)" fg:x="451" fg:w="4"/><text x="76.3040%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.34%)</title><rect x="76.3912%" y="197" width="0.3373%" height="15" fill="rgb(229,88,8)" fg:x="453" fg:w="2"/><text x="76.6412%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="76.7285%" y="213" width="0.3373%" height="15" fill="rgb(213,181,19)" fg:x="455" fg:w="2"/><text x="76.9785%" y="223.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 1.35%)</title><rect x="75.8853%" y="245" width="1.3491%" height="15" fill="rgb(254,191,54)" fg:x="450" fg:w="8"/><text x="76.1353%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (7 samples, 1.18%)</title><rect x="76.0540%" y="229" width="1.1804%" height="15" fill="rgb(241,83,37)" fg:x="451" fg:w="7"/><text x="76.3040%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::exp::Exp_&gt; (1 samples, 0.17%)</title><rect x="77.0658%" y="213" width="0.1686%" height="15" fill="rgb(233,36,39)" fg:x="457" fg:w="1"/><text x="77.3158%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="77.2344%" y="229" width="0.1686%" height="15" fill="rgb(226,3,54)" fg:x="458" fg:w="1"/><text x="77.4844%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="77.2344%" y="213" width="0.1686%" height="15" fill="rgb(245,192,40)" fg:x="458" fg:w="1"/><text x="77.4844%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="77.2344%" y="197" width="0.1686%" height="15" fill="rgb(238,167,29)" fg:x="458" fg:w="1"/><text x="77.4844%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (10 samples, 1.69%)</title><rect x="75.8853%" y="261" width="1.6863%" height="15" fill="rgb(232,182,51)" fg:x="450" fg:w="10"/><text x="76.1353%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (2 samples, 0.34%)</title><rect x="77.2344%" y="245" width="0.3373%" height="15" fill="rgb(231,60,39)" fg:x="458" fg:w="2"/><text x="77.4844%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="77.4030%" y="229" width="0.1686%" height="15" fill="rgb(208,69,12)" fg:x="459" fg:w="1"/><text x="77.6530%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="77.4030%" y="213" width="0.1686%" height="15" fill="rgb(235,93,37)" fg:x="459" fg:w="1"/><text x="77.6530%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="77.4030%" y="197" width="0.1686%" height="15" fill="rgb(213,116,39)" fg:x="459" fg:w="1"/><text x="77.6530%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="77.5717%" y="213" width="0.1686%" height="15" fill="rgb(222,207,29)" fg:x="460" fg:w="1"/><text x="77.8217%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="77.5717%" y="197" width="0.1686%" height="15" fill="rgb(206,96,30)" fg:x="460" fg:w="1"/><text x="77.8217%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="77.5717%" y="181" width="0.1686%" height="15" fill="rgb(218,138,4)" fg:x="460" fg:w="1"/><text x="77.8217%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.51%)</title><rect x="77.5717%" y="229" width="0.5059%" height="15" fill="rgb(250,191,14)" fg:x="460" fg:w="3"/><text x="77.8217%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (2 samples, 0.34%)</title><rect x="77.7403%" y="213" width="0.3373%" height="15" fill="rgb(239,60,40)" fg:x="461" fg:w="2"/><text x="77.9903%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="77.7403%" y="197" width="0.3373%" height="15" fill="rgb(206,27,48)" fg:x="461" fg:w="2"/><text x="77.9903%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.84%)</title><rect x="77.5717%" y="245" width="0.8432%" height="15" fill="rgb(225,35,8)" fg:x="460" fg:w="5"/><text x="77.8217%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (2 samples, 0.34%)</title><rect x="78.0776%" y="229" width="0.3373%" height="15" fill="rgb(250,213,24)" fg:x="463" fg:w="2"/><text x="78.3276%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (2 samples, 0.34%)</title><rect x="78.0776%" y="213" width="0.3373%" height="15" fill="rgb(247,123,22)" fg:x="463" fg:w="2"/><text x="78.3276%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="78.2462%" y="197" width="0.1686%" height="15" fill="rgb(231,138,38)" fg:x="464" fg:w="1"/><text x="78.4962%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="78.2462%" y="181" width="0.1686%" height="15" fill="rgb(231,145,46)" fg:x="464" fg:w="1"/><text x="78.4962%" y="191.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::exp::Exp_&gt; (1 samples, 0.17%)</title><rect x="78.4148%" y="197" width="0.1686%" height="15" fill="rgb(251,118,11)" fg:x="465" fg:w="1"/><text x="78.6648%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="79.0894%" y="165" width="0.1686%" height="15" fill="rgb(217,147,25)" fg:x="469" fg:w="1"/><text x="79.3394%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 0.84%)</title><rect x="78.5835%" y="181" width="0.8432%" height="15" fill="rgb(247,81,37)" fg:x="466" fg:w="5"/><text x="78.8335%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="79.2580%" y="165" width="0.1686%" height="15" fill="rgb(209,12,38)" fg:x="470" fg:w="1"/><text x="79.5080%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="79.4266%" y="181" width="0.1686%" height="15" fill="rgb(227,1,9)" fg:x="471" fg:w="1"/><text x="79.6766%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 1.52%)</title><rect x="78.4148%" y="213" width="1.5177%" height="15" fill="rgb(248,47,43)" fg:x="465" fg:w="9"/><text x="78.6648%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (8 samples, 1.35%)</title><rect x="78.5835%" y="197" width="1.3491%" height="15" fill="rgb(221,10,30)" fg:x="466" fg:w="8"/><text x="78.8335%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::exp::Exp_&gt; (2 samples, 0.34%)</title><rect x="79.5953%" y="181" width="0.3373%" height="15" fill="rgb(210,229,1)" fg:x="472" fg:w="2"/><text x="79.8453%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="79.9325%" y="197" width="0.1686%" height="15" fill="rgb(222,148,37)" fg:x="474" fg:w="1"/><text x="80.1825%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (13 samples, 2.19%)</title><rect x="78.4148%" y="229" width="2.1922%" height="15" fill="rgb(234,67,33)" fg:x="465" fg:w="13"/><text x="78.6648%" y="239.50">r..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (4 samples, 0.67%)</title><rect x="79.9325%" y="213" width="0.6745%" height="15" fill="rgb(247,98,35)" fg:x="474" fg:w="4"/><text x="80.1825%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (3 samples, 0.51%)</title><rect x="80.1012%" y="197" width="0.5059%" height="15" fill="rgb(247,138,52)" fg:x="475" fg:w="3"/><text x="80.3512%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.51%)</title><rect x="80.1012%" y="181" width="0.5059%" height="15" fill="rgb(213,79,30)" fg:x="475" fg:w="3"/><text x="80.3512%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="80.6071%" y="181" width="0.1686%" height="15" fill="rgb(246,177,23)" fg:x="478" fg:w="1"/><text x="80.8571%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.67%)</title><rect x="80.6071%" y="197" width="0.6745%" height="15" fill="rgb(230,62,27)" fg:x="478" fg:w="4"/><text x="80.8571%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (3 samples, 0.51%)</title><rect x="80.7757%" y="181" width="0.5059%" height="15" fill="rgb(216,154,8)" fg:x="479" fg:w="3"/><text x="81.0257%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.51%)</title><rect x="80.7757%" y="165" width="0.5059%" height="15" fill="rgb(244,35,45)" fg:x="479" fg:w="3"/><text x="81.0257%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="81.1130%" y="149" width="0.1686%" height="15" fill="rgb(251,115,12)" fg:x="481" fg:w="1"/><text x="81.3630%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.84%)</title><rect x="80.6071%" y="213" width="0.8432%" height="15" fill="rgb(240,54,50)" fg:x="478" fg:w="5"/><text x="80.8571%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (1 samples, 0.17%)</title><rect x="81.2816%" y="197" width="0.1686%" height="15" fill="rgb(233,84,52)" fg:x="482" fg:w="1"/><text x="81.5316%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="81.2816%" y="181" width="0.1686%" height="15" fill="rgb(207,117,47)" fg:x="482" fg:w="1"/><text x="81.5316%" y="191.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="81.2816%" y="165" width="0.1686%" height="15" fill="rgb(249,43,39)" fg:x="482" fg:w="1"/><text x="81.5316%" y="175.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="81.4503%" y="165" width="0.1686%" height="15" fill="rgb(209,38,44)" fg:x="483" fg:w="1"/><text x="81.7003%" y="175.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.34%)</title><rect x="81.4503%" y="197" width="0.3373%" height="15" fill="rgb(236,212,23)" fg:x="483" fg:w="2"/><text x="81.7003%" y="207.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.34%)</title><rect x="81.4503%" y="181" width="0.3373%" height="15" fill="rgb(242,79,21)" fg:x="483" fg:w="2"/><text x="81.7003%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="81.6189%" y="165" width="0.1686%" height="15" fill="rgb(211,96,35)" fg:x="484" fg:w="1"/><text x="81.8689%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="81.6189%" y="149" width="0.1686%" height="15" fill="rgb(253,215,40)" fg:x="484" fg:w="1"/><text x="81.8689%" y="159.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;[(hashconsing::HConsed&lt;rust_gkat::gkat_ast::bexp::BExp_&gt;,(hashconsing::HConsed&lt;rust_gkat::gkat_ast::exp::Exp_&gt;,rust_gkat::gkat_ast::exp::Action))]&gt; (1 samples, 0.17%)</title><rect x="81.7875%" y="197" width="0.1686%" height="15" fill="rgb(211,81,21)" fg:x="485" fg:w="1"/><text x="82.0375%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.17%)</title><rect x="81.9562%" y="181" width="0.1686%" height="15" fill="rgb(208,190,38)" fg:x="486" fg:w="1"/><text x="82.2062%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.17%)</title><rect x="81.9562%" y="165" width="0.1686%" height="15" fill="rgb(235,213,38)" fg:x="486" fg:w="1"/><text x="82.2062%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="81.9562%" y="149" width="0.1686%" height="15" fill="rgb(237,122,38)" fg:x="486" fg:w="1"/><text x="82.2062%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="81.9562%" y="133" width="0.1686%" height="15" fill="rgb(244,218,35)" fg:x="486" fg:w="1"/><text x="82.2062%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="81.9562%" y="117" width="0.1686%" height="15" fill="rgb(240,68,47)" fg:x="486" fg:w="1"/><text x="82.2062%" y="127.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.17%)</title><rect x="82.1248%" y="165" width="0.1686%" height="15" fill="rgb(210,16,53)" fg:x="487" fg:w="1"/><text x="82.3748%" y="175.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="82.1248%" y="149" width="0.1686%" height="15" fill="rgb(235,124,12)" fg:x="487" fg:w="1"/><text x="82.3748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.17%)</title><rect x="82.1248%" y="133" width="0.1686%" height="15" fill="rgb(224,169,11)" fg:x="487" fg:w="1"/><text x="82.3748%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.17%)</title><rect x="82.1248%" y="117" width="0.1686%" height="15" fill="rgb(250,166,2)" fg:x="487" fg:w="1"/><text x="82.3748%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.17%)</title><rect x="82.1248%" y="101" width="0.1686%" height="15" fill="rgb(242,216,29)" fg:x="487" fg:w="1"/><text x="82.3748%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="82.1248%" y="85" width="0.1686%" height="15" fill="rgb(230,116,27)" fg:x="487" fg:w="1"/><text x="82.3748%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="82.1248%" y="69" width="0.1686%" height="15" fill="rgb(228,99,48)" fg:x="487" fg:w="1"/><text x="82.3748%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.17%)</title><rect x="82.1248%" y="53" width="0.1686%" height="15" fill="rgb(253,11,6)" fg:x="487" fg:w="1"/><text x="82.3748%" y="63.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.17%)</title><rect x="82.2934%" y="165" width="0.1686%" height="15" fill="rgb(247,143,39)" fg:x="488" fg:w="1"/><text x="82.5434%" y="175.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.17%)</title><rect x="82.2934%" y="149" width="0.1686%" height="15" fill="rgb(236,97,10)" fg:x="488" fg:w="1"/><text x="82.5434%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="82.2934%" y="133" width="0.1686%" height="15" fill="rgb(233,208,19)" fg:x="488" fg:w="1"/><text x="82.5434%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="82.2934%" y="117" width="0.1686%" height="15" fill="rgb(216,164,2)" fg:x="488" fg:w="1"/><text x="82.5434%" y="127.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="82.2934%" y="101" width="0.1686%" height="15" fill="rgb(220,129,5)" fg:x="488" fg:w="1"/><text x="82.5434%" y="111.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.17%)</title><rect x="82.4621%" y="149" width="0.1686%" height="15" fill="rgb(242,17,10)" fg:x="489" fg:w="1"/><text x="82.7121%" y="159.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.17%)</title><rect x="82.4621%" y="133" width="0.1686%" height="15" fill="rgb(242,107,0)" fg:x="489" fg:w="1"/><text x="82.7121%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="82.4621%" y="117" width="0.1686%" height="15" fill="rgb(251,28,31)" fg:x="489" fg:w="1"/><text x="82.7121%" y="127.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="82.4621%" y="101" width="0.1686%" height="15" fill="rgb(233,223,10)" fg:x="489" fg:w="1"/><text x="82.7121%" y="111.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="82.6307%" y="149" width="0.1686%" height="15" fill="rgb(215,21,27)" fg:x="490" fg:w="1"/><text x="82.8807%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="82.7993%" y="133" width="0.1686%" height="15" fill="rgb(232,23,21)" fg:x="491" fg:w="1"/><text x="83.0493%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (4 samples, 0.67%)</title><rect x="82.4621%" y="165" width="0.6745%" height="15" fill="rgb(244,5,23)" fg:x="489" fg:w="4"/><text x="82.7121%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (2 samples, 0.34%)</title><rect x="82.7993%" y="149" width="0.3373%" height="15" fill="rgb(226,81,46)" fg:x="491" fg:w="2"/><text x="83.0493%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (1 samples, 0.17%)</title><rect x="82.9680%" y="133" width="0.1686%" height="15" fill="rgb(247,70,30)" fg:x="492" fg:w="1"/><text x="83.2180%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="82.9680%" y="117" width="0.1686%" height="15" fill="rgb(212,68,19)" fg:x="492" fg:w="1"/><text x="83.2180%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="83.3052%" y="117" width="0.1686%" height="15" fill="rgb(240,187,13)" fg:x="494" fg:w="1"/><text x="83.5552%" y="127.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="83.3052%" y="101" width="0.1686%" height="15" fill="rgb(223,113,26)" fg:x="494" fg:w="1"/><text x="83.5552%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (9 samples, 1.52%)</title><rect x="82.1248%" y="181" width="1.5177%" height="15" fill="rgb(206,192,2)" fg:x="487" fg:w="9"/><text x="82.3748%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="83.1366%" y="165" width="0.5059%" height="15" fill="rgb(241,108,4)" fg:x="493" fg:w="3"/><text x="83.3866%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="83.1366%" y="149" width="0.5059%" height="15" fill="rgb(247,173,49)" fg:x="493" fg:w="3"/><text x="83.3866%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="83.3052%" y="133" width="0.3373%" height="15" fill="rgb(224,114,35)" fg:x="494" fg:w="2"/><text x="83.5552%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_or (1 samples, 0.17%)</title><rect x="83.4739%" y="117" width="0.1686%" height="15" fill="rgb(245,159,27)" fg:x="495" fg:w="1"/><text x="83.7239%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="83.4739%" y="101" width="0.1686%" height="15" fill="rgb(245,172,44)" fg:x="495" fg:w="1"/><text x="83.7239%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (11 samples, 1.85%)</title><rect x="81.9562%" y="197" width="1.8550%" height="15" fill="rgb(236,23,11)" fg:x="486" fg:w="11"/><text x="82.2062%" y="207.50">r..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="83.6425%" y="181" width="0.1686%" height="15" fill="rgb(205,117,38)" fg:x="496" fg:w="1"/><text x="83.8925%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="83.6425%" y="165" width="0.1686%" height="15" fill="rgb(237,72,25)" fg:x="496" fg:w="1"/><text x="83.8925%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (15 samples, 2.53%)</title><rect x="81.4503%" y="213" width="2.5295%" height="15" fill="rgb(244,70,9)" fg:x="483" fg:w="15"/><text x="81.7003%" y="223.50">ru..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="83.8111%" y="197" width="0.1686%" height="15" fill="rgb(217,125,39)" fg:x="497" fg:w="1"/><text x="84.0611%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="83.8111%" y="181" width="0.1686%" height="15" fill="rgb(235,36,10)" fg:x="497" fg:w="1"/><text x="84.0611%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="83.8111%" y="165" width="0.1686%" height="15" fill="rgb(251,123,47)" fg:x="497" fg:w="1"/><text x="84.0611%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_or (1 samples, 0.17%)</title><rect x="83.8111%" y="149" width="0.1686%" height="15" fill="rgb(221,13,13)" fg:x="497" fg:w="1"/><text x="84.0611%" y="159.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="83.8111%" y="133" width="0.1686%" height="15" fill="rgb(238,131,9)" fg:x="497" fg:w="1"/><text x="84.0611%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (2 samples, 0.34%)</title><rect x="83.9798%" y="181" width="0.3373%" height="15" fill="rgb(211,50,8)" fg:x="498" fg:w="2"/><text x="84.2298%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="84.1484%" y="165" width="0.1686%" height="15" fill="rgb(245,182,24)" fg:x="499" fg:w="1"/><text x="84.3984%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="84.3170%" y="165" width="0.1686%" height="15" fill="rgb(242,14,37)" fg:x="500" fg:w="1"/><text x="84.5670%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="84.3170%" y="149" width="0.1686%" height="15" fill="rgb(246,228,12)" fg:x="500" fg:w="1"/><text x="84.5670%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="84.4857%" y="149" width="0.1686%" height="15" fill="rgb(213,55,15)" fg:x="501" fg:w="1"/><text x="84.7357%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="84.4857%" y="133" width="0.1686%" height="15" fill="rgb(209,9,3)" fg:x="501" fg:w="1"/><text x="84.7357%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="84.4857%" y="117" width="0.1686%" height="15" fill="rgb(230,59,30)" fg:x="501" fg:w="1"/><text x="84.7357%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (38 samples, 6.41%)</title><rect x="78.4148%" y="245" width="6.4081%" height="15" fill="rgb(209,121,21)" fg:x="465" fg:w="38"/><text x="78.6648%" y="255.50">rust-gka..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (25 samples, 4.22%)</title><rect x="80.6071%" y="229" width="4.2159%" height="15" fill="rgb(220,109,13)" fg:x="478" fg:w="25"/><text x="80.8571%" y="239.50">rust-..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (5 samples, 0.84%)</title><rect x="83.9798%" y="213" width="0.8432%" height="15" fill="rgb(232,18,1)" fg:x="498" fg:w="5"/><text x="84.2298%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (5 samples, 0.84%)</title><rect x="83.9798%" y="197" width="0.8432%" height="15" fill="rgb(215,41,42)" fg:x="498" fg:w="5"/><text x="84.2298%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="84.3170%" y="181" width="0.5059%" height="15" fill="rgb(224,123,36)" fg:x="500" fg:w="3"/><text x="84.5670%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="84.4857%" y="165" width="0.3373%" height="15" fill="rgb(240,125,3)" fg:x="501" fg:w="2"/><text x="84.7357%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="84.6543%" y="149" width="0.1686%" height="15" fill="rgb(205,98,50)" fg:x="502" fg:w="1"/><text x="84.9043%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="84.6543%" y="133" width="0.1686%" height="15" fill="rgb(205,185,37)" fg:x="502" fg:w="1"/><text x="84.9043%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="84.6543%" y="117" width="0.1686%" height="15" fill="rgb(238,207,15)" fg:x="502" fg:w="1"/><text x="84.9043%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="84.8229%" y="197" width="0.1686%" height="15" fill="rgb(213,199,42)" fg:x="503" fg:w="1"/><text x="85.0729%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="84.8229%" y="181" width="0.1686%" height="15" fill="rgb(235,201,11)" fg:x="503" fg:w="1"/><text x="85.0729%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="84.9916%" y="181" width="0.1686%" height="15" fill="rgb(207,46,11)" fg:x="504" fg:w="1"/><text x="85.2416%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="84.9916%" y="165" width="0.1686%" height="15" fill="rgb(241,35,35)" fg:x="504" fg:w="1"/><text x="85.2416%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (56 samples, 9.44%)</title><rect x="75.8853%" y="277" width="9.4435%" height="15" fill="rgb(243,32,47)" fg:x="450" fg:w="56"/><text x="76.1353%" y="287.50">rust-gkat`rust..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (46 samples, 7.76%)</title><rect x="77.5717%" y="261" width="7.7572%" height="15" fill="rgb(247,202,23)" fg:x="460" fg:w="46"/><text x="77.8217%" y="271.50">rust-gkat`r..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="84.8229%" y="245" width="0.5059%" height="15" fill="rgb(219,102,11)" fg:x="503" fg:w="3"/><text x="85.0729%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="84.8229%" y="229" width="0.5059%" height="15" fill="rgb(243,110,44)" fg:x="503" fg:w="3"/><text x="85.0729%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="84.8229%" y="213" width="0.5059%" height="15" fill="rgb(222,74,54)" fg:x="503" fg:w="3"/><text x="85.0729%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="84.9916%" y="197" width="0.3373%" height="15" fill="rgb(216,99,12)" fg:x="504" fg:w="2"/><text x="85.2416%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="85.1602%" y="181" width="0.1686%" height="15" fill="rgb(226,22,26)" fg:x="505" fg:w="1"/><text x="85.4102%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="85.1602%" y="165" width="0.1686%" height="15" fill="rgb(217,163,10)" fg:x="505" fg:w="1"/><text x="85.4102%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_not (1 samples, 0.17%)</title><rect x="85.1602%" y="149" width="0.1686%" height="15" fill="rgb(213,25,53)" fg:x="505" fg:w="1"/><text x="85.4102%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="85.1602%" y="133" width="0.1686%" height="15" fill="rgb(252,105,26)" fg:x="505" fg:w="1"/><text x="85.4102%" y="143.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="85.1602%" y="117" width="0.1686%" height="15" fill="rgb(220,39,43)" fg:x="505" fg:w="1"/><text x="85.4102%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="85.3288%" y="213" width="0.1686%" height="15" fill="rgb(229,68,48)" fg:x="506" fg:w="1"/><text x="85.5788%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="85.3288%" y="197" width="0.1686%" height="15" fill="rgb(252,8,32)" fg:x="506" fg:w="1"/><text x="85.5788%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="85.3288%" y="181" width="0.1686%" height="15" fill="rgb(223,20,43)" fg:x="506" fg:w="1"/><text x="85.5788%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_not (1 samples, 0.17%)</title><rect x="85.4975%" y="197" width="0.1686%" height="15" fill="rgb(229,81,49)" fg:x="507" fg:w="1"/><text x="85.7475%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="85.6661%" y="165" width="0.1686%" height="15" fill="rgb(236,28,36)" fg:x="508" fg:w="1"/><text x="85.9161%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="85.6661%" y="149" width="0.1686%" height="15" fill="rgb(249,185,26)" fg:x="508" fg:w="1"/><text x="85.9161%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="85.6661%" y="133" width="0.1686%" height="15" fill="rgb(249,174,33)" fg:x="508" fg:w="1"/><text x="85.9161%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (67 samples, 11.30%)</title><rect x="74.7049%" y="309" width="11.2985%" height="15" fill="rgb(233,201,37)" fg:x="443" fg:w="67"/><text x="74.9549%" y="319.50">rust-gkat`rust_gk..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (63 samples, 10.62%)</title><rect x="75.3794%" y="293" width="10.6239%" height="15" fill="rgb(221,78,26)" fg:x="447" fg:w="63"/><text x="75.6294%" y="303.50">rust-gkat`rust_g..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="85.3288%" y="277" width="0.6745%" height="15" fill="rgb(250,127,30)" fg:x="506" fg:w="4"/><text x="85.5788%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="85.3288%" y="261" width="0.6745%" height="15" fill="rgb(230,49,44)" fg:x="506" fg:w="4"/><text x="85.5788%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="85.3288%" y="245" width="0.6745%" height="15" fill="rgb(229,67,23)" fg:x="506" fg:w="4"/><text x="85.5788%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="85.3288%" y="229" width="0.6745%" height="15" fill="rgb(249,83,47)" fg:x="506" fg:w="4"/><text x="85.5788%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="85.4975%" y="213" width="0.5059%" height="15" fill="rgb(215,43,3)" fg:x="507" fg:w="3"/><text x="85.7475%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="85.6661%" y="197" width="0.3373%" height="15" fill="rgb(238,154,13)" fg:x="508" fg:w="2"/><text x="85.9161%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="85.6661%" y="181" width="0.3373%" height="15" fill="rgb(219,56,2)" fg:x="508" fg:w="2"/><text x="85.9161%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="85.8347%" y="165" width="0.1686%" height="15" fill="rgb(233,0,4)" fg:x="509" fg:w="1"/><text x="86.0847%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="85.8347%" y="149" width="0.1686%" height="15" fill="rgb(235,30,7)" fg:x="509" fg:w="1"/><text x="86.0847%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="85.8347%" y="133" width="0.1686%" height="15" fill="rgb(250,79,13)" fg:x="509" fg:w="1"/><text x="86.0847%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_not (1 samples, 0.17%)</title><rect x="86.0034%" y="213" width="0.1686%" height="15" fill="rgb(211,146,34)" fg:x="510" fg:w="1"/><text x="86.2534%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="86.0034%" y="197" width="0.1686%" height="15" fill="rgb(228,22,38)" fg:x="510" fg:w="1"/><text x="86.2534%" y="207.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.17%)</title><rect x="86.0034%" y="181" width="0.1686%" height="15" fill="rgb(235,168,5)" fg:x="510" fg:w="1"/><text x="86.2534%" y="191.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="86.0034%" y="165" width="0.1686%" height="15" fill="rgb(221,155,16)" fg:x="510" fg:w="1"/><text x="86.2534%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="86.0034%" y="309" width="0.3373%" height="15" fill="rgb(215,215,53)" fg:x="510" fg:w="2"/><text x="86.2534%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="86.0034%" y="293" width="0.3373%" height="15" fill="rgb(223,4,10)" fg:x="510" fg:w="2"/><text x="86.2534%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="86.0034%" y="277" width="0.3373%" height="15" fill="rgb(234,103,6)" fg:x="510" fg:w="2"/><text x="86.2534%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="86.0034%" y="261" width="0.3373%" height="15" fill="rgb(227,97,0)" fg:x="510" fg:w="2"/><text x="86.2534%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="86.0034%" y="245" width="0.3373%" height="15" fill="rgb(234,150,53)" fg:x="510" fg:w="2"/><text x="86.2534%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="86.0034%" y="229" width="0.3373%" height="15" fill="rgb(228,201,54)" fg:x="510" fg:w="2"/><text x="86.2534%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="86.1720%" y="213" width="0.1686%" height="15" fill="rgb(222,22,37)" fg:x="511" fg:w="1"/><text x="86.4220%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="86.1720%" y="197" width="0.1686%" height="15" fill="rgb(237,53,32)" fg:x="511" fg:w="1"/><text x="86.4220%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="86.1720%" y="181" width="0.1686%" height="15" fill="rgb(233,25,53)" fg:x="511" fg:w="1"/><text x="86.4220%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="86.1720%" y="165" width="0.1686%" height="15" fill="rgb(210,40,34)" fg:x="511" fg:w="1"/><text x="86.4220%" y="175.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.17%)</title><rect x="86.3406%" y="293" width="0.1686%" height="15" fill="rgb(241,220,44)" fg:x="512" fg:w="1"/><text x="86.5906%" y="303.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 0.67%)</title><rect x="86.5093%" y="229" width="0.6745%" height="15" fill="rgb(235,28,35)" fg:x="513" fg:w="4"/><text x="86.7593%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="87.0152%" y="213" width="0.1686%" height="15" fill="rgb(210,56,17)" fg:x="516" fg:w="1"/><text x="87.2652%" y="223.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.84%)</title><rect x="86.5093%" y="277" width="0.8432%" height="15" fill="rgb(224,130,29)" fg:x="513" fg:w="5"/><text x="86.7593%" y="287.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.84%)</title><rect x="86.5093%" y="261" width="0.8432%" height="15" fill="rgb(235,212,8)" fg:x="513" fg:w="5"/><text x="86.7593%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (5 samples, 0.84%)</title><rect x="86.5093%" y="245" width="0.8432%" height="15" fill="rgb(223,33,50)" fg:x="513" fg:w="5"/><text x="86.7593%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="87.1838%" y="229" width="0.1686%" height="15" fill="rgb(219,149,13)" fg:x="517" fg:w="1"/><text x="87.4338%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.17%)</title><rect x="87.3524%" y="261" width="0.1686%" height="15" fill="rgb(250,156,29)" fg:x="518" fg:w="1"/><text x="87.6024%" y="271.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="87.6897%" y="197" width="0.1686%" height="15" fill="rgb(216,193,19)" fg:x="520" fg:w="1"/><text x="87.9397%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.51%)</title><rect x="87.5211%" y="213" width="0.5059%" height="15" fill="rgb(216,135,14)" fg:x="519" fg:w="3"/><text x="87.7711%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.17%)</title><rect x="87.8583%" y="197" width="0.1686%" height="15" fill="rgb(241,47,5)" fg:x="521" fg:w="1"/><text x="88.1083%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="87.8583%" y="181" width="0.1686%" height="15" fill="rgb(233,42,35)" fg:x="521" fg:w="1"/><text x="88.1083%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="88.0270%" y="213" width="0.1686%" height="15" fill="rgb(231,13,6)" fg:x="522" fg:w="1"/><text x="88.2770%" y="223.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.84%)</title><rect x="87.5211%" y="261" width="0.8432%" height="15" fill="rgb(207,181,40)" fg:x="519" fg:w="5"/><text x="87.7711%" y="271.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.84%)</title><rect x="87.5211%" y="245" width="0.8432%" height="15" fill="rgb(254,173,49)" fg:x="519" fg:w="5"/><text x="87.7711%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (5 samples, 0.84%)</title><rect x="87.5211%" y="229" width="0.8432%" height="15" fill="rgb(221,1,38)" fg:x="519" fg:w="5"/><text x="87.7711%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::exp::Exp_&gt; (1 samples, 0.17%)</title><rect x="88.1956%" y="213" width="0.1686%" height="15" fill="rgb(206,124,46)" fg:x="523" fg:w="1"/><text x="88.4456%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 0.84%)</title><rect x="88.3642%" y="197" width="0.8432%" height="15" fill="rgb(249,21,11)" fg:x="524" fg:w="5"/><text x="88.6142%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="89.0388%" y="181" width="0.1686%" height="15" fill="rgb(222,201,40)" fg:x="528" fg:w="1"/><text x="89.2888%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 1.01%)</title><rect x="88.3642%" y="229" width="1.0118%" height="15" fill="rgb(235,61,29)" fg:x="524" fg:w="6"/><text x="88.6142%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (6 samples, 1.01%)</title><rect x="88.3642%" y="213" width="1.0118%" height="15" fill="rgb(219,207,3)" fg:x="524" fg:w="6"/><text x="88.6142%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="89.2074%" y="197" width="0.1686%" height="15" fill="rgb(222,56,46)" fg:x="529" fg:w="1"/><text x="89.4574%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="89.3761%" y="213" width="0.1686%" height="15" fill="rgb(239,76,54)" fg:x="530" fg:w="1"/><text x="89.6261%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="89.5447%" y="181" width="0.1686%" height="15" fill="rgb(231,124,27)" fg:x="531" fg:w="1"/><text x="89.7947%" y="191.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (10 samples, 1.69%)</title><rect x="88.3642%" y="245" width="1.6863%" height="15" fill="rgb(249,195,6)" fg:x="524" fg:w="10"/><text x="88.6142%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (4 samples, 0.67%)</title><rect x="89.3761%" y="229" width="0.6745%" height="15" fill="rgb(237,174,47)" fg:x="530" fg:w="4"/><text x="89.6261%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (3 samples, 0.51%)</title><rect x="89.5447%" y="213" width="0.5059%" height="15" fill="rgb(206,201,31)" fg:x="531" fg:w="3"/><text x="89.7947%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.51%)</title><rect x="89.5447%" y="197" width="0.5059%" height="15" fill="rgb(231,57,52)" fg:x="531" fg:w="3"/><text x="89.7947%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="89.7133%" y="181" width="0.3373%" height="15" fill="rgb(248,177,22)" fg:x="532" fg:w="2"/><text x="89.9633%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.34%)</title><rect x="90.0506%" y="213" width="0.3373%" height="15" fill="rgb(215,211,37)" fg:x="534" fg:w="2"/><text x="90.3006%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (2 samples, 0.34%)</title><rect x="90.0506%" y="197" width="0.3373%" height="15" fill="rgb(241,128,51)" fg:x="534" fg:w="2"/><text x="90.3006%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.34%)</title><rect x="90.0506%" y="181" width="0.3373%" height="15" fill="rgb(227,165,31)" fg:x="534" fg:w="2"/><text x="90.3006%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="90.0506%" y="165" width="0.3373%" height="15" fill="rgb(228,167,24)" fg:x="534" fg:w="2"/><text x="90.3006%" y="175.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="90.3879%" y="165" width="0.1686%" height="15" fill="rgb(228,143,12)" fg:x="536" fg:w="1"/><text x="90.6379%" y="175.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.67%)</title><rect x="90.0506%" y="229" width="0.6745%" height="15" fill="rgb(249,149,8)" fg:x="534" fg:w="4"/><text x="90.3006%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (2 samples, 0.34%)</title><rect x="90.3879%" y="213" width="0.3373%" height="15" fill="rgb(243,35,44)" fg:x="536" fg:w="2"/><text x="90.6379%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (2 samples, 0.34%)</title><rect x="90.3879%" y="197" width="0.3373%" height="15" fill="rgb(246,89,9)" fg:x="536" fg:w="2"/><text x="90.6379%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.34%)</title><rect x="90.3879%" y="181" width="0.3373%" height="15" fill="rgb(233,213,13)" fg:x="536" fg:w="2"/><text x="90.6379%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="90.5565%" y="165" width="0.1686%" height="15" fill="rgb(233,141,41)" fg:x="537" fg:w="1"/><text x="90.8065%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="90.7251%" y="165" width="0.1686%" height="15" fill="rgb(239,167,4)" fg:x="538" fg:w="1"/><text x="90.9751%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (2 samples, 0.34%)</title><rect x="90.7251%" y="181" width="0.3373%" height="15" fill="rgb(209,217,16)" fg:x="538" fg:w="2"/><text x="90.9751%" y="191.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="90.8938%" y="165" width="0.1686%" height="15" fill="rgb(219,88,35)" fg:x="539" fg:w="1"/><text x="91.1438%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="91.0624%" y="165" width="0.1686%" height="15" fill="rgb(220,193,23)" fg:x="540" fg:w="1"/><text x="91.3124%" y="175.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.67%)</title><rect x="90.7251%" y="197" width="0.6745%" height="15" fill="rgb(230,90,52)" fg:x="538" fg:w="4"/><text x="90.9751%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (2 samples, 0.34%)</title><rect x="91.0624%" y="181" width="0.3373%" height="15" fill="rgb(252,106,19)" fg:x="540" fg:w="2"/><text x="91.3124%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="91.2310%" y="165" width="0.1686%" height="15" fill="rgb(206,74,20)" fg:x="541" fg:w="1"/><text x="91.4810%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (3 samples, 0.51%)</title><rect x="91.3997%" y="181" width="0.5059%" height="15" fill="rgb(230,138,44)" fg:x="542" fg:w="3"/><text x="91.6497%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.51%)</title><rect x="91.3997%" y="165" width="0.5059%" height="15" fill="rgb(235,182,43)" fg:x="542" fg:w="3"/><text x="91.6497%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="91.5683%" y="149" width="0.3373%" height="15" fill="rgb(242,16,51)" fg:x="543" fg:w="2"/><text x="91.8183%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="92.0742%" y="165" width="0.1686%" height="15" fill="rgb(248,9,4)" fg:x="546" fg:w="1"/><text x="92.3242%" y="175.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="92.0742%" y="149" width="0.1686%" height="15" fill="rgb(210,31,22)" fg:x="546" fg:w="1"/><text x="92.3242%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (10 samples, 1.69%)</title><rect x="90.7251%" y="213" width="1.6863%" height="15" fill="rgb(239,54,39)" fg:x="538" fg:w="10"/><text x="90.9751%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::while_helper::_{{closure}} (6 samples, 1.01%)</title><rect x="91.3997%" y="197" width="1.0118%" height="15" fill="rgb(230,99,41)" fg:x="542" fg:w="6"/><text x="91.6497%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (3 samples, 0.51%)</title><rect x="91.9056%" y="181" width="0.5059%" height="15" fill="rgb(253,106,12)" fg:x="545" fg:w="3"/><text x="92.1556%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="92.2428%" y="165" width="0.1686%" height="15" fill="rgb(213,46,41)" fg:x="547" fg:w="1"/><text x="92.4928%" y="175.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.17%)</title><rect x="92.4115%" y="197" width="0.1686%" height="15" fill="rgb(215,133,35)" fg:x="548" fg:w="1"/><text x="92.6615%" y="207.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="92.4115%" y="181" width="0.1686%" height="15" fill="rgb(213,28,5)" fg:x="548" fg:w="1"/><text x="92.6615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.17%)</title><rect x="92.4115%" y="165" width="0.1686%" height="15" fill="rgb(215,77,49)" fg:x="548" fg:w="1"/><text x="92.6615%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.17%)</title><rect x="92.4115%" y="149" width="0.1686%" height="15" fill="rgb(248,100,22)" fg:x="548" fg:w="1"/><text x="92.6615%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.17%)</title><rect x="92.4115%" y="133" width="0.1686%" height="15" fill="rgb(208,67,9)" fg:x="548" fg:w="1"/><text x="92.6615%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.17%)</title><rect x="92.4115%" y="117" width="0.1686%" height="15" fill="rgb(219,133,21)" fg:x="548" fg:w="1"/><text x="92.6615%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.17%)</title><rect x="92.4115%" y="101" width="0.1686%" height="15" fill="rgb(246,46,29)" fg:x="548" fg:w="1"/><text x="92.6615%" y="111.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.34%)</title><rect x="92.7487%" y="133" width="0.3373%" height="15" fill="rgb(246,185,52)" fg:x="550" fg:w="2"/><text x="92.9987%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.51%)</title><rect x="92.7487%" y="149" width="0.5059%" height="15" fill="rgb(252,136,11)" fg:x="550" fg:w="3"/><text x="92.9987%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="93.0860%" y="133" width="0.1686%" height="15" fill="rgb(219,138,53)" fg:x="552" fg:w="1"/><text x="93.3360%" y="143.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 1.01%)</title><rect x="92.5801%" y="197" width="1.0118%" height="15" fill="rgb(211,51,23)" fg:x="549" fg:w="6"/><text x="92.8301%" y="207.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 1.01%)</title><rect x="92.5801%" y="181" width="1.0118%" height="15" fill="rgb(247,221,28)" fg:x="549" fg:w="6"/><text x="92.8301%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (6 samples, 1.01%)</title><rect x="92.5801%" y="165" width="1.0118%" height="15" fill="rgb(251,222,45)" fg:x="549" fg:w="6"/><text x="92.8301%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.34%)</title><rect x="93.2546%" y="149" width="0.3373%" height="15" fill="rgb(217,162,53)" fg:x="553" fg:w="2"/><text x="93.5046%" y="159.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="93.5919%" y="149" width="0.1686%" height="15" fill="rgb(229,93,14)" fg:x="555" fg:w="1"/><text x="93.8419%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (2 samples, 0.34%)</title><rect x="93.7605%" y="149" width="0.3373%" height="15" fill="rgb(209,67,49)" fg:x="556" fg:w="2"/><text x="94.0105%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.34%)</title><rect x="93.7605%" y="133" width="0.3373%" height="15" fill="rgb(213,87,29)" fg:x="556" fg:w="2"/><text x="94.0105%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="93.9292%" y="117" width="0.1686%" height="15" fill="rgb(205,151,52)" fg:x="557" fg:w="1"/><text x="94.1792%" y="127.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="94.4351%" y="117" width="0.1686%" height="15" fill="rgb(253,215,39)" fg:x="560" fg:w="1"/><text x="94.6851%" y="127.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 1.18%)</title><rect x="93.5919%" y="181" width="1.1804%" height="15" fill="rgb(221,220,41)" fg:x="555" fg:w="7"/><text x="93.8419%" y="191.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 1.18%)</title><rect x="93.5919%" y="165" width="1.1804%" height="15" fill="rgb(218,133,21)" fg:x="555" fg:w="7"/><text x="93.8419%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (4 samples, 0.67%)</title><rect x="94.0978%" y="149" width="0.6745%" height="15" fill="rgb(221,193,43)" fg:x="558" fg:w="4"/><text x="94.3478%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 0.67%)</title><rect x="94.0978%" y="133" width="0.6745%" height="15" fill="rgb(240,128,52)" fg:x="558" fg:w="4"/><text x="94.3478%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="94.6037%" y="117" width="0.1686%" height="15" fill="rgb(253,114,12)" fg:x="561" fg:w="1"/><text x="94.8537%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="94.9410%" y="117" width="0.1686%" height="15" fill="rgb(215,223,47)" fg:x="563" fg:w="1"/><text x="95.1910%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (3 samples, 0.51%)</title><rect x="94.7723%" y="133" width="0.5059%" height="15" fill="rgb(248,225,23)" fg:x="562" fg:w="3"/><text x="95.0223%" y="143.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="95.1096%" y="117" width="0.1686%" height="15" fill="rgb(250,108,0)" fg:x="564" fg:w="1"/><text x="95.3596%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="95.2782%" y="117" width="0.1686%" height="15" fill="rgb(228,208,7)" fg:x="565" fg:w="1"/><text x="95.5282%" y="127.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="95.2782%" y="101" width="0.1686%" height="15" fill="rgb(244,45,10)" fg:x="565" fg:w="1"/><text x="95.5282%" y="111.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.84%)</title><rect x="94.7723%" y="165" width="0.8432%" height="15" fill="rgb(207,125,25)" fg:x="562" fg:w="5"/><text x="95.0223%" y="175.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.84%)</title><rect x="94.7723%" y="149" width="0.8432%" height="15" fill="rgb(210,195,18)" fg:x="562" fg:w="5"/><text x="95.0223%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (2 samples, 0.34%)</title><rect x="95.2782%" y="133" width="0.3373%" height="15" fill="rgb(249,80,12)" fg:x="565" fg:w="2"/><text x="95.5282%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="95.4469%" y="117" width="0.1686%" height="15" fill="rgb(221,65,9)" fg:x="566" fg:w="1"/><text x="95.6969%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.17%)</title><rect x="95.6155%" y="149" width="0.1686%" height="15" fill="rgb(235,49,36)" fg:x="567" fg:w="1"/><text x="95.8655%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="95.9528%" y="117" width="0.1686%" height="15" fill="rgb(225,32,20)" fg:x="569" fg:w="1"/><text x="96.2028%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="95.9528%" y="101" width="0.1686%" height="15" fill="rgb(215,141,46)" fg:x="569" fg:w="1"/><text x="96.2028%" y="111.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="96.2901%" y="85" width="0.1686%" height="15" fill="rgb(250,160,47)" fg:x="571" fg:w="1"/><text x="96.5401%" y="95.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.84%)</title><rect x="95.7841%" y="149" width="0.8432%" height="15" fill="rgb(216,222,40)" fg:x="568" fg:w="5"/><text x="96.0341%" y="159.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.67%)</title><rect x="95.9528%" y="133" width="0.6745%" height="15" fill="rgb(234,217,39)" fg:x="569" fg:w="4"/><text x="96.2028%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (3 samples, 0.51%)</title><rect x="96.1214%" y="117" width="0.5059%" height="15" fill="rgb(207,178,40)" fg:x="570" fg:w="3"/><text x="96.3714%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.34%)</title><rect x="96.2901%" y="101" width="0.3373%" height="15" fill="rgb(221,136,13)" fg:x="571" fg:w="2"/><text x="96.5401%" y="111.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="96.4587%" y="85" width="0.1686%" height="15" fill="rgb(249,199,10)" fg:x="572" fg:w="1"/><text x="96.7087%" y="95.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.17%)</title><rect x="96.6273%" y="117" width="0.1686%" height="15" fill="rgb(249,222,13)" fg:x="573" fg:w="1"/><text x="96.8773%" y="127.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.17%)</title><rect x="96.6273%" y="101" width="0.1686%" height="15" fill="rgb(244,185,38)" fg:x="573" fg:w="1"/><text x="96.8773%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::exp::mk_seq (1 samples, 0.17%)</title><rect x="96.6273%" y="85" width="0.1686%" height="15" fill="rgb(236,202,9)" fg:x="573" fg:w="1"/><text x="96.8773%" y="95.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="96.6273%" y="69" width="0.1686%" height="15" fill="rgb(250,229,37)" fg:x="573" fg:w="1"/><text x="96.8773%" y="79.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (2 samples, 0.34%)</title><rect x="96.6273%" y="149" width="0.3373%" height="15" fill="rgb(206,174,23)" fg:x="573" fg:w="2"/><text x="96.8773%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (2 samples, 0.34%)</title><rect x="96.6273%" y="133" width="0.3373%" height="15" fill="rgb(211,33,43)" fg:x="573" fg:w="2"/><text x="96.8773%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (1 samples, 0.17%)</title><rect x="96.7960%" y="117" width="0.1686%" height="15" fill="rgb(245,58,50)" fg:x="574" fg:w="1"/><text x="97.0460%" y="127.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.17%)</title><rect x="96.7960%" y="101" width="0.1686%" height="15" fill="rgb(244,68,36)" fg:x="574" fg:w="1"/><text x="97.0460%" y="111.50"></text></g><g><title>rust-gkat`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.17%)</title><rect x="96.7960%" y="85" width="0.1686%" height="15" fill="rgb(232,229,15)" fg:x="574" fg:w="1"/><text x="97.0460%" y="95.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="96.7960%" y="69" width="0.1686%" height="15" fill="rgb(254,30,23)" fg:x="574" fg:w="1"/><text x="97.0460%" y="79.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="96.7960%" y="53" width="0.1686%" height="15" fill="rgb(235,160,14)" fg:x="574" fg:w="1"/><text x="97.0460%" y="63.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="96.7960%" y="37" width="0.1686%" height="15" fill="rgb(212,155,44)" fg:x="574" fg:w="1"/><text x="97.0460%" y="47.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="96.9646%" y="133" width="0.1686%" height="15" fill="rgb(226,2,50)" fg:x="575" fg:w="1"/><text x="97.2146%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="96.9646%" y="117" width="0.1686%" height="15" fill="rgb(234,177,6)" fg:x="575" fg:w="1"/><text x="97.2146%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (10 samples, 1.69%)</title><rect x="95.6155%" y="165" width="1.6863%" height="15" fill="rgb(217,24,9)" fg:x="567" fg:w="10"/><text x="95.8655%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="96.9646%" y="149" width="0.3373%" height="15" fill="rgb(220,13,46)" fg:x="575" fg:w="2"/><text x="97.2146%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="97.1332%" y="133" width="0.1686%" height="15" fill="rgb(239,221,27)" fg:x="576" fg:w="1"/><text x="97.3832%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="97.1332%" y="117" width="0.1686%" height="15" fill="rgb(222,198,25)" fg:x="576" fg:w="1"/><text x="97.3832%" y="127.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="97.1332%" y="101" width="0.1686%" height="15" fill="rgb(211,99,13)" fg:x="576" fg:w="1"/><text x="97.3832%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="97.3019%" y="149" width="0.1686%" height="15" fill="rgb(232,111,31)" fg:x="577" fg:w="1"/><text x="97.5519%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="97.3019%" y="133" width="0.1686%" height="15" fill="rgb(245,82,37)" fg:x="577" fg:w="1"/><text x="97.5519%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="97.4705%" y="117" width="0.1686%" height="15" fill="rgb(227,149,46)" fg:x="578" fg:w="1"/><text x="97.7205%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="97.4705%" y="101" width="0.1686%" height="15" fill="rgb(218,36,50)" fg:x="578" fg:w="1"/><text x="97.7205%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (18 samples, 3.04%)</title><rect x="94.7723%" y="181" width="3.0354%" height="15" fill="rgb(226,80,48)" fg:x="562" fg:w="18"/><text x="95.0223%" y="191.50">rus..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="97.3019%" y="165" width="0.5059%" height="15" fill="rgb(238,224,15)" fg:x="577" fg:w="3"/><text x="97.5519%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.4705%" y="149" width="0.3373%" height="15" fill="rgb(241,136,10)" fg:x="578" fg:w="2"/><text x="97.7205%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.4705%" y="133" width="0.3373%" height="15" fill="rgb(208,32,45)" fg:x="578" fg:w="2"/><text x="97.7205%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_not (1 samples, 0.17%)</title><rect x="97.6391%" y="117" width="0.1686%" height="15" fill="rgb(207,135,9)" fg:x="579" fg:w="1"/><text x="97.8891%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="97.6391%" y="101" width="0.1686%" height="15" fill="rgb(206,86,44)" fg:x="579" fg:w="1"/><text x="97.8891%" y="111.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="97.6391%" y="85" width="0.1686%" height="15" fill="rgb(245,177,15)" fg:x="579" fg:w="1"/><text x="97.8891%" y="95.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (27 samples, 4.55%)</title><rect x="93.5919%" y="197" width="4.5531%" height="15" fill="rgb(206,64,50)" fg:x="555" fg:w="27"/><text x="93.8419%" y="207.50">rust-..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.8078%" y="181" width="0.3373%" height="15" fill="rgb(234,36,40)" fg:x="580" fg:w="2"/><text x="98.0578%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.8078%" y="165" width="0.3373%" height="15" fill="rgb(213,64,8)" fg:x="580" fg:w="2"/><text x="98.0578%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.8078%" y="149" width="0.3373%" height="15" fill="rgb(210,75,36)" fg:x="580" fg:w="2"/><text x="98.0578%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.8078%" y="133" width="0.3373%" height="15" fill="rgb(229,88,21)" fg:x="580" fg:w="2"/><text x="98.0578%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="97.8078%" y="117" width="0.3373%" height="15" fill="rgb(252,204,47)" fg:x="580" fg:w="2"/><text x="98.0578%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (2 samples, 0.34%)</title><rect x="97.8078%" y="101" width="0.3373%" height="15" fill="rgb(208,77,27)" fg:x="580" fg:w="2"/><text x="98.0578%" y="111.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="97.9764%" y="85" width="0.1686%" height="15" fill="rgb(221,76,26)" fg:x="581" fg:w="1"/><text x="98.2264%" y="95.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (35 samples, 5.90%)</title><rect x="92.4115%" y="213" width="5.9022%" height="15" fill="rgb(225,139,18)" fg:x="548" fg:w="35"/><text x="92.6615%" y="223.50">rust-gka..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.1450%" y="197" width="0.1686%" height="15" fill="rgb(230,137,11)" fg:x="582" fg:w="1"/><text x="98.3950%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.1450%" y="181" width="0.1686%" height="15" fill="rgb(212,28,1)" fg:x="582" fg:w="1"/><text x="98.3950%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.1450%" y="165" width="0.1686%" height="15" fill="rgb(248,164,17)" fg:x="582" fg:w="1"/><text x="98.3950%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.1450%" y="149" width="0.1686%" height="15" fill="rgb(222,171,42)" fg:x="582" fg:w="1"/><text x="98.3950%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="98.1450%" y="133" width="0.1686%" height="15" fill="rgb(243,84,45)" fg:x="582" fg:w="1"/><text x="98.3950%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="98.1450%" y="117" width="0.1686%" height="15" fill="rgb(252,49,23)" fg:x="582" fg:w="1"/><text x="98.3950%" y="127.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="98.1450%" y="101" width="0.1686%" height="15" fill="rgb(215,19,7)" fg:x="582" fg:w="1"/><text x="98.3950%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="98.3137%" y="197" width="0.1686%" height="15" fill="rgb(238,81,41)" fg:x="583" fg:w="1"/><text x="98.5637%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="98.3137%" y="181" width="0.1686%" height="15" fill="rgb(210,199,37)" fg:x="583" fg:w="1"/><text x="98.5637%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="98.3137%" y="165" width="0.1686%" height="15" fill="rgb(244,192,49)" fg:x="583" fg:w="1"/><text x="98.5637%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="98.4823%" y="165" width="0.1686%" height="15" fill="rgb(226,211,11)" fg:x="584" fg:w="1"/><text x="98.7323%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (48 samples, 8.09%)</title><rect x="90.7251%" y="229" width="8.0944%" height="15" fill="rgb(236,162,54)" fg:x="538" fg:w="48"/><text x="90.9751%" y="239.50">rust-gkat`r..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="98.3137%" y="213" width="0.5059%" height="15" fill="rgb(220,229,9)" fg:x="583" fg:w="3"/><text x="98.5637%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="98.4823%" y="197" width="0.3373%" height="15" fill="rgb(250,87,22)" fg:x="584" fg:w="2"/><text x="98.7323%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="98.4823%" y="181" width="0.3373%" height="15" fill="rgb(239,43,17)" fg:x="584" fg:w="2"/><text x="98.7323%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.6509%" y="165" width="0.1686%" height="15" fill="rgb(231,177,25)" fg:x="585" fg:w="1"/><text x="98.9009%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="98.6509%" y="149" width="0.1686%" height="15" fill="rgb(219,179,1)" fg:x="585" fg:w="1"/><text x="98.9009%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="98.6509%" y="133" width="0.1686%" height="15" fill="rgb(238,219,53)" fg:x="585" fg:w="1"/><text x="98.9009%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (74 samples, 12.48%)</title><rect x="86.5093%" y="293" width="12.4789%" height="15" fill="rgb(232,167,36)" fg:x="513" fg:w="74"/><text x="86.7593%" y="303.50">rust-gkat`rust_gkat..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (69 samples, 11.64%)</title><rect x="87.3524%" y="277" width="11.6358%" height="15" fill="rgb(244,19,51)" fg:x="518" fg:w="69"/><text x="87.6024%" y="287.50">rust-gkat`rust_gk..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (63 samples, 10.62%)</title><rect x="88.3642%" y="261" width="10.6239%" height="15" fill="rgb(224,6,22)" fg:x="524" fg:w="63"/><text x="88.6142%" y="271.50">rust-gkat`rust_g..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::derivative::derivative (53 samples, 8.94%)</title><rect x="90.0506%" y="245" width="8.9376%" height="15" fill="rgb(224,145,5)" fg:x="534" fg:w="53"/><text x="90.3006%" y="255.50">rust-gkat`rus..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.8196%" y="229" width="0.1686%" height="15" fill="rgb(234,130,49)" fg:x="586" fg:w="1"/><text x="99.0696%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.8196%" y="213" width="0.1686%" height="15" fill="rgb(254,6,2)" fg:x="586" fg:w="1"/><text x="99.0696%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (1 samples, 0.17%)</title><rect x="98.8196%" y="197" width="0.1686%" height="15" fill="rgb(208,96,46)" fg:x="586" fg:w="1"/><text x="99.0696%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_not (1 samples, 0.17%)</title><rect x="98.8196%" y="181" width="0.1686%" height="15" fill="rgb(239,3,39)" fg:x="586" fg:w="1"/><text x="99.0696%" y="191.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::gkat_ast::bexp::BExp_&gt; (1 samples, 0.17%)</title><rect x="98.8196%" y="165" width="0.1686%" height="15" fill="rgb(233,210,1)" fg:x="586" fg:w="1"/><text x="99.0696%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="98.9882%" y="181" width="0.1686%" height="15" fill="rgb(244,137,37)" fg:x="587" fg:w="1"/><text x="99.2382%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="98.9882%" y="165" width="0.1686%" height="15" fill="rgb(240,136,2)" fg:x="587" fg:w="1"/><text x="99.2382%" y="175.50"></text></g><g><title>rust-gkat`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.17%)</title><rect x="98.9882%" y="149" width="0.1686%" height="15" fill="rgb(239,18,37)" fg:x="587" fg:w="1"/><text x="99.2382%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="99.3255%" y="149" width="0.1686%" height="15" fill="rgb(218,185,22)" fg:x="589" fg:w="1"/><text x="99.5755%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="99.3255%" y="133" width="0.1686%" height="15" fill="rgb(225,218,4)" fg:x="589" fg:w="1"/><text x="99.5755%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::equiv_iter::equiv (578 samples, 97.47%)</title><rect x="2.1922%" y="325" width="97.4705%" height="15" fill="rgb(230,182,32)" fg:x="13" fg:w="578"/><text x="2.4422%" y="335.50">rust-gkat`rust_gkat::gkat_symb::equiv_iter::equiv</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::equiv_iter::reject (79 samples, 13.32%)</title><rect x="86.3406%" y="309" width="13.3221%" height="15" fill="rgb(242,56,43)" fg:x="512" fg:w="79"/><text x="86.5906%" y="319.50">rust-gkat`rust_gkat:..</text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="293" width="0.6745%" height="15" fill="rgb(233,99,24)" fg:x="587" fg:w="4"/><text x="99.2382%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="277" width="0.6745%" height="15" fill="rgb(234,209,42)" fg:x="587" fg:w="4"/><text x="99.2382%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="261" width="0.6745%" height="15" fill="rgb(227,7,12)" fg:x="587" fg:w="4"/><text x="99.2382%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="245" width="0.6745%" height="15" fill="rgb(245,203,43)" fg:x="587" fg:w="4"/><text x="99.2382%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="229" width="0.6745%" height="15" fill="rgb(238,205,33)" fg:x="587" fg:w="4"/><text x="99.2382%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="213" width="0.6745%" height="15" fill="rgb(231,56,7)" fg:x="587" fg:w="4"/><text x="99.2382%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (4 samples, 0.67%)</title><rect x="98.9882%" y="197" width="0.6745%" height="15" fill="rgb(244,186,29)" fg:x="587" fg:w="4"/><text x="99.2382%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (3 samples, 0.51%)</title><rect x="99.1568%" y="181" width="0.5059%" height="15" fill="rgb(234,111,31)" fg:x="588" fg:w="3"/><text x="99.4068%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_symb::epsilon::epsilon (2 samples, 0.34%)</title><rect x="99.3255%" y="165" width="0.3373%" height="15" fill="rgb(241,149,10)" fg:x="589" fg:w="2"/><text x="99.5755%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::gkat_ast::bexp::mk_and (1 samples, 0.17%)</title><rect x="99.4941%" y="149" width="0.1686%" height="15" fill="rgb(249,206,44)" fg:x="590" fg:w="1"/><text x="99.7441%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.17%)</title><rect x="99.4941%" y="133" width="0.1686%" height="15" fill="rgb(251,153,30)" fg:x="590" fg:w="1"/><text x="99.7441%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.17%)</title><rect x="99.4941%" y="117" width="0.1686%" height="15" fill="rgb(239,152,38)" fg:x="590" fg:w="1"/><text x="99.7441%" y="127.50"></text></g><g><title>dyld`start (592 samples, 99.83%)</title><rect x="0.0000%" y="437" width="99.8314%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="592"/><text x="0.2500%" y="447.50">dyld`start</text></g><g><title>rust-gkat`main (592 samples, 99.83%)</title><rect x="0.0000%" y="421" width="99.8314%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="592"/><text x="0.2500%" y="431.50">rust-gkat`main</text></g><g><title>rust-gkat`std::rt::lang_start (592 samples, 99.83%)</title><rect x="0.0000%" y="405" width="99.8314%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="592"/><text x="0.2500%" y="415.50">rust-gkat`std::rt::lang_start</text></g><g><title>rust-gkat`std::rt::lang_start_internal (592 samples, 99.83%)</title><rect x="0.0000%" y="389" width="99.8314%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="592"/><text x="0.2500%" y="399.50">rust-gkat`std::rt::lang_start_internal</text></g><g><title>rust-gkat`std::rt::lang_start::_{{closure}} (592 samples, 99.83%)</title><rect x="0.0000%" y="373" width="99.8314%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="592"/><text x="0.2500%" y="383.50">rust-gkat`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-gkat`std::sys_common::backtrace::__rust_begin_short_backtrace (592 samples, 99.83%)</title><rect x="0.0000%" y="357" width="99.8314%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="592"/><text x="0.2500%" y="367.50">rust-gkat`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-gkat`rust_gkat::main (592 samples, 99.83%)</title><rect x="0.0000%" y="341" width="99.8314%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="592"/><text x="0.2500%" y="351.50">rust-gkat`rust_gkat::main</text></g><g><title>rust-gkat`rust_gkat::parsing::parser::parse (1 samples, 0.17%)</title><rect x="99.6627%" y="325" width="0.1686%" height="15" fill="rgb(220,130,37)" fg:x="591" fg:w="1"/><text x="99.9127%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__parse__Input::InputParser::new (1 samples, 0.17%)</title><rect x="99.6627%" y="309" width="0.1686%" height="15" fill="rgb(211,67,2)" fg:x="591" fg:w="1"/><text x="99.9127%" y="319.50"></text></g><g><title>rust-gkat`lalrpop_util::lexer::MatcherBuilder::new (1 samples, 0.17%)</title><rect x="99.6627%" y="293" width="0.1686%" height="15" fill="rgb(235,68,52)" fg:x="591" fg:w="1"/><text x="99.9127%" y="303.50"></text></g><g><title>rust-gkat`regex_automata::nfa::thompson::compiler::Compiler::build_many (1 samples, 0.17%)</title><rect x="99.6627%" y="277" width="0.1686%" height="15" fill="rgb(246,142,3)" fg:x="591" fg:w="1"/><text x="99.9127%" y="287.50"></text></g><g><title>rust-gkat`regex_syntax::parser::Parser::parse (1 samples, 0.17%)</title><rect x="99.6627%" y="261" width="0.1686%" height="15" fill="rgb(241,25,7)" fg:x="591" fg:w="1"/><text x="99.9127%" y="271.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.17%)</title><rect x="99.6627%" y="245" width="0.1686%" height="15" fill="rgb(242,119,39)" fg:x="591" fg:w="1"/><text x="99.9127%" y="255.50"></text></g><g><title>rust-gkat`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="99.6627%" y="229" width="0.1686%" height="15" fill="rgb(241,98,45)" fg:x="591" fg:w="1"/><text x="99.9127%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.17%)</title><rect x="99.6627%" y="213" width="0.1686%" height="15" fill="rgb(254,28,30)" fg:x="591" fg:w="1"/><text x="99.9127%" y="223.50"></text></g><g><title>all (593 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="593"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.17%)</title><rect x="99.8314%" y="437" width="0.1686%" height="15" fill="rgb(222,85,15)" fg:x="592" fg:w="1"/><text x="100.0814%" y="447.50"></text></g></svg></svg>