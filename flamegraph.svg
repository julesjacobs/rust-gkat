<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="182"><g><title>rust-gkat`&lt;rust_gkat::Args as clap_builder::derive::CommandFactory&gt;::command (1 samples, 0.55%)</title><rect x="0.0000%" y="309" width="0.5495%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.55%)</title><rect x="7.6923%" y="293" width="0.5495%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="1"/><text x="7.9423%" y="303.50"></text></g><g><title>rust-gkat`DYLD-STUB$$free (1 samples, 0.55%)</title><rect x="8.2418%" y="293" width="0.5495%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="1"/><text x="8.4918%" y="303.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="8.7912%" y="245" width="1.0989%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="2"/><text x="9.0412%" y="255.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 2.75%)</title><rect x="9.8901%" y="229" width="2.7473%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="5"/><text x="10.1401%" y="239.50">ru..</text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.10%)</title><rect x="11.5385%" y="213" width="1.0989%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="2"/><text x="11.7885%" y="223.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="12.6374%" y="229" width="0.5495%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="1"/><text x="12.8874%" y="239.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (9 samples, 4.95%)</title><rect x="8.7912%" y="277" width="4.9451%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="9"/><text x="9.0412%" y="287.50">rust-g..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 4.95%)</title><rect x="8.7912%" y="261" width="4.9451%" height="15" fill="rgb(218,30,26)" fg:x="16" fg:w="9"/><text x="9.0412%" y="271.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (7 samples, 3.85%)</title><rect x="9.8901%" y="245" width="3.8462%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="7"/><text x="10.1401%" y="255.50">rust..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="13.1868%" y="229" width="0.5495%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="1"/><text x="13.4368%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 2.20%)</title><rect x="14.2857%" y="213" width="2.1978%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="4"/><text x="14.5357%" y="223.50">r..</text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.55%)</title><rect x="15.9341%" y="197" width="0.5495%" height="15" fill="rgb(216,20,37)" fg:x="29" fg:w="1"/><text x="16.1841%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="16.4835%" y="213" width="0.5495%" height="15" fill="rgb(206,188,39)" fg:x="30" fg:w="1"/><text x="16.7335%" y="223.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (7 samples, 3.85%)</title><rect x="13.7363%" y="261" width="3.8462%" height="15" fill="rgb(217,207,13)" fg:x="25" fg:w="7"/><text x="13.9863%" y="271.50">rust..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 3.85%)</title><rect x="13.7363%" y="245" width="3.8462%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="7"/><text x="13.9863%" y="255.50">rust..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (6 samples, 3.30%)</title><rect x="14.2857%" y="229" width="3.2967%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="6"/><text x="14.5357%" y="239.50">rus..</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (1 samples, 0.55%)</title><rect x="17.0330%" y="213" width="0.5495%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="1"/><text x="17.2830%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.55%)</title><rect x="17.5824%" y="181" width="0.5495%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="1"/><text x="17.8324%" y="191.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (2 samples, 1.10%)</title><rect x="17.5824%" y="245" width="1.0989%" height="15" fill="rgb(226,26,5)" fg:x="32" fg:w="2"/><text x="17.8324%" y="255.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.10%)</title><rect x="17.5824%" y="229" width="1.0989%" height="15" fill="rgb(249,33,26)" fg:x="32" fg:w="2"/><text x="17.8324%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (2 samples, 1.10%)</title><rect x="17.5824%" y="213" width="1.0989%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="2"/><text x="17.8324%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="17.5824%" y="197" width="1.0989%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="2"/><text x="17.8324%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="18.1319%" y="181" width="0.5495%" height="15" fill="rgb(247,18,42)" fg:x="33" fg:w="1"/><text x="18.3819%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.55%)</title><rect x="18.6813%" y="229" width="0.5495%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="1"/><text x="18.9313%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="19.2308%" y="197" width="0.5495%" height="15" fill="rgb(249,31,29)" fg:x="35" fg:w="1"/><text x="19.4808%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 1.65%)</title><rect x="20.3297%" y="165" width="1.6484%" height="15" fill="rgb(225,111,53)" fg:x="37" fg:w="3"/><text x="20.5797%" y="175.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (9 samples, 4.95%)</title><rect x="19.2308%" y="229" width="4.9451%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="9"/><text x="19.4808%" y="239.50">rust-g..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 4.95%)</title><rect x="19.2308%" y="213" width="4.9451%" height="15" fill="rgb(214,148,48)" fg:x="35" fg:w="9"/><text x="19.4808%" y="223.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (8 samples, 4.40%)</title><rect x="19.7802%" y="197" width="4.3956%" height="15" fill="rgb(232,36,49)" fg:x="36" fg:w="8"/><text x="20.0302%" y="207.50">rust-..</text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (8 samples, 4.40%)</title><rect x="19.7802%" y="181" width="4.3956%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="8"/><text x="20.0302%" y="191.50">rust-..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (4 samples, 2.20%)</title><rect x="21.9780%" y="165" width="2.1978%" height="15" fill="rgb(229,88,8)" fg:x="40" fg:w="4"/><text x="22.2280%" y="175.50">r..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.55%)</title><rect x="24.7253%" y="213" width="0.5495%" height="15" fill="rgb(213,181,19)" fg:x="45" fg:w="1"/><text x="24.9753%" y="223.50"></text></g><g><title>rust-gkat`DYLD-STUB$$memcpy (1 samples, 0.55%)</title><rect x="25.2747%" y="213" width="0.5495%" height="15" fill="rgb(254,191,54)" fg:x="46" fg:w="1"/><text x="25.5247%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="25.8242%" y="181" width="0.5495%" height="15" fill="rgb(241,83,37)" fg:x="47" fg:w="1"/><text x="26.0742%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="25.8242%" y="165" width="0.5495%" height="15" fill="rgb(233,36,39)" fg:x="47" fg:w="1"/><text x="26.0742%" y="175.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.10%)</title><rect x="26.9231%" y="149" width="1.0989%" height="15" fill="rgb(226,3,54)" fg:x="49" fg:w="2"/><text x="27.1731%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 2.75%)</title><rect x="26.3736%" y="165" width="2.7473%" height="15" fill="rgb(245,192,40)" fg:x="48" fg:w="5"/><text x="26.6236%" y="175.50">ru..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 1.10%)</title><rect x="28.0220%" y="149" width="1.0989%" height="15" fill="rgb(238,167,29)" fg:x="51" fg:w="2"/><text x="28.2720%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (8 samples, 4.40%)</title><rect x="25.8242%" y="213" width="4.3956%" height="15" fill="rgb(232,182,51)" fg:x="47" fg:w="8"/><text x="26.0742%" y="223.50">rust-..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 4.40%)</title><rect x="25.8242%" y="197" width="4.3956%" height="15" fill="rgb(231,60,39)" fg:x="47" fg:w="8"/><text x="26.0742%" y="207.50">rust-..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (7 samples, 3.85%)</title><rect x="26.3736%" y="181" width="3.8462%" height="15" fill="rgb(208,69,12)" fg:x="48" fg:w="7"/><text x="26.6236%" y="191.50">rust..</text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 1.10%)</title><rect x="29.1209%" y="165" width="1.0989%" height="15" fill="rgb(235,93,37)" fg:x="53" fg:w="2"/><text x="29.3709%" y="175.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (1 samples, 0.55%)</title><rect x="30.7692%" y="165" width="0.5495%" height="15" fill="rgb(213,116,39)" fg:x="56" fg:w="1"/><text x="31.0192%" y="175.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 1.10%)</title><rect x="31.3187%" y="149" width="1.0989%" height="15" fill="rgb(222,207,29)" fg:x="57" fg:w="2"/><text x="31.5687%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (5 samples, 2.75%)</title><rect x="30.2198%" y="197" width="2.7473%" height="15" fill="rgb(206,96,30)" fg:x="55" fg:w="5"/><text x="30.4698%" y="207.50">ru..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 2.75%)</title><rect x="30.2198%" y="181" width="2.7473%" height="15" fill="rgb(218,138,4)" fg:x="55" fg:w="5"/><text x="30.4698%" y="191.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (3 samples, 1.65%)</title><rect x="31.3187%" y="165" width="1.6484%" height="15" fill="rgb(250,191,14)" fg:x="57" fg:w="3"/><text x="31.5687%" y="175.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (1 samples, 0.55%)</title><rect x="32.4176%" y="149" width="0.5495%" height="15" fill="rgb(239,60,40)" fg:x="59" fg:w="1"/><text x="32.6676%" y="159.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 1.10%)</title><rect x="32.9670%" y="181" width="1.0989%" height="15" fill="rgb(206,27,48)" fg:x="60" fg:w="2"/><text x="33.2170%" y="191.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (2 samples, 1.10%)</title><rect x="32.9670%" y="165" width="1.0989%" height="15" fill="rgb(225,35,8)" fg:x="60" fg:w="2"/><text x="33.2170%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.10%)</title><rect x="32.9670%" y="149" width="1.0989%" height="15" fill="rgb(250,213,24)" fg:x="60" fg:w="2"/><text x="33.2170%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.10%)</title><rect x="32.9670%" y="133" width="1.0989%" height="15" fill="rgb(247,123,22)" fg:x="60" fg:w="2"/><text x="33.2170%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 1.10%)</title><rect x="32.9670%" y="117" width="1.0989%" height="15" fill="rgb(231,138,38)" fg:x="60" fg:w="2"/><text x="33.2170%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.55%)</title><rect x="33.5165%" y="101" width="0.5495%" height="15" fill="rgb(231,145,46)" fg:x="61" fg:w="1"/><text x="33.7665%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.55%)</title><rect x="33.5165%" y="85" width="0.5495%" height="15" fill="rgb(251,118,11)" fg:x="61" fg:w="1"/><text x="33.7665%" y="95.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="34.0659%" y="149" width="0.5495%" height="15" fill="rgb(217,147,25)" fg:x="62" fg:w="1"/><text x="34.3159%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="34.6154%" y="133" width="1.0989%" height="15" fill="rgb(247,81,37)" fg:x="63" fg:w="2"/><text x="34.8654%" y="143.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.55%)</title><rect x="35.1648%" y="117" width="0.5495%" height="15" fill="rgb(209,12,38)" fg:x="64" fg:w="1"/><text x="35.4148%" y="127.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (5 samples, 2.75%)</title><rect x="34.0659%" y="181" width="2.7473%" height="15" fill="rgb(227,1,9)" fg:x="62" fg:w="5"/><text x="34.3159%" y="191.50">ru..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 2.75%)</title><rect x="34.0659%" y="165" width="2.7473%" height="15" fill="rgb(248,47,43)" fg:x="62" fg:w="5"/><text x="34.3159%" y="175.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (4 samples, 2.20%)</title><rect x="34.6154%" y="149" width="2.1978%" height="15" fill="rgb(221,10,30)" fg:x="63" fg:w="4"/><text x="34.8654%" y="159.50">r..</text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 1.10%)</title><rect x="35.7143%" y="133" width="1.0989%" height="15" fill="rgb(210,229,1)" fg:x="65" fg:w="2"/><text x="35.9643%" y="143.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.55%)</title><rect x="36.8132%" y="165" width="0.5495%" height="15" fill="rgb(222,148,37)" fg:x="67" fg:w="1"/><text x="37.0632%" y="175.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.55%)</title><rect x="36.8132%" y="149" width="0.5495%" height="15" fill="rgb(234,67,33)" fg:x="67" fg:w="1"/><text x="37.0632%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.55%)</title><rect x="36.8132%" y="133" width="0.5495%" height="15" fill="rgb(247,98,35)" fg:x="67" fg:w="1"/><text x="37.0632%" y="143.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (2 samples, 1.10%)</title><rect x="37.9121%" y="149" width="1.0989%" height="15" fill="rgb(247,138,52)" fg:x="69" fg:w="2"/><text x="38.1621%" y="159.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.10%)</title><rect x="37.9121%" y="133" width="1.0989%" height="15" fill="rgb(213,79,30)" fg:x="69" fg:w="2"/><text x="38.1621%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (1 samples, 0.55%)</title><rect x="38.4615%" y="117" width="0.5495%" height="15" fill="rgb(246,177,23)" fg:x="70" fg:w="1"/><text x="38.7115%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="38.4615%" y="101" width="0.5495%" height="15" fill="rgb(230,62,27)" fg:x="70" fg:w="1"/><text x="38.7115%" y="111.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="38.4615%" y="85" width="0.5495%" height="15" fill="rgb(216,154,8)" fg:x="70" fg:w="1"/><text x="38.7115%" y="95.50"></text></g><g><title>rust-gkat`alloc::vec::into_iter::IntoIter&lt;T,A&gt;::forget_allocation_drop_remaining (1 samples, 0.55%)</title><rect x="39.0110%" y="149" width="0.5495%" height="15" fill="rgb(244,35,45)" fg:x="71" fg:w="1"/><text x="39.2610%" y="159.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 1.10%)</title><rect x="39.5604%" y="133" width="1.0989%" height="15" fill="rgb(251,115,12)" fg:x="72" fg:w="2"/><text x="39.8104%" y="143.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.55%)</title><rect x="40.1099%" y="117" width="0.5495%" height="15" fill="rgb(240,54,50)" fg:x="73" fg:w="1"/><text x="40.3599%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.55%)</title><rect x="40.1099%" y="101" width="0.5495%" height="15" fill="rgb(233,84,52)" fg:x="73" fg:w="1"/><text x="40.3599%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.55%)</title><rect x="40.1099%" y="85" width="0.5495%" height="15" fill="rgb(207,117,47)" fg:x="73" fg:w="1"/><text x="40.3599%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.55%)</title><rect x="40.1099%" y="69" width="0.5495%" height="15" fill="rgb(249,43,39)" fg:x="73" fg:w="1"/><text x="40.3599%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.55%)</title><rect x="40.1099%" y="53" width="0.5495%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="1"/><text x="40.3599%" y="63.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (2 samples, 1.10%)</title><rect x="40.6593%" y="133" width="1.0989%" height="15" fill="rgb(236,212,23)" fg:x="74" fg:w="2"/><text x="40.9093%" y="143.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.10%)</title><rect x="40.6593%" y="117" width="1.0989%" height="15" fill="rgb(242,79,21)" fg:x="74" fg:w="2"/><text x="40.9093%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (1 samples, 0.55%)</title><rect x="41.2088%" y="101" width="0.5495%" height="15" fill="rgb(211,96,35)" fg:x="75" fg:w="1"/><text x="41.4588%" y="111.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="41.2088%" y="85" width="0.5495%" height="15" fill="rgb(253,215,40)" fg:x="75" fg:w="1"/><text x="41.4588%" y="95.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="41.2088%" y="69" width="0.5495%" height="15" fill="rgb(211,81,21)" fg:x="75" fg:w="1"/><text x="41.4588%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.55%)</title><rect x="42.3077%" y="117" width="0.5495%" height="15" fill="rgb(208,190,38)" fg:x="77" fg:w="1"/><text x="42.5577%" y="127.50"></text></g><g><title>rust-gkat`DYLD-STUB$$malloc (1 samples, 0.55%)</title><rect x="42.8571%" y="117" width="0.5495%" height="15" fill="rgb(235,213,38)" fg:x="78" fg:w="1"/><text x="43.1071%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.55%)</title><rect x="43.4066%" y="101" width="0.5495%" height="15" fill="rgb(237,122,38)" fg:x="79" fg:w="1"/><text x="43.6566%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (65 samples, 35.71%)</title><rect x="8.7912%" y="293" width="35.7143%" height="15" fill="rgb(244,218,35)" fg:x="16" fg:w="65"/><text x="9.0412%" y="303.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat:..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (56 samples, 30.77%)</title><rect x="13.7363%" y="277" width="30.7692%" height="15" fill="rgb(240,68,47)" fg:x="25" fg:w="56"/><text x="13.9863%" y="287.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl ru..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (49 samples, 26.92%)</title><rect x="17.5824%" y="261" width="26.9231%" height="15" fill="rgb(210,16,53)" fg:x="32" fg:w="49"/><text x="17.8324%" y="271.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (47 samples, 25.82%)</title><rect x="18.6813%" y="245" width="25.8242%" height="15" fill="rgb(235,124,12)" fg:x="34" fg:w="47"/><text x="18.9313%" y="255.50">rust-gkat`rust_gkat::kernel::derivative::..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (37 samples, 20.33%)</title><rect x="24.1758%" y="229" width="20.3297%" height="15" fill="rgb(224,169,11)" fg:x="44" fg:w="37"/><text x="24.4258%" y="239.50">rust-gkat`rust_gkat::kernel::der..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (26 samples, 14.29%)</title><rect x="30.2198%" y="213" width="14.2857%" height="15" fill="rgb(250,166,2)" fg:x="55" fg:w="26"/><text x="30.4698%" y="223.50">rust-gkat`rust_gkat::k..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (21 samples, 11.54%)</title><rect x="32.9670%" y="197" width="11.5385%" height="15" fill="rgb(242,216,29)" fg:x="60" fg:w="21"/><text x="33.2170%" y="207.50">rust-gkat`rust_gk..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (14 samples, 7.69%)</title><rect x="36.8132%" y="181" width="7.6923%" height="15" fill="rgb(230,116,27)" fg:x="67" fg:w="14"/><text x="37.0632%" y="191.50">rust-gkat`r..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (13 samples, 7.14%)</title><rect x="37.3626%" y="165" width="7.1429%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="13"/><text x="37.6126%" y="175.50">rust-gkat`..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (9 samples, 4.95%)</title><rect x="39.5604%" y="149" width="4.9451%" height="15" fill="rgb(253,11,6)" fg:x="72" fg:w="9"/><text x="39.8104%" y="159.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (5 samples, 2.75%)</title><rect x="41.7582%" y="133" width="2.7473%" height="15" fill="rgb(247,143,39)" fg:x="76" fg:w="5"/><text x="42.0082%" y="143.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (2 samples, 1.10%)</title><rect x="43.4066%" y="117" width="1.0989%" height="15" fill="rgb(236,97,10)" fg:x="79" fg:w="2"/><text x="43.6566%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (1 samples, 0.55%)</title><rect x="43.9560%" y="101" width="0.5495%" height="15" fill="rgb(233,208,19)" fg:x="80" fg:w="1"/><text x="44.2060%" y="111.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.55%)</title><rect x="43.9560%" y="85" width="0.5495%" height="15" fill="rgb(216,164,2)" fg:x="80" fg:w="1"/><text x="44.2060%" y="95.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.55%)</title><rect x="43.9560%" y="69" width="0.5495%" height="15" fill="rgb(220,129,5)" fg:x="80" fg:w="1"/><text x="44.2060%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.55%)</title><rect x="44.5055%" y="277" width="0.5495%" height="15" fill="rgb(242,17,10)" fg:x="81" fg:w="1"/><text x="44.7555%" y="287.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 2.75%)</title><rect x="45.0549%" y="277" width="2.7473%" height="15" fill="rgb(242,107,0)" fg:x="82" fg:w="5"/><text x="45.3049%" y="287.50">ru..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 1.10%)</title><rect x="46.7033%" y="261" width="1.0989%" height="15" fill="rgb(251,28,31)" fg:x="85" fg:w="2"/><text x="46.9533%" y="271.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="47.8022%" y="229" width="0.5495%" height="15" fill="rgb(233,223,10)" fg:x="87" fg:w="1"/><text x="48.0522%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.55%)</title><rect x="50.0000%" y="197" width="0.5495%" height="15" fill="rgb(215,21,27)" fg:x="91" fg:w="1"/><text x="50.2500%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 2.75%)</title><rect x="48.3516%" y="213" width="2.7473%" height="15" fill="rgb(232,23,21)" fg:x="88" fg:w="5"/><text x="48.6016%" y="223.50">ru..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="50.5495%" y="197" width="0.5495%" height="15" fill="rgb(244,5,23)" fg:x="92" fg:w="1"/><text x="50.7995%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (9 samples, 4.95%)</title><rect x="47.8022%" y="261" width="4.9451%" height="15" fill="rgb(226,81,46)" fg:x="87" fg:w="9"/><text x="48.0522%" y="271.50">rust-g..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 4.95%)</title><rect x="47.8022%" y="245" width="4.9451%" height="15" fill="rgb(247,70,30)" fg:x="87" fg:w="9"/><text x="48.0522%" y="255.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (8 samples, 4.40%)</title><rect x="48.3516%" y="229" width="4.3956%" height="15" fill="rgb(212,68,19)" fg:x="88" fg:w="8"/><text x="48.6016%" y="239.50">rust-..</text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 1.65%)</title><rect x="51.0989%" y="213" width="1.6484%" height="15" fill="rgb(240,187,13)" fg:x="93" fg:w="3"/><text x="51.3489%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 1.65%)</title><rect x="53.8462%" y="213" width="1.6484%" height="15" fill="rgb(223,113,26)" fg:x="98" fg:w="3"/><text x="54.0962%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 1.65%)</title><rect x="56.5934%" y="181" width="1.6484%" height="15" fill="rgb(206,192,2)" fg:x="103" fg:w="3"/><text x="56.8434%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (6 samples, 3.30%)</title><rect x="55.4945%" y="197" width="3.2967%" height="15" fill="rgb(241,108,4)" fg:x="101" fg:w="6"/><text x="55.7445%" y="207.50">rus..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="58.2418%" y="181" width="0.5495%" height="15" fill="rgb(247,173,49)" fg:x="106" fg:w="1"/><text x="58.4918%" y="191.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 1.65%)</title><rect x="58.7912%" y="197" width="1.6484%" height="15" fill="rgb(224,114,35)" fg:x="107" fg:w="3"/><text x="59.0412%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (15 samples, 8.24%)</title><rect x="52.7473%" y="245" width="8.2418%" height="15" fill="rgb(245,159,27)" fg:x="96" fg:w="15"/><text x="52.9973%" y="255.50">rust-gkat`a..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 8.24%)</title><rect x="52.7473%" y="229" width="8.2418%" height="15" fill="rgb(245,172,44)" fg:x="96" fg:w="15"/><text x="52.9973%" y="239.50">rust-gkat`&lt;..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (10 samples, 5.49%)</title><rect x="55.4945%" y="213" width="5.4945%" height="15" fill="rgb(236,23,11)" fg:x="101" fg:w="10"/><text x="55.7445%" y="223.50">rust-gk..</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (1 samples, 0.55%)</title><rect x="60.4396%" y="197" width="0.5495%" height="15" fill="rgb(205,117,38)" fg:x="110" fg:w="1"/><text x="60.6896%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 1.65%)</title><rect x="60.9890%" y="181" width="1.6484%" height="15" fill="rgb(237,72,25)" fg:x="111" fg:w="3"/><text x="61.2390%" y="191.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.10%)</title><rect x="61.5385%" y="165" width="1.0989%" height="15" fill="rgb(244,70,9)" fg:x="112" fg:w="2"/><text x="61.7885%" y="175.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="62.6374%" y="181" width="0.5495%" height="15" fill="rgb(217,125,39)" fg:x="114" fg:w="1"/><text x="62.8874%" y="191.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 2.75%)</title><rect x="60.9890%" y="213" width="2.7473%" height="15" fill="rgb(235,36,10)" fg:x="111" fg:w="5"/><text x="61.2390%" y="223.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (5 samples, 2.75%)</title><rect x="60.9890%" y="197" width="2.7473%" height="15" fill="rgb(251,123,47)" fg:x="111" fg:w="5"/><text x="61.2390%" y="207.50">ru..</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (1 samples, 0.55%)</title><rect x="63.1868%" y="181" width="0.5495%" height="15" fill="rgb(221,13,13)" fg:x="115" fg:w="1"/><text x="63.4368%" y="191.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (6 samples, 3.30%)</title><rect x="60.9890%" y="229" width="3.2967%" height="15" fill="rgb(238,131,9)" fg:x="111" fg:w="6"/><text x="61.2390%" y="239.50">rus..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (1 samples, 0.55%)</title><rect x="63.7363%" y="213" width="0.5495%" height="15" fill="rgb(211,50,8)" fg:x="116" fg:w="1"/><text x="63.9863%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="64.2857%" y="197" width="0.5495%" height="15" fill="rgb(245,182,24)" fg:x="117" fg:w="1"/><text x="64.5357%" y="207.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="64.8352%" y="181" width="0.5495%" height="15" fill="rgb(242,14,37)" fg:x="118" fg:w="1"/><text x="65.0852%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (6 samples, 3.30%)</title><rect x="65.3846%" y="165" width="3.2967%" height="15" fill="rgb(246,228,12)" fg:x="119" fg:w="6"/><text x="65.6346%" y="175.50">rus..</text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 1.65%)</title><rect x="67.0330%" y="149" width="1.6484%" height="15" fill="rgb(213,55,15)" fg:x="122" fg:w="3"/><text x="67.2830%" y="159.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="68.6813%" y="165" width="0.5495%" height="15" fill="rgb(209,9,3)" fg:x="125" fg:w="1"/><text x="68.9313%" y="175.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (10 samples, 5.49%)</title><rect x="64.2857%" y="213" width="5.4945%" height="15" fill="rgb(230,59,30)" fg:x="117" fg:w="10"/><text x="64.5357%" y="223.50">rust-gk..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 4.95%)</title><rect x="64.8352%" y="197" width="4.9451%" height="15" fill="rgb(209,121,21)" fg:x="118" fg:w="9"/><text x="65.0852%" y="207.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (8 samples, 4.40%)</title><rect x="65.3846%" y="181" width="4.3956%" height="15" fill="rgb(220,109,13)" fg:x="119" fg:w="8"/><text x="65.6346%" y="191.50">rust-..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="69.2308%" y="165" width="0.5495%" height="15" fill="rgb(232,18,1)" fg:x="126" fg:w="1"/><text x="69.4808%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 1.10%)</title><rect x="69.7802%" y="197" width="1.0989%" height="15" fill="rgb(215,41,42)" fg:x="127" fg:w="2"/><text x="70.0302%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 1.10%)</title><rect x="69.7802%" y="181" width="1.0989%" height="15" fill="rgb(224,123,36)" fg:x="127" fg:w="2"/><text x="70.0302%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.55%)</title><rect x="70.3297%" y="165" width="0.5495%" height="15" fill="rgb(240,125,3)" fg:x="128" fg:w="1"/><text x="70.5797%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="70.8791%" y="165" width="1.0989%" height="15" fill="rgb(205,98,50)" fg:x="129" fg:w="2"/><text x="71.1291%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="71.9780%" y="149" width="1.0989%" height="15" fill="rgb(205,185,37)" fg:x="131" fg:w="2"/><text x="72.2280%" y="159.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.55%)</title><rect x="72.5275%" y="133" width="0.5495%" height="15" fill="rgb(238,207,15)" fg:x="132" fg:w="1"/><text x="72.7775%" y="143.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 2.75%)</title><rect x="70.8791%" y="181" width="2.7473%" height="15" fill="rgb(213,199,42)" fg:x="129" fg:w="5"/><text x="71.1291%" y="191.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (3 samples, 1.65%)</title><rect x="71.9780%" y="165" width="1.6484%" height="15" fill="rgb(235,201,11)" fg:x="131" fg:w="3"/><text x="72.2280%" y="175.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="73.0769%" y="149" width="0.5495%" height="15" fill="rgb(207,46,11)" fg:x="133" fg:w="1"/><text x="73.3269%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (6 samples, 3.30%)</title><rect x="70.8791%" y="197" width="3.2967%" height="15" fill="rgb(241,35,35)" fg:x="129" fg:w="6"/><text x="71.1291%" y="207.50">rus..</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (1 samples, 0.55%)</title><rect x="73.6264%" y="181" width="0.5495%" height="15" fill="rgb(243,32,47)" fg:x="134" fg:w="1"/><text x="73.8764%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.55%)</title><rect x="74.1758%" y="181" width="0.5495%" height="15" fill="rgb(247,202,23)" fg:x="135" fg:w="1"/><text x="74.4258%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.55%)</title><rect x="74.1758%" y="165" width="0.5495%" height="15" fill="rgb(219,102,11)" fg:x="135" fg:w="1"/><text x="74.4258%" y="175.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.55%)</title><rect x="74.7253%" y="181" width="0.5495%" height="15" fill="rgb(243,110,44)" fg:x="136" fg:w="1"/><text x="74.9753%" y="191.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.55%)</title><rect x="74.7253%" y="165" width="0.5495%" height="15" fill="rgb(222,74,54)" fg:x="136" fg:w="1"/><text x="74.9753%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.55%)</title><rect x="74.7253%" y="149" width="0.5495%" height="15" fill="rgb(216,99,12)" fg:x="136" fg:w="1"/><text x="74.9753%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.55%)</title><rect x="74.7253%" y="133" width="0.5495%" height="15" fill="rgb(226,22,26)" fg:x="136" fg:w="1"/><text x="74.9753%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.55%)</title><rect x="74.7253%" y="117" width="0.5495%" height="15" fill="rgb(217,163,10)" fg:x="136" fg:w="1"/><text x="74.9753%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="75.2747%" y="149" width="0.5495%" height="15" fill="rgb(213,25,53)" fg:x="137" fg:w="1"/><text x="75.5247%" y="159.50"></text></g><g><title>rust-gkat`&lt;rsdd::builder::bdd::robdd::RobddBuilder&lt;T&gt; as rsdd::builder::bdd::builder::BddBuilder&gt;::ite_helper (1 samples, 0.55%)</title><rect x="75.8242%" y="149" width="0.5495%" height="15" fill="rgb(252,105,26)" fg:x="138" fg:w="1"/><text x="76.0742%" y="159.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 3.30%)</title><rect x="76.9231%" y="117" width="3.2967%" height="15" fill="rgb(220,39,43)" fg:x="140" fg:w="6"/><text x="77.1731%" y="127.50">rus..</text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (7 samples, 3.85%)</title><rect x="76.9231%" y="133" width="3.8462%" height="15" fill="rgb(229,68,48)" fg:x="140" fg:w="7"/><text x="77.1731%" y="143.50">rust..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="80.2198%" y="117" width="0.5495%" height="15" fill="rgb(252,8,32)" fg:x="146" fg:w="1"/><text x="80.4698%" y="127.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (12 samples, 6.59%)</title><rect x="75.2747%" y="181" width="6.5934%" height="15" fill="rgb(223,20,43)" fg:x="137" fg:w="12"/><text x="75.5247%" y="191.50">rust-gkat..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 6.59%)</title><rect x="75.2747%" y="165" width="6.5934%" height="15" fill="rgb(229,81,49)" fg:x="137" fg:w="12"/><text x="75.5247%" y="175.50">rust-gkat..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (10 samples, 5.49%)</title><rect x="76.3736%" y="149" width="5.4945%" height="15" fill="rgb(236,28,36)" fg:x="139" fg:w="10"/><text x="76.6236%" y="159.50">rust-gk..</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel::exp::Exp_&lt;rsdd::repr::bdd::BddPtr&gt;&gt; (2 samples, 1.10%)</title><rect x="80.7692%" y="133" width="1.0989%" height="15" fill="rgb(249,185,26)" fg:x="147" fg:w="2"/><text x="81.0192%" y="143.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.55%)</title><rect x="81.8681%" y="165" width="0.5495%" height="15" fill="rgb(249,174,33)" fg:x="149" fg:w="1"/><text x="82.1181%" y="175.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.55%)</title><rect x="81.8681%" y="149" width="0.5495%" height="15" fill="rgb(233,201,37)" fg:x="149" fg:w="1"/><text x="82.1181%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.55%)</title><rect x="81.8681%" y="133" width="0.5495%" height="15" fill="rgb(221,78,26)" fg:x="149" fg:w="1"/><text x="82.1181%" y="143.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="82.4176%" y="133" width="0.5495%" height="15" fill="rgb(250,127,30)" fg:x="150" fg:w="1"/><text x="82.6676%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="85.1648%" y="117" width="1.0989%" height="15" fill="rgb(230,49,44)" fg:x="155" fg:w="2"/><text x="85.4148%" y="127.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.10%)</title><rect x="85.1648%" y="101" width="1.0989%" height="15" fill="rgb(229,67,23)" fg:x="155" fg:w="2"/><text x="85.4148%" y="111.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (8 samples, 4.40%)</title><rect x="82.4176%" y="165" width="4.3956%" height="15" fill="rgb(249,83,47)" fg:x="150" fg:w="8"/><text x="82.6676%" y="175.50">rust-..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 4.40%)</title><rect x="82.4176%" y="149" width="4.3956%" height="15" fill="rgb(215,43,3)" fg:x="150" fg:w="8"/><text x="82.6676%" y="159.50">rust-..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (7 samples, 3.85%)</title><rect x="82.9670%" y="133" width="3.8462%" height="15" fill="rgb(238,154,13)" fg:x="151" fg:w="7"/><text x="83.2170%" y="143.50">rust..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="86.2637%" y="117" width="0.5495%" height="15" fill="rgb(219,56,2)" fg:x="157" fg:w="1"/><text x="86.5137%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.55%)</title><rect x="86.8132%" y="149" width="0.5495%" height="15" fill="rgb(233,0,4)" fg:x="158" fg:w="1"/><text x="87.0632%" y="159.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 1.65%)</title><rect x="87.3626%" y="149" width="1.6484%" height="15" fill="rgb(235,30,7)" fg:x="159" fg:w="3"/><text x="87.6126%" y="159.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (2 samples, 1.10%)</title><rect x="87.9121%" y="133" width="1.0989%" height="15" fill="rgb(250,79,13)" fg:x="160" fg:w="2"/><text x="88.1621%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.10%)</title><rect x="87.9121%" y="117" width="1.0989%" height="15" fill="rgb(211,146,34)" fg:x="160" fg:w="2"/><text x="88.1621%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.10%)</title><rect x="87.9121%" y="101" width="1.0989%" height="15" fill="rgb(228,22,38)" fg:x="160" fg:w="2"/><text x="88.1621%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.55%)</title><rect x="88.4615%" y="85" width="0.5495%" height="15" fill="rgb(235,168,5)" fg:x="161" fg:w="1"/><text x="88.7115%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.55%)</title><rect x="88.4615%" y="69" width="0.5495%" height="15" fill="rgb(221,155,16)" fg:x="161" fg:w="1"/><text x="88.7115%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.55%)</title><rect x="88.4615%" y="53" width="0.5495%" height="15" fill="rgb(215,215,53)" fg:x="161" fg:w="1"/><text x="88.7115%" y="63.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.55%)</title><rect x="89.0110%" y="117" width="0.5495%" height="15" fill="rgb(223,4,10)" fg:x="162" fg:w="1"/><text x="89.2610%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="90.1099%" y="101" width="0.5495%" height="15" fill="rgb(234,103,6)" fg:x="164" fg:w="1"/><text x="90.3599%" y="111.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="90.1099%" y="85" width="0.5495%" height="15" fill="rgb(227,97,0)" fg:x="164" fg:w="1"/><text x="90.3599%" y="95.50"></text></g><g><title>rust-gkat`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 1.10%)</title><rect x="90.6593%" y="101" width="1.0989%" height="15" fill="rgb(234,150,53)" fg:x="165" fg:w="2"/><text x="90.9093%" y="111.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (6 samples, 3.30%)</title><rect x="89.0110%" y="149" width="3.2967%" height="15" fill="rgb(228,201,54)" fg:x="162" fg:w="6"/><text x="89.2610%" y="159.50">rus..</text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 3.30%)</title><rect x="89.0110%" y="133" width="3.2967%" height="15" fill="rgb(222,22,37)" fg:x="162" fg:w="6"/><text x="89.2610%" y="143.50">rus..</text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (5 samples, 2.75%)</title><rect x="89.5604%" y="117" width="2.7473%" height="15" fill="rgb(237,53,32)" fg:x="163" fg:w="5"/><text x="89.8104%" y="127.50">ru..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="91.7582%" y="101" width="0.5495%" height="15" fill="rgb(233,25,53)" fg:x="167" fg:w="1"/><text x="92.0082%" y="111.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="92.3077%" y="133" width="0.5495%" height="15" fill="rgb(210,40,34)" fg:x="168" fg:w="1"/><text x="92.5577%" y="143.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="92.3077%" y="117" width="0.5495%" height="15" fill="rgb(241,220,44)" fg:x="168" fg:w="1"/><text x="92.5577%" y="127.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="92.8571%" y="85" width="0.5495%" height="15" fill="rgb(235,28,35)" fg:x="169" fg:w="1"/><text x="93.1071%" y="95.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (2 samples, 1.10%)</title><rect x="92.8571%" y="133" width="1.0989%" height="15" fill="rgb(210,56,17)" fg:x="169" fg:w="2"/><text x="93.1071%" y="143.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 1.10%)</title><rect x="92.8571%" y="117" width="1.0989%" height="15" fill="rgb(224,130,29)" fg:x="169" fg:w="2"/><text x="93.1071%" y="127.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (2 samples, 1.10%)</title><rect x="92.8571%" y="101" width="1.0989%" height="15" fill="rgb(235,212,8)" fg:x="169" fg:w="2"/><text x="93.1071%" y="111.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.55%)</title><rect x="93.4066%" y="85" width="0.5495%" height="15" fill="rgb(223,33,50)" fg:x="170" fg:w="1"/><text x="93.6566%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.55%)</title><rect x="93.9560%" y="117" width="0.5495%" height="15" fill="rgb(219,149,13)" fg:x="171" fg:w="1"/><text x="94.2060%" y="127.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.55%)</title><rect x="94.5055%" y="117" width="0.5495%" height="15" fill="rgb(250,156,29)" fg:x="172" fg:w="1"/><text x="94.7555%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.55%)</title><rect x="94.5055%" y="101" width="0.5495%" height="15" fill="rgb(216,193,19)" fg:x="172" fg:w="1"/><text x="94.7555%" y="111.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.55%)</title><rect x="95.0549%" y="117" width="0.5495%" height="15" fill="rgb(216,135,14)" fg:x="173" fg:w="1"/><text x="95.3049%" y="127.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.55%)</title><rect x="95.0549%" y="101" width="0.5495%" height="15" fill="rgb(241,47,5)" fg:x="173" fg:w="1"/><text x="95.3049%" y="111.50"></text></g><g><title>rust-gkat`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.55%)</title><rect x="95.6044%" y="101" width="0.5495%" height="15" fill="rgb(233,42,35)" fg:x="174" fg:w="1"/><text x="95.8544%" y="111.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.55%)</title><rect x="96.1538%" y="69" width="0.5495%" height="15" fill="rgb(231,13,6)" fg:x="175" fg:w="1"/><text x="96.4038%" y="79.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (3 samples, 1.65%)</title><rect x="96.1538%" y="101" width="1.6484%" height="15" fill="rgb(207,181,40)" fg:x="175" fg:w="3"/><text x="96.4038%" y="111.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 1.65%)</title><rect x="96.1538%" y="85" width="1.6484%" height="15" fill="rgb(254,173,49)" fg:x="175" fg:w="3"/><text x="96.4038%" y="95.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::exp::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::mk_seq (2 samples, 1.10%)</title><rect x="96.7033%" y="69" width="1.0989%" height="15" fill="rgb(221,1,38)" fg:x="176" fg:w="2"/><text x="96.9533%" y="79.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 1.10%)</title><rect x="96.7033%" y="53" width="1.0989%" height="15" fill="rgb(206,124,46)" fg:x="176" fg:w="2"/><text x="96.9533%" y="63.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 1.10%)</title><rect x="96.7033%" y="37" width="1.0989%" height="15" fill="rgb(249,21,11)" fg:x="176" fg:w="2"/><text x="96.9533%" y="47.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (31 samples, 17.03%)</title><rect x="81.8681%" y="181" width="17.0330%" height="15" fill="rgb(222,201,40)" fg:x="149" fg:w="31"/><text x="82.1181%" y="191.50">rust-gkat`rust_gkat::kerne..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (22 samples, 12.09%)</title><rect x="86.8132%" y="165" width="12.0879%" height="15" fill="rgb(235,61,29)" fg:x="158" fg:w="22"/><text x="87.0632%" y="175.50">rust-gkat`rust_gka..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (12 samples, 6.59%)</title><rect x="92.3077%" y="149" width="6.5934%" height="15" fill="rgb(219,207,3)" fg:x="168" fg:w="12"/><text x="92.5577%" y="159.50">rust-gkat..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (9 samples, 4.95%)</title><rect x="93.9560%" y="133" width="4.9451%" height="15" fill="rgb(222,56,46)" fg:x="171" fg:w="9"/><text x="94.2060%" y="143.50">rust-g..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (6 samples, 3.30%)</title><rect x="95.6044%" y="117" width="3.2967%" height="15" fill="rgb(239,76,54)" fg:x="174" fg:w="6"/><text x="95.8544%" y="127.50">rus..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (2 samples, 1.10%)</title><rect x="97.8022%" y="101" width="1.0989%" height="15" fill="rgb(231,124,27)" fg:x="178" fg:w="2"/><text x="98.0522%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.55%)</title><rect x="98.3516%" y="85" width="0.5495%" height="15" fill="rgb(249,195,6)" fg:x="179" fg:w="1"/><text x="98.6016%" y="95.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::equiv_iter::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::equiv_iter (180 samples, 98.90%)</title><rect x="0.5495%" y="309" width="98.9011%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="180"/><text x="0.7995%" y="319.50">rust-gkat`rust_gkat::kernel::equiv_iter::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::equiv_iter</text></g><g><title>rust-gkat`rust_gkat::kernel::search::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::reject (100 samples, 54.95%)</title><rect x="44.5055%" y="293" width="54.9451%" height="15" fill="rgb(206,201,31)" fg:x="81" fg:w="100"/><text x="44.7555%" y="303.50">rust-gkat`rust_gkat::kernel::search::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Bui..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (94 samples, 51.65%)</title><rect x="47.8022%" y="277" width="51.6484%" height="15" fill="rgb(231,57,52)" fg:x="87" fg:w="94"/><text x="48.0522%" y="287.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManag..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (85 samples, 46.70%)</title><rect x="52.7473%" y="261" width="46.7033%" height="15" fill="rgb(248,177,22)" fg:x="96" fg:w="85"/><text x="52.9973%" y="271.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::G..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (70 samples, 38.46%)</title><rect x="60.9890%" y="245" width="38.4615%" height="15" fill="rgb(215,211,37)" fg:x="111" fg:w="70"/><text x="61.2390%" y="255.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kern..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (64 samples, 35.16%)</title><rect x="64.2857%" y="229" width="35.1648%" height="15" fill="rgb(241,128,51)" fg:x="117" fg:w="64"/><text x="64.5357%" y="239.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (54 samples, 29.67%)</title><rect x="69.7802%" y="213" width="29.6703%" height="15" fill="rgb(227,165,31)" fg:x="127" fg:w="54"/><text x="70.0302%" y="223.50">rust-gkat`rust_gkat::kernel::derivative::_&lt;impl ..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::derivative (46 samples, 25.27%)</title><rect x="74.1758%" y="197" width="25.2747%" height="15" fill="rgb(228,167,24)" fg:x="135" fg:w="46"/><text x="74.4258%" y="207.50">rust-gkat`rust_gkat::kernel::derivative:..</text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::epsilon (1 samples, 0.55%)</title><rect x="98.9011%" y="181" width="0.5495%" height="15" fill="rgb(228,143,12)" fg:x="180" fg:w="1"/><text x="99.1511%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::kernel::derivative::_&lt;impl rust_gkat::kernel::manager::GkatManager&lt;Ptr,Builder&gt;&gt;::epsilon (1 samples, 0.55%)</title><rect x="98.9011%" y="165" width="0.5495%" height="15" fill="rgb(249,149,8)" fg:x="180" fg:w="1"/><text x="99.1511%" y="175.50"></text></g><g><title>all (182 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="182"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`start (182 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="182"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>rust-gkat`main (182 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="182"/><text x="0.2500%" y="399.50">rust-gkat`main</text></g><g><title>rust-gkat`std::rt::lang_start_internal (182 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="182"/><text x="0.2500%" y="383.50">rust-gkat`std::rt::lang_start_internal</text></g><g><title>rust-gkat`std::rt::lang_start::_{{closure}} (182 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="182"/><text x="0.2500%" y="367.50">rust-gkat`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-gkat`std::sys::backtrace::__rust_begin_short_backtrace (182 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="182"/><text x="0.2500%" y="351.50">rust-gkat`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-gkat`rust_gkat::main (182 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="182"/><text x="0.2500%" y="335.50">rust-gkat`rust_gkat::main</text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__parse__Input::InputParser::parse (1 samples, 0.55%)</title><rect x="99.4505%" y="309" width="0.5495%" height="15" fill="rgb(220,193,23)" fg:x="181" fg:w="1"/><text x="99.7005%" y="319.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;lalrpop_util::state_machine::Parser&lt;rust_gkat::parsing::parser::spec::__parse__Input::__StateMachine,lalrpop_util::lexer::Matcher&lt;&amp;str&gt;&gt;&gt; (1 samples, 0.55%)</title><rect x="99.4505%" y="293" width="0.5495%" height="15" fill="rgb(230,90,52)" fg:x="181" fg:w="1"/><text x="99.7005%" y="303.50"></text></g><g><title>rust-gkat`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.55%)</title><rect x="99.4505%" y="277" width="0.5495%" height="15" fill="rgb(252,106,19)" fg:x="181" fg:w="1"/><text x="99.7005%" y="287.50"></text></g></svg></svg>