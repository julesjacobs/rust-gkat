<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="3042"><g><title>libsystem_c.dylib`exit (3 samples, 0.10%)</title><rect x="0.0000%" y="613" width="0.0986%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (3 samples, 0.10%)</title><rect x="0.0000%" y="597" width="0.0986%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="607.50"></text></g><g><title>rust-gkat`mi_process_done (3 samples, 0.10%)</title><rect x="0.0000%" y="581" width="0.0986%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="591.50"></text></g><g><title>rust-gkat`mi_arenas_try_purge (3 samples, 0.10%)</title><rect x="0.0000%" y="565" width="0.0986%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="575.50"></text></g><g><title>rust-gkat`mi_arena_purge (3 samples, 0.10%)</title><rect x="0.0000%" y="549" width="0.0986%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.10%)</title><rect x="0.0000%" y="533" width="0.0986%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="543.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (4 samples, 0.13%)</title><rect x="0.0000%" y="629" width="0.1315%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="0.0986%" y="613" width="0.0329%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.3486%" y="623.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;(rust_gkat::syntax::exp::Exp_,hashconsing::WHConsed&lt;rust_gkat::syntax::exp::Exp_&gt;)&gt; (1 samples, 0.03%)</title><rect x="0.1315%" y="565" width="0.0329%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.3815%" y="575.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (1 samples, 0.03%)</title><rect x="0.2301%" y="549" width="0.0329%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="0.4801%" y="559.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (4 samples, 0.13%)</title><rect x="0.2630%" y="549" width="0.1315%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="4"/><text x="0.5130%" y="559.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="0.3945%" y="549" width="0.0329%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="0.6445%" y="559.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="0.4274%" y="549" width="0.0329%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1"/><text x="0.6774%" y="559.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;(hashconsing::HConsed&lt;rust_gkat::syntax::exp::Exp_&gt;,alloc::vec::Vec&lt;(rust_gkat::syntax::bexp::BExp,hashconsing::HConsed&lt;rust_gkat::syntax::exp::Exp_&gt;,u64)&gt;)&gt; (7 samples, 0.23%)</title><rect x="0.4602%" y="549" width="0.2301%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="7"/><text x="0.7102%" y="559.50"></text></g><g><title>rust-gkat`_mi_page_retire (1 samples, 0.03%)</title><rect x="6.0487%" y="325" width="0.0329%" height="15" fill="rgb(217,207,13)" fg:x="184" fg:w="1"/><text x="6.2987%" y="335.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="6.1473%" y="277" width="0.0329%" height="15" fill="rgb(231,73,38)" fg:x="187" fg:w="1"/><text x="6.3973%" y="287.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.16%)</title><rect x="6.0815%" y="309" width="0.1644%" height="15" fill="rgb(225,20,46)" fg:x="185" fg:w="5"/><text x="6.3315%" y="319.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.16%)</title><rect x="6.0815%" y="293" width="0.1644%" height="15" fill="rgb(210,31,41)" fg:x="185" fg:w="5"/><text x="6.3315%" y="303.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.07%)</title><rect x="6.1801%" y="277" width="0.0657%" height="15" fill="rgb(221,200,47)" fg:x="188" fg:w="2"/><text x="6.4301%" y="287.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (46 samples, 1.51%)</title><rect x="4.7666%" y="437" width="1.5122%" height="15" fill="rgb(226,26,5)" fg:x="145" fg:w="46"/><text x="5.0166%" y="447.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (32 samples, 1.05%)</title><rect x="5.2268%" y="421" width="1.0519%" height="15" fill="rgb(249,33,26)" fg:x="159" fg:w="32"/><text x="5.4768%" y="431.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (21 samples, 0.69%)</title><rect x="5.5884%" y="405" width="0.6903%" height="15" fill="rgb(235,183,28)" fg:x="170" fg:w="21"/><text x="5.8384%" y="415.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (13 samples, 0.43%)</title><rect x="5.8514%" y="389" width="0.4274%" height="15" fill="rgb(221,5,38)" fg:x="178" fg:w="13"/><text x="6.1014%" y="399.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (11 samples, 0.36%)</title><rect x="5.9172%" y="373" width="0.3616%" height="15" fill="rgb(247,18,42)" fg:x="180" fg:w="11"/><text x="6.1672%" y="383.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.33%)</title><rect x="5.9500%" y="357" width="0.3287%" height="15" fill="rgb(241,131,45)" fg:x="181" fg:w="10"/><text x="6.2000%" y="367.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.26%)</title><rect x="6.0158%" y="341" width="0.2630%" height="15" fill="rgb(249,31,29)" fg:x="183" fg:w="8"/><text x="6.2658%" y="351.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.20%)</title><rect x="6.0815%" y="325" width="0.1972%" height="15" fill="rgb(225,111,53)" fg:x="185" fg:w="6"/><text x="6.3315%" y="335.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="6.2459%" y="309" width="0.0329%" height="15" fill="rgb(238,160,17)" fg:x="190" fg:w="1"/><text x="6.4959%" y="319.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (73 samples, 2.40%)</title><rect x="3.9119%" y="469" width="2.3997%" height="15" fill="rgb(214,148,48)" fg:x="119" fg:w="73"/><text x="4.1619%" y="479.50">ru..</text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (62 samples, 2.04%)</title><rect x="4.2735%" y="453" width="2.0381%" height="15" fill="rgb(232,36,49)" fg:x="130" fg:w="62"/><text x="4.5235%" y="463.50">r..</text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="6.2788%" y="437" width="0.0329%" height="15" fill="rgb(209,103,24)" fg:x="191" fg:w="1"/><text x="6.5288%" y="447.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (103 samples, 3.39%)</title><rect x="2.9586%" y="501" width="3.3859%" height="15" fill="rgb(229,88,8)" fg:x="90" fg:w="103"/><text x="3.2086%" y="511.50">rus..</text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (88 samples, 2.89%)</title><rect x="3.4517%" y="485" width="2.8928%" height="15" fill="rgb(213,181,19)" fg:x="105" fg:w="88"/><text x="3.7017%" y="495.50">ru..</text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="6.3116%" y="469" width="0.0329%" height="15" fill="rgb(254,191,54)" fg:x="192" fg:w="1"/><text x="6.5616%" y="479.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (131 samples, 4.31%)</title><rect x="2.1368%" y="533" width="4.3064%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="131"/><text x="2.3868%" y="543.50">rust-..</text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (117 samples, 3.85%)</title><rect x="2.5970%" y="517" width="3.8462%" height="15" fill="rgb(233,36,39)" fg:x="79" fg:w="117"/><text x="2.8470%" y="527.50">rust..</text></g><g><title>rust-gkat`mi_free (3 samples, 0.10%)</title><rect x="6.3445%" y="501" width="0.0986%" height="15" fill="rgb(226,3,54)" fg:x="193" fg:w="3"/><text x="6.5945%" y="511.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;(rust_gkat::syntax::exp::Exp_,hashconsing::WHConsed&lt;rust_gkat::syntax::exp::Exp_&gt;)&gt; (176 samples, 5.79%)</title><rect x="0.6903%" y="549" width="5.7857%" height="15" fill="rgb(245,192,40)" fg:x="21" fg:w="176"/><text x="0.9403%" y="559.50">rust-gk..</text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="6.4431%" y="533" width="0.0329%" height="15" fill="rgb(238,167,29)" fg:x="196" fg:w="1"/><text x="6.6931%" y="543.50"></text></g><g><title>rust-gkat`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.43%)</title><rect x="6.6732%" y="533" width="0.4274%" height="15" fill="rgb(232,182,51)" fg:x="203" fg:w="13"/><text x="6.9232%" y="543.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;disjoint_sets::tree::UnionFindNode&gt; (1 samples, 0.03%)</title><rect x="7.0677%" y="517" width="0.0329%" height="15" fill="rgb(231,60,39)" fg:x="215" fg:w="1"/><text x="7.3177%" y="527.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (39 samples, 1.28%)</title><rect x="7.1006%" y="533" width="1.2821%" height="15" fill="rgb(208,69,12)" fg:x="216" fg:w="39"/><text x="7.3506%" y="543.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;(hashconsing::HConsed&lt;rust_gkat::syntax::exp::Exp_&gt;,alloc::vec::Vec&lt;(rust_gkat::syntax::bexp::BExp,hashconsing::HConsed&lt;rust_gkat::syntax::exp::Exp_&gt;,u64)&gt;)&gt; (62 samples, 2.04%)</title><rect x="8.3826%" y="533" width="2.0381%" height="15" fill="rgb(235,93,37)" fg:x="255" fg:w="62"/><text x="8.6326%" y="543.50">r..</text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.07%)</title><rect x="10.3550%" y="517" width="0.0657%" height="15" fill="rgb(213,116,39)" fg:x="315" fg:w="2"/><text x="10.6050%" y="527.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::kernel1::solver::Solver&gt; (122 samples, 4.01%)</title><rect x="6.4760%" y="549" width="4.0105%" height="15" fill="rgb(222,207,29)" fg:x="197" fg:w="122"/><text x="6.7260%" y="559.50">rust..</text></g><g><title>rust-gkat`mi_segment_free (2 samples, 0.07%)</title><rect x="10.4208%" y="533" width="0.0657%" height="15" fill="rgb(206,96,30)" fg:x="317" fg:w="2"/><text x="10.6708%" y="543.50"></text></g><g><title>rust-gkat`_mi_arena_free (2 samples, 0.07%)</title><rect x="10.4208%" y="517" width="0.0657%" height="15" fill="rgb(218,138,4)" fg:x="317" fg:w="2"/><text x="10.6708%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (2 samples, 0.07%)</title><rect x="10.4208%" y="501" width="0.0657%" height="15" fill="rgb(250,191,14)" fg:x="317" fg:w="2"/><text x="10.6708%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="10.4865%" y="533" width="0.0329%" height="15" fill="rgb(239,60,40)" fg:x="319" fg:w="1"/><text x="10.7365%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="10.4865%" y="517" width="0.0329%" height="15" fill="rgb(206,27,48)" fg:x="319" fg:w="1"/><text x="10.7365%" y="527.50"></text></g><g><title>rust-gkat`cuddFreeTable (2 samples, 0.07%)</title><rect x="10.4865%" y="549" width="0.0657%" height="15" fill="rgb(225,35,8)" fg:x="319" fg:w="2"/><text x="10.7365%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="10.5194%" y="533" width="0.0329%" height="15" fill="rgb(250,213,24)" fg:x="320" fg:w="1"/><text x="10.7694%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="10.5194%" y="517" width="0.0329%" height="15" fill="rgb(247,123,22)" fg:x="320" fg:w="1"/><text x="10.7694%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="10.5194%" y="501" width="0.0329%" height="15" fill="rgb(231,138,38)" fg:x="320" fg:w="1"/><text x="10.7694%" y="511.50"></text></g><g><title>rust-gkat`mi_free (12 samples, 0.39%)</title><rect x="10.5523%" y="549" width="0.3945%" height="15" fill="rgb(231,145,46)" fg:x="321" fg:w="12"/><text x="10.8023%" y="559.50"></text></g><g><title>rust-gkat`mi_segment_free (6 samples, 0.20%)</title><rect x="10.9467%" y="549" width="0.1972%" height="15" fill="rgb(251,118,11)" fg:x="333" fg:w="6"/><text x="11.1967%" y="559.50"></text></g><g><title>rust-gkat`_mi_arena_free (6 samples, 0.20%)</title><rect x="10.9467%" y="533" width="0.1972%" height="15" fill="rgb(217,147,25)" fg:x="333" fg:w="6"/><text x="11.1967%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (6 samples, 0.20%)</title><rect x="10.9467%" y="517" width="0.1972%" height="15" fill="rgb(247,81,37)" fg:x="333" fg:w="6"/><text x="11.1967%" y="527.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="11.1440%" y="549" width="0.0329%" height="15" fill="rgb(209,12,38)" fg:x="339" fg:w="1"/><text x="11.3940%" y="559.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (14 samples, 0.46%)</title><rect x="11.2097%" y="533" width="0.4602%" height="15" fill="rgb(227,1,9)" fg:x="341" fg:w="14"/><text x="11.4597%" y="543.50"></text></g><g><title>rust-gkat`Cudd_Ref (3 samples, 0.10%)</title><rect x="11.6700%" y="533" width="0.0986%" height="15" fill="rgb(248,47,43)" fg:x="355" fg:w="3"/><text x="11.9200%" y="543.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="17.9816%" y="117" width="0.0329%" height="15" fill="rgb(221,10,30)" fg:x="547" fg:w="1"/><text x="18.2316%" y="127.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="17.9816%" y="101" width="0.0329%" height="15" fill="rgb(210,229,1)" fg:x="547" fg:w="1"/><text x="18.2316%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="17.9816%" y="133" width="0.0986%" height="15" fill="rgb(222,148,37)" fg:x="547" fg:w="3"/><text x="18.2316%" y="143.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="18.0145%" y="117" width="0.0657%" height="15" fill="rgb(234,67,33)" fg:x="548" fg:w="2"/><text x="18.2645%" y="127.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="18.0802%" y="133" width="0.0657%" height="15" fill="rgb(247,98,35)" fg:x="550" fg:w="2"/><text x="18.3302%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (12 samples, 0.39%)</title><rect x="17.9487%" y="149" width="0.3945%" height="15" fill="rgb(247,138,52)" fg:x="546" fg:w="12"/><text x="18.1987%" y="159.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (6 samples, 0.20%)</title><rect x="18.1460%" y="133" width="0.1972%" height="15" fill="rgb(213,79,30)" fg:x="552" fg:w="6"/><text x="18.3960%" y="143.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="18.3432%" y="149" width="0.0329%" height="15" fill="rgb(246,177,23)" fg:x="558" fg:w="1"/><text x="18.5932%" y="159.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (4 samples, 0.13%)</title><rect x="18.3761%" y="149" width="0.1315%" height="15" fill="rgb(230,62,27)" fg:x="559" fg:w="4"/><text x="18.6261%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (24 samples, 0.79%)</title><rect x="17.7515%" y="165" width="0.7890%" height="15" fill="rgb(216,154,8)" fg:x="540" fg:w="24"/><text x="18.0015%" y="175.50"></text></g><g><title>rust-gkat`util_cpu_time (1 samples, 0.03%)</title><rect x="18.5076%" y="149" width="0.0329%" height="15" fill="rgb(244,35,45)" fg:x="563" fg:w="1"/><text x="18.7576%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1 samples, 0.03%)</title><rect x="18.5076%" y="133" width="0.0329%" height="15" fill="rgb(251,115,12)" fg:x="563" fg:w="1"/><text x="18.7576%" y="143.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="18.5404%" y="165" width="0.0329%" height="15" fill="rgb(240,54,50)" fg:x="564" fg:w="1"/><text x="18.7904%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (40 samples, 1.31%)</title><rect x="17.4885%" y="181" width="1.3149%" height="15" fill="rgb(233,84,52)" fg:x="532" fg:w="40"/><text x="17.7385%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (7 samples, 0.23%)</title><rect x="18.5733%" y="165" width="0.2301%" height="15" fill="rgb(207,117,47)" fg:x="565" fg:w="7"/><text x="18.8233%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (49 samples, 1.61%)</title><rect x="17.2913%" y="197" width="1.6108%" height="15" fill="rgb(249,43,39)" fg:x="526" fg:w="49"/><text x="17.5413%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (3 samples, 0.10%)</title><rect x="18.8034%" y="181" width="0.0986%" height="15" fill="rgb(209,38,44)" fg:x="572" fg:w="3"/><text x="19.0534%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="18.9020%" y="197" width="0.0329%" height="15" fill="rgb(236,212,23)" fg:x="575" fg:w="1"/><text x="19.1520%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (65 samples, 2.14%)</title><rect x="17.0611%" y="213" width="2.1368%" height="15" fill="rgb(242,79,21)" fg:x="519" fg:w="65"/><text x="17.3111%" y="223.50">r..</text></g><g><title>rust-gkat`cuddCacheLookup2 (8 samples, 0.26%)</title><rect x="18.9349%" y="197" width="0.2630%" height="15" fill="rgb(211,96,35)" fg:x="576" fg:w="8"/><text x="19.1849%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="19.1979%" y="213" width="0.0657%" height="15" fill="rgb(253,215,40)" fg:x="584" fg:w="2"/><text x="19.4479%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (84 samples, 2.76%)</title><rect x="16.7982%" y="229" width="2.7613%" height="15" fill="rgb(211,81,21)" fg:x="511" fg:w="84"/><text x="17.0482%" y="239.50">ru..</text></g><g><title>rust-gkat`cuddCacheLookup2 (9 samples, 0.30%)</title><rect x="19.2636%" y="213" width="0.2959%" height="15" fill="rgb(208,190,38)" fg:x="586" fg:w="9"/><text x="19.5136%" y="223.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="19.5595%" y="229" width="0.0329%" height="15" fill="rgb(235,213,38)" fg:x="595" fg:w="1"/><text x="19.8095%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (104 samples, 3.42%)</title><rect x="16.4366%" y="245" width="3.4188%" height="15" fill="rgb(237,122,38)" fg:x="500" fg:w="104"/><text x="16.6866%" y="255.50">rus..</text></g><g><title>rust-gkat`cuddCacheLookup2 (8 samples, 0.26%)</title><rect x="19.5924%" y="229" width="0.2630%" height="15" fill="rgb(244,218,35)" fg:x="596" fg:w="8"/><text x="19.8424%" y="239.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (8 samples, 0.26%)</title><rect x="19.8554%" y="245" width="0.2630%" height="15" fill="rgb(240,68,47)" fg:x="604" fg:w="8"/><text x="20.1054%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (141 samples, 4.64%)</title><rect x="15.9435%" y="261" width="4.6351%" height="15" fill="rgb(210,16,53)" fg:x="485" fg:w="141"/><text x="16.1935%" y="271.50">rust-..</text></g><g><title>rust-gkat`cuddCacheLookup2 (14 samples, 0.46%)</title><rect x="20.1183%" y="245" width="0.4602%" height="15" fill="rgb(235,124,12)" fg:x="612" fg:w="14"/><text x="20.3683%" y="255.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="20.5786%" y="261" width="0.0657%" height="15" fill="rgb(224,169,11)" fg:x="626" fg:w="2"/><text x="20.8286%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (161 samples, 5.29%)</title><rect x="15.6805%" y="277" width="5.2926%" height="15" fill="rgb(250,166,2)" fg:x="477" fg:w="161"/><text x="15.9305%" y="287.50">rust-g..</text></g><g><title>rust-gkat`cuddCacheLookup2 (10 samples, 0.33%)</title><rect x="20.6443%" y="261" width="0.3287%" height="15" fill="rgb(242,216,29)" fg:x="628" fg:w="10"/><text x="20.8943%" y="271.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="20.9730%" y="277" width="0.0657%" height="15" fill="rgb(230,116,27)" fg:x="638" fg:w="2"/><text x="21.2230%" y="287.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (11 samples, 0.36%)</title><rect x="21.0388%" y="277" width="0.3616%" height="15" fill="rgb(228,99,48)" fg:x="640" fg:w="11"/><text x="21.2888%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (188 samples, 6.18%)</title><rect x="15.2531%" y="293" width="6.1801%" height="15" fill="rgb(253,11,6)" fg:x="464" fg:w="188"/><text x="15.5031%" y="303.50">rust-gka..</text></g><g><title>rust-gkat`util_cpu_time (1 samples, 0.03%)</title><rect x="21.4004%" y="277" width="0.0329%" height="15" fill="rgb(247,143,39)" fg:x="651" fg:w="1"/><text x="21.6504%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1 samples, 0.03%)</title><rect x="21.4004%" y="261" width="0.0329%" height="15" fill="rgb(236,97,10)" fg:x="651" fg:w="1"/><text x="21.6504%" y="271.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="21.4333%" y="293" width="0.0329%" height="15" fill="rgb(233,208,19)" fg:x="652" fg:w="1"/><text x="21.6833%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (205 samples, 6.74%)</title><rect x="14.8915%" y="309" width="6.7390%" height="15" fill="rgb(216,164,2)" fg:x="453" fg:w="205"/><text x="15.1415%" y="319.50">rust-gkat..</text></g><g><title>rust-gkat`cuddCacheLookup2 (5 samples, 0.16%)</title><rect x="21.4661%" y="293" width="0.1644%" height="15" fill="rgb(220,129,5)" fg:x="653" fg:w="5"/><text x="21.7161%" y="303.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="21.6305%" y="309" width="0.0329%" height="15" fill="rgb(242,17,10)" fg:x="658" fg:w="1"/><text x="21.8805%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (228 samples, 7.50%)</title><rect x="14.5299%" y="325" width="7.4951%" height="15" fill="rgb(242,107,0)" fg:x="442" fg:w="228"/><text x="14.7799%" y="335.50">rust-gkat`..</text></g><g><title>rust-gkat`cuddCacheLookup2 (11 samples, 0.36%)</title><rect x="21.6634%" y="309" width="0.3616%" height="15" fill="rgb(251,28,31)" fg:x="659" fg:w="11"/><text x="21.9134%" y="319.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="22.0250%" y="325" width="0.0657%" height="15" fill="rgb(233,223,10)" fg:x="670" fg:w="2"/><text x="22.2750%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (255 samples, 8.38%)</title><rect x="14.0368%" y="341" width="8.3826%" height="15" fill="rgb(215,21,27)" fg:x="427" fg:w="255"/><text x="14.2868%" y="351.50">rust-gkat`cu..</text></g><g><title>rust-gkat`cuddCacheLookup2 (10 samples, 0.33%)</title><rect x="22.0907%" y="325" width="0.3287%" height="15" fill="rgb(232,23,21)" fg:x="672" fg:w="10"/><text x="22.3407%" y="335.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="22.4195%" y="341" width="0.0657%" height="15" fill="rgb(244,5,23)" fg:x="682" fg:w="2"/><text x="22.6695%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (278 samples, 9.14%)</title><rect x="13.6095%" y="357" width="9.1387%" height="15" fill="rgb(226,81,46)" fg:x="414" fg:w="278"/><text x="13.8595%" y="367.50">rust-gkat`cud..</text></g><g><title>rust-gkat`cuddCacheLookup2 (8 samples, 0.26%)</title><rect x="22.4852%" y="341" width="0.2630%" height="15" fill="rgb(247,70,30)" fg:x="684" fg:w="8"/><text x="22.7352%" y="351.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="22.7482%" y="357" width="0.0329%" height="15" fill="rgb(212,68,19)" fg:x="692" fg:w="1"/><text x="22.9982%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (300 samples, 9.86%)</title><rect x="13.2807%" y="373" width="9.8619%" height="15" fill="rgb(240,187,13)" fg:x="404" fg:w="300"/><text x="13.5307%" y="383.50">rust-gkat`cudd..</text></g><g><title>rust-gkat`cuddCacheLookup2 (11 samples, 0.36%)</title><rect x="22.7811%" y="357" width="0.3616%" height="15" fill="rgb(223,113,26)" fg:x="693" fg:w="11"/><text x="23.0311%" y="367.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (2 samples, 0.07%)</title><rect x="23.1427%" y="373" width="0.0657%" height="15" fill="rgb(206,192,2)" fg:x="704" fg:w="2"/><text x="23.3927%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (319 samples, 10.49%)</title><rect x="12.9520%" y="389" width="10.4865%" height="15" fill="rgb(241,108,4)" fg:x="394" fg:w="319"/><text x="13.2020%" y="399.50">rust-gkat`cuddB..</text></g><g><title>rust-gkat`cuddCacheLookup2 (7 samples, 0.23%)</title><rect x="23.2084%" y="373" width="0.2301%" height="15" fill="rgb(247,173,49)" fg:x="706" fg:w="7"/><text x="23.4584%" y="383.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="23.4385%" y="389" width="0.0329%" height="15" fill="rgb(224,114,35)" fg:x="713" fg:w="1"/><text x="23.6885%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (339 samples, 11.14%)</title><rect x="12.5904%" y="405" width="11.1440%" height="15" fill="rgb(245,159,27)" fg:x="383" fg:w="339"/><text x="12.8404%" y="415.50">rust-gkat`cuddBd..</text></g><g><title>rust-gkat`cuddCacheLookup2 (8 samples, 0.26%)</title><rect x="23.4714%" y="389" width="0.2630%" height="15" fill="rgb(245,172,44)" fg:x="714" fg:w="8"/><text x="23.7214%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (349 samples, 11.47%)</title><rect x="12.4260%" y="421" width="11.4727%" height="15" fill="rgb(236,23,11)" fg:x="378" fg:w="349"/><text x="12.6760%" y="431.50">rust-gkat`cuddBdd..</text></g><g><title>rust-gkat`cuddCacheLookup2 (5 samples, 0.16%)</title><rect x="23.7344%" y="405" width="0.1644%" height="15" fill="rgb(205,117,38)" fg:x="722" fg:w="5"/><text x="23.9844%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (366 samples, 12.03%)</title><rect x="12.1959%" y="437" width="12.0316%" height="15" fill="rgb(237,72,25)" fg:x="371" fg:w="366"/><text x="12.4459%" y="447.50">rust-gkat`cuddBddA..</text></g><g><title>rust-gkat`cuddCacheLookup2 (10 samples, 0.33%)</title><rect x="23.8988%" y="421" width="0.3287%" height="15" fill="rgb(244,70,9)" fg:x="727" fg:w="10"/><text x="24.1488%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (374 samples, 12.29%)</title><rect x="11.9658%" y="453" width="12.2945%" height="15" fill="rgb(217,125,39)" fg:x="364" fg:w="374"/><text x="12.2158%" y="463.50">rust-gkat`cuddBddA..</text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="24.2275%" y="437" width="0.0329%" height="15" fill="rgb(235,36,10)" fg:x="737" fg:w="1"/><text x="24.4775%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (379 samples, 12.46%)</title><rect x="11.8672%" y="485" width="12.4589%" height="15" fill="rgb(251,123,47)" fg:x="361" fg:w="379"/><text x="12.1172%" y="495.50">rust-gkat`cuddBddAn..</text></g><g><title>rust-gkat`cuddBddAndRecur (377 samples, 12.39%)</title><rect x="11.9329%" y="469" width="12.3932%" height="15" fill="rgb(221,13,13)" fg:x="363" fg:w="377"/><text x="12.1829%" y="479.50">rust-gkat`cuddBddAn..</text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="24.2604%" y="453" width="0.0657%" height="15" fill="rgb(238,131,9)" fg:x="738" fg:w="2"/><text x="24.5104%" y="463.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="24.3261%" y="485" width="0.0329%" height="15" fill="rgb(211,50,8)" fg:x="740" fg:w="1"/><text x="24.5761%" y="495.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (385 samples, 12.66%)</title><rect x="11.8343%" y="501" width="12.6561%" height="15" fill="rgb(245,182,24)" fg:x="360" fg:w="385"/><text x="12.0843%" y="511.50">rust-gkat`cuddBddAn..</text></g><g><title>rust-gkat`cuddCacheLookup2 (4 samples, 0.13%)</title><rect x="24.3590%" y="485" width="0.1315%" height="15" fill="rgb(242,14,37)" fg:x="741" fg:w="4"/><text x="24.6090%" y="495.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (394 samples, 12.95%)</title><rect x="11.7686%" y="533" width="12.9520%" height="15" fill="rgb(246,228,12)" fg:x="358" fg:w="394"/><text x="12.0186%" y="543.50">rust-gkat`Cudd_bddA..</text></g><g><title>rust-gkat`cuddBddAndRecur (394 samples, 12.95%)</title><rect x="11.7686%" y="517" width="12.9520%" height="15" fill="rgb(213,55,15)" fg:x="358" fg:w="394"/><text x="12.0186%" y="527.50">rust-gkat`cuddBddAn..</text></g><g><title>rust-gkat`cuddCacheLookup2 (7 samples, 0.23%)</title><rect x="24.4905%" y="501" width="0.2301%" height="15" fill="rgb(209,9,3)" fg:x="745" fg:w="7"/><text x="24.7405%" y="511.50"></text></g><g><title>rust-gkat`cuddCacheResize (3 samples, 0.10%)</title><rect x="24.6220%" y="485" width="0.0986%" height="15" fill="rgb(230,59,30)" fg:x="749" fg:w="3"/><text x="24.8720%" y="495.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="24.7206%" y="533" width="0.0986%" height="15" fill="rgb(209,121,21)" fg:x="752" fg:w="3"/><text x="24.9706%" y="543.50"></text></g><g><title>rust-gkat`disjoint_sets::tree::UnionFindNode&lt;Data&gt;::equiv (2 samples, 0.07%)</title><rect x="24.8192%" y="533" width="0.0657%" height="15" fill="rgb(220,109,13)" fg:x="755" fg:w="2"/><text x="25.0692%" y="543.50"></text></g><g><title>rust-gkat`disjoint_sets::tree::UnionFindNode&lt;Data&gt;::union (1 samples, 0.03%)</title><rect x="24.8849%" y="533" width="0.0329%" height="15" fill="rgb(232,18,1)" fg:x="757" fg:w="1"/><text x="25.1349%" y="543.50"></text></g><g><title>rust-gkat`disjoint_sets::tree::UnionFindNode&lt;Data&gt;::find_with_rank (1 samples, 0.03%)</title><rect x="24.8849%" y="517" width="0.0329%" height="15" fill="rgb(215,41,42)" fg:x="757" fg:w="1"/><text x="25.1349%" y="527.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="24.9178%" y="533" width="0.0329%" height="15" fill="rgb(224,123,36)" fg:x="758" fg:w="1"/><text x="25.1678%" y="543.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="25.3780%" y="517" width="0.0657%" height="15" fill="rgb(240,125,3)" fg:x="772" fg:w="2"/><text x="25.6280%" y="527.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.10%)</title><rect x="25.4438%" y="517" width="0.0986%" height="15" fill="rgb(205,98,50)" fg:x="774" fg:w="3"/><text x="25.6938%" y="527.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="25.5095%" y="501" width="0.0329%" height="15" fill="rgb(205,185,37)" fg:x="776" fg:w="1"/><text x="25.7595%" y="511.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="25.5095%" y="485" width="0.0329%" height="15" fill="rgb(238,207,15)" fg:x="776" fg:w="1"/><text x="25.7595%" y="495.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="25.5424%" y="517" width="0.0329%" height="15" fill="rgb(213,199,42)" fg:x="777" fg:w="1"/><text x="25.7924%" y="527.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (1 samples, 0.03%)</title><rect x="25.5753%" y="517" width="0.0329%" height="15" fill="rgb(235,201,11)" fg:x="778" fg:w="1"/><text x="25.8253%" y="527.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (11 samples, 0.36%)</title><rect x="25.6082%" y="517" width="0.3616%" height="15" fill="rgb(207,46,11)" fg:x="779" fg:w="11"/><text x="25.8582%" y="527.50"></text></g><g><title>rust-gkat`Cudd_Ref (4 samples, 0.13%)</title><rect x="25.9698%" y="517" width="0.1315%" height="15" fill="rgb(241,35,35)" fg:x="790" fg:w="4"/><text x="26.2198%" y="527.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="26.1012%" y="517" width="0.0657%" height="15" fill="rgb(243,32,47)" fg:x="794" fg:w="2"/><text x="26.3512%" y="527.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="26.1670%" y="517" width="0.0986%" height="15" fill="rgb(247,202,23)" fg:x="796" fg:w="3"/><text x="26.4170%" y="527.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="26.4957%" y="501" width="0.0329%" height="15" fill="rgb(219,102,11)" fg:x="806" fg:w="1"/><text x="26.7457%" y="511.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (14 samples, 0.46%)</title><rect x="26.6601%" y="485" width="0.4602%" height="15" fill="rgb(243,110,44)" fg:x="811" fg:w="14"/><text x="26.9101%" y="495.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="26.9888%" y="469" width="0.1315%" height="15" fill="rgb(222,74,54)" fg:x="821" fg:w="4"/><text x="27.2388%" y="479.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 1.18%)</title><rect x="26.5286%" y="501" width="1.1834%" height="15" fill="rgb(216,99,12)" fg:x="807" fg:w="36"/><text x="26.7786%" y="511.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (18 samples, 0.59%)</title><rect x="27.1203%" y="485" width="0.5917%" height="15" fill="rgb(226,22,26)" fg:x="825" fg:w="18"/><text x="27.3703%" y="495.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="27.7120%" y="501" width="0.0329%" height="15" fill="rgb(217,163,10)" fg:x="843" fg:w="1"/><text x="27.9620%" y="511.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="27.7120%" y="485" width="0.0329%" height="15" fill="rgb(213,25,53)" fg:x="843" fg:w="1"/><text x="27.9620%" y="495.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (5 samples, 0.16%)</title><rect x="27.7449%" y="501" width="0.1644%" height="15" fill="rgb(252,105,26)" fg:x="844" fg:w="5"/><text x="27.9949%" y="511.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (18 samples, 0.59%)</title><rect x="27.9093%" y="501" width="0.5917%" height="15" fill="rgb(220,39,43)" fg:x="849" fg:w="18"/><text x="28.1593%" y="511.50"></text></g><g><title>rust-gkat`Cudd_Ref (7 samples, 0.23%)</title><rect x="28.5010%" y="501" width="0.2301%" height="15" fill="rgb(229,68,48)" fg:x="867" fg:w="7"/><text x="28.7510%" y="511.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="28.7311%" y="501" width="0.0329%" height="15" fill="rgb(252,8,32)" fg:x="874" fg:w="1"/><text x="28.9811%" y="511.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="28.7640%" y="501" width="0.0657%" height="15" fill="rgb(223,20,43)" fg:x="875" fg:w="2"/><text x="29.0140%" y="511.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="28.8297%" y="501" width="0.0329%" height="15" fill="rgb(229,81,49)" fg:x="877" fg:w="1"/><text x="29.0797%" y="511.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (5 samples, 0.16%)</title><rect x="29.2242%" y="469" width="0.1644%" height="15" fill="rgb(236,28,36)" fg:x="889" fg:w="5"/><text x="29.4742%" y="479.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="29.2899%" y="453" width="0.0986%" height="15" fill="rgb(249,185,26)" fg:x="891" fg:w="3"/><text x="29.5399%" y="463.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.66%)</title><rect x="29.1913%" y="485" width="0.6575%" height="15" fill="rgb(249,174,33)" fg:x="888" fg:w="20"/><text x="29.4413%" y="495.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (14 samples, 0.46%)</title><rect x="29.3886%" y="469" width="0.4602%" height="15" fill="rgb(233,201,37)" fg:x="894" fg:w="14"/><text x="29.6386%" y="479.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="30.2104%" y="437" width="0.0329%" height="15" fill="rgb(221,78,26)" fg:x="919" fg:w="1"/><text x="30.4604%" y="447.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.10%)</title><rect x="30.1775%" y="469" width="0.0986%" height="15" fill="rgb(250,127,30)" fg:x="918" fg:w="3"/><text x="30.4275%" y="479.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (3 samples, 0.10%)</title><rect x="30.1775%" y="453" width="0.0986%" height="15" fill="rgb(230,49,44)" fg:x="918" fg:w="3"/><text x="30.4275%" y="463.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="30.2433%" y="437" width="0.0329%" height="15" fill="rgb(229,67,23)" fg:x="920" fg:w="1"/><text x="30.4933%" y="447.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.49%)</title><rect x="29.8488%" y="485" width="0.4931%" height="15" fill="rgb(249,83,47)" fg:x="908" fg:w="15"/><text x="30.0988%" y="495.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="30.2761%" y="469" width="0.0657%" height="15" fill="rgb(215,43,3)" fg:x="921" fg:w="2"/><text x="30.5261%" y="479.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (6 samples, 0.20%)</title><rect x="30.3419%" y="485" width="0.1972%" height="15" fill="rgb(238,154,13)" fg:x="923" fg:w="6"/><text x="30.5919%" y="495.50"></text></g><g><title>rust-gkat`Cudd_Ref (7 samples, 0.23%)</title><rect x="30.5391%" y="485" width="0.2301%" height="15" fill="rgb(219,56,2)" fg:x="929" fg:w="7"/><text x="30.7891%" y="495.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="30.7692%" y="485" width="0.0329%" height="15" fill="rgb(233,0,4)" fg:x="936" fg:w="1"/><text x="31.0192%" y="495.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="30.8021%" y="485" width="0.0657%" height="15" fill="rgb(235,30,7)" fg:x="937" fg:w="2"/><text x="31.0521%" y="495.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="31.0651%" y="469" width="0.0329%" height="15" fill="rgb(250,79,13)" fg:x="945" fg:w="1"/><text x="31.3151%" y="479.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="31.0980%" y="469" width="0.0657%" height="15" fill="rgb(211,146,34)" fg:x="946" fg:w="2"/><text x="31.3480%" y="479.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="31.2623%" y="341" width="0.0657%" height="15" fill="rgb(228,22,38)" fg:x="951" fg:w="2"/><text x="31.5123%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="31.2623%" y="325" width="0.0657%" height="15" fill="rgb(235,168,5)" fg:x="951" fg:w="2"/><text x="31.5123%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="31.2952%" y="309" width="0.0329%" height="15" fill="rgb(221,155,16)" fg:x="952" fg:w="1"/><text x="31.5452%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="31.2952%" y="293" width="0.0329%" height="15" fill="rgb(215,215,53)" fg:x="952" fg:w="1"/><text x="31.5452%" y="303.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="31.2952%" y="277" width="0.0329%" height="15" fill="rgb(223,4,10)" fg:x="952" fg:w="1"/><text x="31.5452%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="31.2623%" y="357" width="0.0986%" height="15" fill="rgb(234,103,6)" fg:x="951" fg:w="3"/><text x="31.5123%" y="367.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="31.3281%" y="341" width="0.0329%" height="15" fill="rgb(227,97,0)" fg:x="953" fg:w="1"/><text x="31.5781%" y="351.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="31.3281%" y="325" width="0.0329%" height="15" fill="rgb(234,150,53)" fg:x="953" fg:w="1"/><text x="31.5781%" y="335.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (7 samples, 0.23%)</title><rect x="31.1637%" y="453" width="0.2301%" height="15" fill="rgb(228,201,54)" fg:x="948" fg:w="7"/><text x="31.4137%" y="463.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="31.1966%" y="437" width="0.1972%" height="15" fill="rgb(222,22,37)" fg:x="949" fg:w="6"/><text x="31.4466%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="31.2295%" y="421" width="0.1644%" height="15" fill="rgb(237,53,32)" fg:x="950" fg:w="5"/><text x="31.4795%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="31.2623%" y="405" width="0.1315%" height="15" fill="rgb(233,25,53)" fg:x="951" fg:w="4"/><text x="31.5123%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="31.2623%" y="389" width="0.1315%" height="15" fill="rgb(210,40,34)" fg:x="951" fg:w="4"/><text x="31.5123%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="31.2623%" y="373" width="0.1315%" height="15" fill="rgb(241,220,44)" fg:x="951" fg:w="4"/><text x="31.5123%" y="383.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="31.3609%" y="357" width="0.0329%" height="15" fill="rgb(235,28,35)" fg:x="954" fg:w="1"/><text x="31.6109%" y="367.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="31.3938%" y="453" width="0.0329%" height="15" fill="rgb(210,56,17)" fg:x="955" fg:w="1"/><text x="31.6438%" y="463.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="31.3938%" y="437" width="0.0329%" height="15" fill="rgb(224,130,29)" fg:x="955" fg:w="1"/><text x="31.6438%" y="447.50"></text></g><g><title>rust-gkat`_mi_heap_realloc_zero (1 samples, 0.03%)</title><rect x="31.3938%" y="421" width="0.0329%" height="15" fill="rgb(235,212,8)" fg:x="955" fg:w="1"/><text x="31.6438%" y="431.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="31.3938%" y="405" width="0.0329%" height="15" fill="rgb(223,33,50)" fg:x="955" fg:w="1"/><text x="31.6438%" y="415.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="31.3938%" y="389" width="0.0329%" height="15" fill="rgb(219,149,13)" fg:x="955" fg:w="1"/><text x="31.6438%" y="399.50"></text></g><g><title>rust-gkat`mi_page_fresh_alloc (1 samples, 0.03%)</title><rect x="31.3938%" y="373" width="0.0329%" height="15" fill="rgb(250,156,29)" fg:x="955" fg:w="1"/><text x="31.6438%" y="383.50"></text></g><g><title>rust-gkat`mi_segments_page_alloc (1 samples, 0.03%)</title><rect x="31.3938%" y="357" width="0.0329%" height="15" fill="rgb(216,193,19)" fg:x="955" fg:w="1"/><text x="31.6438%" y="367.50"></text></g><g><title>rust-gkat`mi_segment_span_allocate (1 samples, 0.03%)</title><rect x="31.3938%" y="341" width="0.0329%" height="15" fill="rgb(216,135,14)" fg:x="955" fg:w="1"/><text x="31.6438%" y="351.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.43%)</title><rect x="31.1637%" y="469" width="0.4274%" height="15" fill="rgb(241,47,5)" fg:x="948" fg:w="13"/><text x="31.4137%" y="479.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="31.4267%" y="453" width="0.1644%" height="15" fill="rgb(233,42,35)" fg:x="956" fg:w="5"/><text x="31.6767%" y="463.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="31.8540%" y="453" width="0.0329%" height="15" fill="rgb(231,13,6)" fg:x="969" fg:w="1"/><text x="32.1040%" y="463.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="31.8540%" y="437" width="0.0329%" height="15" fill="rgb(207,181,40)" fg:x="969" fg:w="1"/><text x="32.1040%" y="447.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="31.8540%" y="421" width="0.0329%" height="15" fill="rgb(254,173,49)" fg:x="969" fg:w="1"/><text x="32.1040%" y="431.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.33%)</title><rect x="31.5911%" y="469" width="0.3287%" height="15" fill="rgb(221,1,38)" fg:x="961" fg:w="10"/><text x="31.8411%" y="479.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="31.8869%" y="453" width="0.0329%" height="15" fill="rgb(206,124,46)" fg:x="970" fg:w="1"/><text x="32.1369%" y="463.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (1 samples, 0.03%)</title><rect x="31.9198%" y="469" width="0.0329%" height="15" fill="rgb(249,21,11)" fg:x="971" fg:w="1"/><text x="32.1698%" y="479.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (6 samples, 0.20%)</title><rect x="31.9527%" y="469" width="0.1972%" height="15" fill="rgb(222,201,40)" fg:x="972" fg:w="6"/><text x="32.2027%" y="479.50"></text></g><g><title>rust-gkat`Cudd_Ref (3 samples, 0.10%)</title><rect x="32.1499%" y="469" width="0.0986%" height="15" fill="rgb(235,61,29)" fg:x="978" fg:w="3"/><text x="32.3999%" y="479.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="32.2485%" y="469" width="0.0657%" height="15" fill="rgb(219,207,3)" fg:x="981" fg:w="2"/><text x="32.4985%" y="479.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="32.3143%" y="469" width="0.0329%" height="15" fill="rgb(222,56,46)" fg:x="983" fg:w="1"/><text x="32.5643%" y="479.50"></text></g><g><title>rust-gkat`recursive::get_minimum_stack_size (1 samples, 0.03%)</title><rect x="32.3471%" y="469" width="0.0329%" height="15" fill="rgb(239,76,54)" fg:x="984" fg:w="1"/><text x="32.5971%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="32.6430%" y="453" width="0.0329%" height="15" fill="rgb(231,124,27)" fg:x="993" fg:w="1"/><text x="32.8930%" y="463.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="32.6759%" y="453" width="0.0329%" height="15" fill="rgb(249,195,6)" fg:x="994" fg:w="1"/><text x="32.9259%" y="463.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="32.8731%" y="357" width="0.0329%" height="15" fill="rgb(237,174,47)" fg:x="1000" fg:w="1"/><text x="33.1231%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="32.8731%" y="341" width="0.0329%" height="15" fill="rgb(206,201,31)" fg:x="1000" fg:w="1"/><text x="33.1231%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="32.8731%" y="325" width="0.0329%" height="15" fill="rgb(231,57,52)" fg:x="1000" fg:w="1"/><text x="33.1231%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="32.8731%" y="309" width="0.0329%" height="15" fill="rgb(248,177,22)" fg:x="1000" fg:w="1"/><text x="33.1231%" y="319.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="32.8731%" y="293" width="0.0329%" height="15" fill="rgb(215,211,37)" fg:x="1000" fg:w="1"/><text x="33.1231%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="32.8731%" y="389" width="0.0657%" height="15" fill="rgb(241,128,51)" fg:x="1000" fg:w="2"/><text x="33.1231%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="32.8731%" y="373" width="0.0657%" height="15" fill="rgb(227,165,31)" fg:x="1000" fg:w="2"/><text x="33.1231%" y="383.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="32.9060%" y="357" width="0.0329%" height="15" fill="rgb(228,167,24)" fg:x="1001" fg:w="1"/><text x="33.1560%" y="367.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="32.9060%" y="341" width="0.0329%" height="15" fill="rgb(228,143,12)" fg:x="1001" fg:w="1"/><text x="33.1560%" y="351.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (5 samples, 0.16%)</title><rect x="32.8074%" y="437" width="0.1644%" height="15" fill="rgb(249,149,8)" fg:x="998" fg:w="5"/><text x="33.0574%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="32.8402%" y="421" width="0.1315%" height="15" fill="rgb(243,35,44)" fg:x="999" fg:w="4"/><text x="33.0902%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="32.8731%" y="405" width="0.0986%" height="15" fill="rgb(246,89,9)" fg:x="1000" fg:w="3"/><text x="33.1231%" y="415.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="32.9389%" y="389" width="0.0329%" height="15" fill="rgb(233,213,13)" fg:x="1002" fg:w="1"/><text x="33.1889%" y="399.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 0.36%)</title><rect x="32.7087%" y="453" width="0.3616%" height="15" fill="rgb(233,141,41)" fg:x="995" fg:w="11"/><text x="32.9587%" y="463.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="32.9717%" y="437" width="0.0986%" height="15" fill="rgb(239,167,4)" fg:x="1003" fg:w="3"/><text x="33.2217%" y="447.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="33.2018%" y="437" width="0.0329%" height="15" fill="rgb(209,217,16)" fg:x="1010" fg:w="1"/><text x="33.4518%" y="447.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="33.2018%" y="421" width="0.0329%" height="15" fill="rgb(219,88,35)" fg:x="1010" fg:w="1"/><text x="33.4518%" y="431.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="33.2018%" y="405" width="0.0329%" height="15" fill="rgb(220,193,23)" fg:x="1010" fg:w="1"/><text x="33.4518%" y="415.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.23%)</title><rect x="33.0703%" y="453" width="0.2301%" height="15" fill="rgb(230,90,52)" fg:x="1006" fg:w="7"/><text x="33.3203%" y="463.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="33.2347%" y="437" width="0.0657%" height="15" fill="rgb(252,106,19)" fg:x="1011" fg:w="2"/><text x="33.4847%" y="447.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (3 samples, 0.10%)</title><rect x="33.3005%" y="453" width="0.0986%" height="15" fill="rgb(206,74,20)" fg:x="1013" fg:w="3"/><text x="33.5505%" y="463.50"></text></g><g><title>rust-gkat`Cudd_ReadOne (2 samples, 0.07%)</title><rect x="33.3991%" y="453" width="0.0657%" height="15" fill="rgb(230,138,44)" fg:x="1016" fg:w="2"/><text x="33.6491%" y="463.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (9 samples, 0.30%)</title><rect x="33.4648%" y="453" width="0.2959%" height="15" fill="rgb(235,182,43)" fg:x="1018" fg:w="9"/><text x="33.7148%" y="463.50"></text></g><g><title>rust-gkat`Cudd_Ref (5 samples, 0.16%)</title><rect x="33.7607%" y="453" width="0.1644%" height="15" fill="rgb(242,16,51)" fg:x="1027" fg:w="5"/><text x="34.0107%" y="463.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.56%)</title><rect x="33.9250%" y="453" width="0.5588%" height="15" fill="rgb(248,9,4)" fg:x="1032" fg:w="17"/><text x="34.1750%" y="463.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.30%)</title><rect x="34.1880%" y="437" width="0.2959%" height="15" fill="rgb(210,31,22)" fg:x="1040" fg:w="9"/><text x="34.4380%" y="447.50"></text></g><g><title>rust-gkat`mi_segment_free (1 samples, 0.03%)</title><rect x="34.4510%" y="421" width="0.0329%" height="15" fill="rgb(239,54,39)" fg:x="1048" fg:w="1"/><text x="34.7010%" y="431.50"></text></g><g><title>rust-gkat`mi_arenas_try_purge (1 samples, 0.03%)</title><rect x="34.4510%" y="405" width="0.0329%" height="15" fill="rgb(230,99,41)" fg:x="1048" fg:w="1"/><text x="34.7010%" y="415.50"></text></g><g><title>rust-gkat`mi_arena_purge (1 samples, 0.03%)</title><rect x="34.4510%" y="389" width="0.0329%" height="15" fill="rgb(253,106,12)" fg:x="1048" fg:w="1"/><text x="34.7010%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="34.4510%" y="373" width="0.0329%" height="15" fill="rgb(213,46,41)" fg:x="1048" fg:w="1"/><text x="34.7010%" y="383.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="34.4839%" y="453" width="0.0329%" height="15" fill="rgb(215,133,35)" fg:x="1049" fg:w="1"/><text x="34.7339%" y="463.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="34.5168%" y="453" width="0.0329%" height="15" fill="rgb(213,28,5)" fg:x="1050" fg:w="1"/><text x="34.7668%" y="463.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="35.0099%" y="37" width="0.0329%" height="15" fill="rgb(215,77,49)" fg:x="1065" fg:w="1"/><text x="35.2599%" y="47.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="34.9441%" y="85" width="0.1315%" height="15" fill="rgb(248,100,22)" fg:x="1063" fg:w="4"/><text x="35.1941%" y="95.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="34.9441%" y="69" width="0.1315%" height="15" fill="rgb(208,67,9)" fg:x="1063" fg:w="4"/><text x="35.1941%" y="79.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="34.9770%" y="53" width="0.0986%" height="15" fill="rgb(219,133,21)" fg:x="1064" fg:w="3"/><text x="35.2270%" y="63.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.0427%" y="37" width="0.0329%" height="15" fill="rgb(246,46,29)" fg:x="1066" fg:w="1"/><text x="35.2927%" y="47.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="34.9441%" y="101" width="0.1644%" height="15" fill="rgb(246,185,52)" fg:x="1063" fg:w="5"/><text x="35.1941%" y="111.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.0756%" y="85" width="0.0329%" height="15" fill="rgb(252,136,11)" fg:x="1067" fg:w="1"/><text x="35.3256%" y="95.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="35.1085%" y="101" width="0.0329%" height="15" fill="rgb(219,138,53)" fg:x="1068" fg:w="1"/><text x="35.3585%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (8 samples, 0.26%)</title><rect x="34.9441%" y="117" width="0.2630%" height="15" fill="rgb(211,51,23)" fg:x="1063" fg:w="8"/><text x="35.1941%" y="127.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="35.1414%" y="101" width="0.0657%" height="15" fill="rgb(247,221,28)" fg:x="1069" fg:w="2"/><text x="35.3914%" y="111.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="35.1742%" y="85" width="0.0329%" height="15" fill="rgb(251,222,45)" fg:x="1070" fg:w="1"/><text x="35.4242%" y="95.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (10 samples, 0.33%)</title><rect x="34.9112%" y="149" width="0.3287%" height="15" fill="rgb(217,162,53)" fg:x="1062" fg:w="10"/><text x="35.1612%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (9 samples, 0.30%)</title><rect x="34.9441%" y="133" width="0.2959%" height="15" fill="rgb(229,93,14)" fg:x="1063" fg:w="9"/><text x="35.1941%" y="143.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.2071%" y="117" width="0.0329%" height="15" fill="rgb(209,67,49)" fg:x="1071" fg:w="1"/><text x="35.4571%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (11 samples, 0.36%)</title><rect x="34.9112%" y="165" width="0.3616%" height="15" fill="rgb(213,87,29)" fg:x="1062" fg:w="11"/><text x="35.1612%" y="175.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.2400%" y="149" width="0.0329%" height="15" fill="rgb(205,151,52)" fg:x="1072" fg:w="1"/><text x="35.4900%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (13 samples, 0.43%)</title><rect x="34.8784%" y="197" width="0.4274%" height="15" fill="rgb(253,215,39)" fg:x="1061" fg:w="13"/><text x="35.1284%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (12 samples, 0.39%)</title><rect x="34.9112%" y="181" width="0.3945%" height="15" fill="rgb(221,220,41)" fg:x="1062" fg:w="12"/><text x="35.1612%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.2728%" y="165" width="0.0329%" height="15" fill="rgb(218,133,21)" fg:x="1073" fg:w="1"/><text x="35.5228%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (15 samples, 0.49%)</title><rect x="34.8784%" y="229" width="0.4931%" height="15" fill="rgb(221,193,43)" fg:x="1061" fg:w="15"/><text x="35.1284%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (15 samples, 0.49%)</title><rect x="34.8784%" y="213" width="0.4931%" height="15" fill="rgb(240,128,52)" fg:x="1061" fg:w="15"/><text x="35.1284%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="35.3057%" y="197" width="0.0657%" height="15" fill="rgb(253,114,12)" fg:x="1074" fg:w="2"/><text x="35.5557%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (19 samples, 0.62%)</title><rect x="34.8784%" y="261" width="0.6246%" height="15" fill="rgb(215,223,47)" fg:x="1061" fg:w="19"/><text x="35.1284%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (19 samples, 0.62%)</title><rect x="34.8784%" y="245" width="0.6246%" height="15" fill="rgb(248,225,23)" fg:x="1061" fg:w="19"/><text x="35.1284%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="35.3715%" y="229" width="0.1315%" height="15" fill="rgb(250,108,0)" fg:x="1076" fg:w="4"/><text x="35.6215%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (20 samples, 0.66%)</title><rect x="34.8784%" y="277" width="0.6575%" height="15" fill="rgb(228,208,7)" fg:x="1061" fg:w="20"/><text x="35.1284%" y="287.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.5030%" y="261" width="0.0329%" height="15" fill="rgb(244,45,10)" fg:x="1080" fg:w="1"/><text x="35.7530%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (24 samples, 0.79%)</title><rect x="34.8784%" y="309" width="0.7890%" height="15" fill="rgb(207,125,25)" fg:x="1061" fg:w="24"/><text x="35.1284%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (24 samples, 0.79%)</title><rect x="34.8784%" y="293" width="0.7890%" height="15" fill="rgb(210,195,18)" fg:x="1061" fg:w="24"/><text x="35.1284%" y="303.50"></text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="35.5358%" y="277" width="0.1315%" height="15" fill="rgb(249,80,12)" fg:x="1081" fg:w="4"/><text x="35.7858%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (25 samples, 0.82%)</title><rect x="34.8784%" y="341" width="0.8218%" height="15" fill="rgb(221,65,9)" fg:x="1061" fg:w="25"/><text x="35.1284%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (25 samples, 0.82%)</title><rect x="34.8784%" y="325" width="0.8218%" height="15" fill="rgb(235,49,36)" fg:x="1061" fg:w="25"/><text x="35.1284%" y="335.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.6673%" y="309" width="0.0329%" height="15" fill="rgb(225,32,20)" fg:x="1085" fg:w="1"/><text x="35.9173%" y="319.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="35.7002%" y="341" width="0.0329%" height="15" fill="rgb(215,141,46)" fg:x="1086" fg:w="1"/><text x="35.9502%" y="351.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (30 samples, 0.99%)</title><rect x="34.7798%" y="421" width="0.9862%" height="15" fill="rgb(250,160,47)" fg:x="1058" fg:w="30"/><text x="35.0298%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (27 samples, 0.89%)</title><rect x="34.8784%" y="405" width="0.8876%" height="15" fill="rgb(216,222,40)" fg:x="1061" fg:w="27"/><text x="35.1284%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (27 samples, 0.89%)</title><rect x="34.8784%" y="389" width="0.8876%" height="15" fill="rgb(234,217,39)" fg:x="1061" fg:w="27"/><text x="35.1284%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (27 samples, 0.89%)</title><rect x="34.8784%" y="373" width="0.8876%" height="15" fill="rgb(207,178,40)" fg:x="1061" fg:w="27"/><text x="35.1284%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (27 samples, 0.89%)</title><rect x="34.8784%" y="357" width="0.8876%" height="15" fill="rgb(221,136,13)" fg:x="1061" fg:w="27"/><text x="35.1284%" y="367.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="35.7331%" y="341" width="0.0329%" height="15" fill="rgb(249,199,10)" fg:x="1087" fg:w="1"/><text x="35.9831%" y="351.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 1.18%)</title><rect x="34.7469%" y="437" width="1.1834%" height="15" fill="rgb(249,222,13)" fg:x="1057" fg:w="36"/><text x="34.9969%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="35.7659%" y="421" width="0.1644%" height="15" fill="rgb(244,185,38)" fg:x="1088" fg:w="5"/><text x="36.0159%" y="431.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.16%)</title><rect x="35.9303%" y="437" width="0.1644%" height="15" fill="rgb(236,202,9)" fg:x="1093" fg:w="5"/><text x="36.1803%" y="447.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (1 samples, 0.03%)</title><rect x="36.0947%" y="437" width="0.0329%" height="15" fill="rgb(250,229,37)" fg:x="1098" fg:w="1"/><text x="36.3447%" y="447.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (4 samples, 0.13%)</title><rect x="36.1275%" y="437" width="0.1315%" height="15" fill="rgb(206,174,23)" fg:x="1099" fg:w="4"/><text x="36.3775%" y="447.50"></text></g><g><title>rust-gkat`Cudd_Ref (4 samples, 0.13%)</title><rect x="36.2590%" y="437" width="0.1315%" height="15" fill="rgb(211,33,43)" fg:x="1103" fg:w="4"/><text x="36.5090%" y="447.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.23%)</title><rect x="36.3905%" y="437" width="0.2301%" height="15" fill="rgb(245,58,50)" fg:x="1107" fg:w="7"/><text x="36.6405%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="37.0809%" y="165" width="0.0329%" height="15" fill="rgb(244,68,36)" fg:x="1128" fg:w="1"/><text x="37.3309%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="37.0809%" y="149" width="0.0329%" height="15" fill="rgb(232,229,15)" fg:x="1128" fg:w="1"/><text x="37.3309%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="37.0809%" y="133" width="0.0329%" height="15" fill="rgb(254,30,23)" fg:x="1128" fg:w="1"/><text x="37.3309%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="37.0809%" y="117" width="0.0329%" height="15" fill="rgb(235,160,14)" fg:x="1128" fg:w="1"/><text x="37.3309%" y="127.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="37.0809%" y="101" width="0.0329%" height="15" fill="rgb(212,155,44)" fg:x="1128" fg:w="1"/><text x="37.3309%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="37.0809%" y="181" width="0.0657%" height="15" fill="rgb(226,2,50)" fg:x="1128" fg:w="2"/><text x="37.3309%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="37.1137%" y="165" width="0.0329%" height="15" fill="rgb(234,177,6)" fg:x="1129" fg:w="1"/><text x="37.3637%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="37.0809%" y="197" width="0.1315%" height="15" fill="rgb(217,24,9)" fg:x="1128" fg:w="4"/><text x="37.3309%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="37.1466%" y="181" width="0.0657%" height="15" fill="rgb(220,13,46)" fg:x="1130" fg:w="2"/><text x="37.3966%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="37.0809%" y="213" width="0.1644%" height="15" fill="rgb(239,221,27)" fg:x="1128" fg:w="5"/><text x="37.3309%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="37.2124%" y="197" width="0.0329%" height="15" fill="rgb(222,198,25)" fg:x="1132" fg:w="1"/><text x="37.4624%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (7 samples, 0.23%)</title><rect x="37.0809%" y="245" width="0.2301%" height="15" fill="rgb(211,99,13)" fg:x="1128" fg:w="7"/><text x="37.3309%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (7 samples, 0.23%)</title><rect x="37.0809%" y="229" width="0.2301%" height="15" fill="rgb(232,111,31)" fg:x="1128" fg:w="7"/><text x="37.3309%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="37.2452%" y="213" width="0.0657%" height="15" fill="rgb(245,82,37)" fg:x="1133" fg:w="2"/><text x="37.4952%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (9 samples, 0.30%)</title><rect x="37.0480%" y="261" width="0.2959%" height="15" fill="rgb(227,149,46)" fg:x="1127" fg:w="9"/><text x="37.2980%" y="271.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="37.3110%" y="245" width="0.0329%" height="15" fill="rgb(218,36,50)" fg:x="1135" fg:w="1"/><text x="37.5610%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (10 samples, 0.33%)</title><rect x="37.0480%" y="277" width="0.3287%" height="15" fill="rgb(226,80,48)" fg:x="1127" fg:w="10"/><text x="37.2980%" y="287.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="37.3439%" y="261" width="0.0329%" height="15" fill="rgb(238,224,15)" fg:x="1136" fg:w="1"/><text x="37.5939%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (17 samples, 0.56%)</title><rect x="36.8508%" y="405" width="0.5588%" height="15" fill="rgb(241,136,10)" fg:x="1121" fg:w="17"/><text x="37.1008%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (16 samples, 0.53%)</title><rect x="36.8836%" y="389" width="0.5260%" height="15" fill="rgb(208,32,45)" fg:x="1122" fg:w="16"/><text x="37.1336%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (12 samples, 0.39%)</title><rect x="37.0151%" y="373" width="0.3945%" height="15" fill="rgb(207,135,9)" fg:x="1126" fg:w="12"/><text x="37.2651%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (12 samples, 0.39%)</title><rect x="37.0151%" y="357" width="0.3945%" height="15" fill="rgb(206,86,44)" fg:x="1126" fg:w="12"/><text x="37.2651%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (11 samples, 0.36%)</title><rect x="37.0480%" y="341" width="0.3616%" height="15" fill="rgb(245,177,15)" fg:x="1127" fg:w="11"/><text x="37.2980%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (11 samples, 0.36%)</title><rect x="37.0480%" y="325" width="0.3616%" height="15" fill="rgb(206,64,50)" fg:x="1127" fg:w="11"/><text x="37.2980%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (11 samples, 0.36%)</title><rect x="37.0480%" y="309" width="0.3616%" height="15" fill="rgb(234,36,40)" fg:x="1127" fg:w="11"/><text x="37.2980%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (11 samples, 0.36%)</title><rect x="37.0480%" y="293" width="0.3616%" height="15" fill="rgb(213,64,8)" fg:x="1127" fg:w="11"/><text x="37.2980%" y="303.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="37.3767%" y="277" width="0.0329%" height="15" fill="rgb(210,75,36)" fg:x="1137" fg:w="1"/><text x="37.6267%" y="287.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.66%)</title><rect x="36.8179%" y="421" width="0.6575%" height="15" fill="rgb(229,88,21)" fg:x="1120" fg:w="20"/><text x="37.0679%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="37.4096%" y="405" width="0.0657%" height="15" fill="rgb(252,204,47)" fg:x="1138" fg:w="2"/><text x="37.6596%" y="415.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="37.7383%" y="405" width="0.0329%" height="15" fill="rgb(208,77,27)" fg:x="1148" fg:w="1"/><text x="37.9883%" y="415.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.39%)</title><rect x="37.4753%" y="421" width="0.3945%" height="15" fill="rgb(221,76,26)" fg:x="1140" fg:w="12"/><text x="37.7253%" y="431.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (3 samples, 0.10%)</title><rect x="37.7712%" y="405" width="0.0986%" height="15" fill="rgb(225,139,18)" fg:x="1149" fg:w="3"/><text x="38.0212%" y="415.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (3 samples, 0.10%)</title><rect x="37.8698%" y="421" width="0.0986%" height="15" fill="rgb(230,137,11)" fg:x="1152" fg:w="3"/><text x="38.1198%" y="431.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="37.9684%" y="421" width="0.0329%" height="15" fill="rgb(212,28,1)" fg:x="1155" fg:w="1"/><text x="38.2184%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="38.0671%" y="405" width="0.0329%" height="15" fill="rgb(248,164,17)" fg:x="1158" fg:w="1"/><text x="38.3171%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.76%)</title><rect x="38.0013%" y="421" width="0.7561%" height="15" fill="rgb(222,171,42)" fg:x="1156" fg:w="23"/><text x="38.2513%" y="431.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.66%)</title><rect x="38.0999%" y="405" width="0.6575%" height="15" fill="rgb(243,84,45)" fg:x="1159" fg:w="20"/><text x="38.3499%" y="415.50"></text></g><g><title>rust-gkat`mi_segment_free (2 samples, 0.07%)</title><rect x="38.6917%" y="389" width="0.0657%" height="15" fill="rgb(252,49,23)" fg:x="1177" fg:w="2"/><text x="38.9417%" y="399.50"></text></g><g><title>rust-gkat`_mi_arena_free (2 samples, 0.07%)</title><rect x="38.6917%" y="373" width="0.0657%" height="15" fill="rgb(215,19,7)" fg:x="1177" fg:w="2"/><text x="38.9417%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (2 samples, 0.07%)</title><rect x="38.6917%" y="357" width="0.0657%" height="15" fill="rgb(238,81,41)" fg:x="1177" fg:w="2"/><text x="38.9417%" y="367.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="38.7574%" y="421" width="0.0329%" height="15" fill="rgb(210,199,37)" fg:x="1179" fg:w="1"/><text x="39.0074%" y="431.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="38.7574%" y="405" width="0.0329%" height="15" fill="rgb(244,192,49)" fg:x="1179" fg:w="1"/><text x="39.0074%" y="415.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="38.7574%" y="389" width="0.0329%" height="15" fill="rgb(226,211,11)" fg:x="1179" fg:w="1"/><text x="39.0074%" y="399.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="39.0204%" y="405" width="0.0329%" height="15" fill="rgb(236,162,54)" fg:x="1187" fg:w="1"/><text x="39.2704%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="39.2176%" y="133" width="0.0329%" height="15" fill="rgb(220,229,9)" fg:x="1193" fg:w="1"/><text x="39.4676%" y="143.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.2176%" y="117" width="0.0329%" height="15" fill="rgb(250,87,22)" fg:x="1193" fg:w="1"/><text x="39.4676%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="39.2176%" y="165" width="0.0657%" height="15" fill="rgb(239,43,17)" fg:x="1193" fg:w="2"/><text x="39.4676%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="39.2176%" y="149" width="0.0657%" height="15" fill="rgb(231,177,25)" fg:x="1193" fg:w="2"/><text x="39.4676%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.2505%" y="133" width="0.0329%" height="15" fill="rgb(219,179,1)" fg:x="1194" fg:w="1"/><text x="39.5005%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="39.2176%" y="197" width="0.0986%" height="15" fill="rgb(238,219,53)" fg:x="1193" fg:w="3"/><text x="39.4676%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="39.2176%" y="181" width="0.0986%" height="15" fill="rgb(232,167,36)" fg:x="1193" fg:w="3"/><text x="39.4676%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.2834%" y="165" width="0.0329%" height="15" fill="rgb(244,19,51)" fg:x="1195" fg:w="1"/><text x="39.5334%" y="175.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="39.2834%" y="149" width="0.0329%" height="15" fill="rgb(224,6,22)" fg:x="1195" fg:w="1"/><text x="39.5334%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="39.2176%" y="213" width="0.1315%" height="15" fill="rgb(224,145,5)" fg:x="1193" fg:w="4"/><text x="39.4676%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.3162%" y="197" width="0.0329%" height="15" fill="rgb(234,130,49)" fg:x="1196" fg:w="1"/><text x="39.5662%" y="207.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="39.3162%" y="181" width="0.0329%" height="15" fill="rgb(254,6,2)" fg:x="1196" fg:w="1"/><text x="39.5662%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="39.3491%" y="213" width="0.0329%" height="15" fill="rgb(208,96,46)" fg:x="1197" fg:w="1"/><text x="39.5991%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (7 samples, 0.23%)</title><rect x="39.1847%" y="277" width="0.2301%" height="15" fill="rgb(239,3,39)" fg:x="1192" fg:w="7"/><text x="39.4347%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="39.2176%" y="261" width="0.1972%" height="15" fill="rgb(233,210,1)" fg:x="1193" fg:w="6"/><text x="39.4676%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="39.2176%" y="245" width="0.1972%" height="15" fill="rgb(244,137,37)" fg:x="1193" fg:w="6"/><text x="39.4676%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="39.2176%" y="229" width="0.1972%" height="15" fill="rgb(240,136,2)" fg:x="1193" fg:w="6"/><text x="39.4676%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.3820%" y="213" width="0.0329%" height="15" fill="rgb(239,18,37)" fg:x="1198" fg:w="1"/><text x="39.6320%" y="223.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="39.3820%" y="197" width="0.0329%" height="15" fill="rgb(218,185,22)" fg:x="1198" fg:w="1"/><text x="39.6320%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (8 samples, 0.26%)</title><rect x="39.1847%" y="309" width="0.2630%" height="15" fill="rgb(225,218,4)" fg:x="1192" fg:w="8"/><text x="39.4347%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (8 samples, 0.26%)</title><rect x="39.1847%" y="293" width="0.2630%" height="15" fill="rgb(230,182,32)" fg:x="1192" fg:w="8"/><text x="39.4347%" y="303.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.4149%" y="277" width="0.0329%" height="15" fill="rgb(242,56,43)" fg:x="1199" fg:w="1"/><text x="39.6649%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (9 samples, 0.30%)</title><rect x="39.1847%" y="325" width="0.2959%" height="15" fill="rgb(233,99,24)" fg:x="1192" fg:w="9"/><text x="39.4347%" y="335.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.4477%" y="309" width="0.0329%" height="15" fill="rgb(234,209,42)" fg:x="1200" fg:w="1"/><text x="39.6977%" y="319.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="39.4806%" y="325" width="0.0329%" height="15" fill="rgb(227,7,12)" fg:x="1201" fg:w="1"/><text x="39.7306%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (13 samples, 0.43%)</title><rect x="39.1847%" y="357" width="0.4274%" height="15" fill="rgb(245,203,43)" fg:x="1192" fg:w="13"/><text x="39.4347%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (13 samples, 0.43%)</title><rect x="39.1847%" y="341" width="0.4274%" height="15" fill="rgb(238,205,33)" fg:x="1192" fg:w="13"/><text x="39.4347%" y="351.50"></text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="39.5135%" y="325" width="0.0986%" height="15" fill="rgb(231,56,7)" fg:x="1202" fg:w="3"/><text x="39.7635%" y="335.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="39.5792%" y="309" width="0.0329%" height="15" fill="rgb(244,186,29)" fg:x="1204" fg:w="1"/><text x="39.8292%" y="319.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (17 samples, 0.56%)</title><rect x="39.0861%" y="389" width="0.5588%" height="15" fill="rgb(234,111,31)" fg:x="1189" fg:w="17"/><text x="39.3361%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (16 samples, 0.53%)</title><rect x="39.1190%" y="373" width="0.5260%" height="15" fill="rgb(241,149,10)" fg:x="1190" fg:w="16"/><text x="39.3690%" y="383.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="39.6121%" y="357" width="0.0329%" height="15" fill="rgb(249,206,44)" fg:x="1205" fg:w="1"/><text x="39.8621%" y="367.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="39.6121%" y="341" width="0.0329%" height="15" fill="rgb(251,153,30)" fg:x="1205" fg:w="1"/><text x="39.8621%" y="351.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.66%)</title><rect x="39.0533%" y="405" width="0.6575%" height="15" fill="rgb(239,152,38)" fg:x="1188" fg:w="20"/><text x="39.3033%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="39.6450%" y="389" width="0.0657%" height="15" fill="rgb(249,139,47)" fg:x="1206" fg:w="2"/><text x="39.8950%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="39.8093%" y="389" width="0.0329%" height="15" fill="rgb(244,64,35)" fg:x="1211" fg:w="1"/><text x="40.0593%" y="399.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="39.8422%" y="389" width="0.0329%" height="15" fill="rgb(216,46,15)" fg:x="1212" fg:w="1"/><text x="40.0922%" y="399.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="39.8422%" y="373" width="0.0329%" height="15" fill="rgb(250,74,19)" fg:x="1212" fg:w="1"/><text x="40.0922%" y="383.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="39.8422%" y="357" width="0.0329%" height="15" fill="rgb(249,42,33)" fg:x="1212" fg:w="1"/><text x="40.0922%" y="367.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.23%)</title><rect x="39.7107%" y="405" width="0.2301%" height="15" fill="rgb(242,149,17)" fg:x="1208" fg:w="7"/><text x="39.9607%" y="415.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="39.8751%" y="389" width="0.0657%" height="15" fill="rgb(244,29,21)" fg:x="1213" fg:w="2"/><text x="40.1251%" y="399.50"></text></g><g><title>rust-gkat`Cudd_ReadLogicZero (1 samples, 0.03%)</title><rect x="39.9408%" y="405" width="0.0329%" height="15" fill="rgb(220,130,37)" fg:x="1215" fg:w="1"/><text x="40.1908%" y="415.50"></text></g><g><title>rust-gkat`Cudd_ReadOne (1 samples, 0.03%)</title><rect x="39.9737%" y="405" width="0.0329%" height="15" fill="rgb(211,67,2)" fg:x="1216" fg:w="1"/><text x="40.2237%" y="415.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="40.0066%" y="405" width="0.0657%" height="15" fill="rgb(235,68,52)" fg:x="1217" fg:w="2"/><text x="40.2566%" y="415.50"></text></g><g><title>rust-gkat`Cudd_Ref (3 samples, 0.10%)</title><rect x="40.0723%" y="405" width="0.0986%" height="15" fill="rgb(246,142,3)" fg:x="1219" fg:w="3"/><text x="40.3223%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="40.1709%" y="405" width="0.0657%" height="15" fill="rgb(241,25,7)" fg:x="1222" fg:w="2"/><text x="40.4209%" y="415.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="40.2367%" y="405" width="0.0329%" height="15" fill="rgb(242,119,39)" fg:x="1224" fg:w="1"/><text x="40.4867%" y="415.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="40.2367%" y="389" width="0.0329%" height="15" fill="rgb(241,98,45)" fg:x="1224" fg:w="1"/><text x="40.4867%" y="399.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="40.2367%" y="373" width="0.0329%" height="15" fill="rgb(254,28,30)" fg:x="1224" fg:w="1"/><text x="40.4867%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.07%)</title><rect x="40.4339%" y="389" width="0.0657%" height="15" fill="rgb(241,142,54)" fg:x="1230" fg:w="2"/><text x="40.6839%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="40.5654%" y="293" width="0.0329%" height="15" fill="rgb(222,85,15)" fg:x="1234" fg:w="1"/><text x="40.8154%" y="303.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="40.5654%" y="277" width="0.0329%" height="15" fill="rgb(210,85,47)" fg:x="1234" fg:w="1"/><text x="40.8154%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.5654%" y="325" width="0.0657%" height="15" fill="rgb(224,206,25)" fg:x="1234" fg:w="2"/><text x="40.8154%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.5654%" y="309" width="0.0657%" height="15" fill="rgb(243,201,19)" fg:x="1234" fg:w="2"/><text x="40.8154%" y="319.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="40.5983%" y="293" width="0.0329%" height="15" fill="rgb(236,59,4)" fg:x="1235" fg:w="1"/><text x="40.8483%" y="303.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.20%)</title><rect x="40.4997%" y="389" width="0.1972%" height="15" fill="rgb(254,179,45)" fg:x="1232" fg:w="6"/><text x="40.7497%" y="399.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (6 samples, 0.20%)</title><rect x="40.4997%" y="373" width="0.1972%" height="15" fill="rgb(226,14,10)" fg:x="1232" fg:w="6"/><text x="40.7497%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="40.5325%" y="357" width="0.1644%" height="15" fill="rgb(244,27,41)" fg:x="1233" fg:w="5"/><text x="40.7825%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="40.5654%" y="341" width="0.1315%" height="15" fill="rgb(235,35,32)" fg:x="1234" fg:w="4"/><text x="40.8154%" y="351.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="40.6312%" y="325" width="0.0657%" height="15" fill="rgb(218,68,31)" fg:x="1236" fg:w="2"/><text x="40.8812%" y="335.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.20%)</title><rect x="40.6969%" y="389" width="0.1972%" height="15" fill="rgb(207,120,37)" fg:x="1238" fg:w="6"/><text x="40.9469%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.07%)</title><rect x="40.8284%" y="373" width="0.0657%" height="15" fill="rgb(227,98,0)" fg:x="1242" fg:w="2"/><text x="41.0784%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="40.8941%" y="133" width="0.0329%" height="15" fill="rgb(207,7,3)" fg:x="1244" fg:w="1"/><text x="41.1441%" y="143.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="40.8941%" y="117" width="0.0329%" height="15" fill="rgb(206,98,19)" fg:x="1244" fg:w="1"/><text x="41.1441%" y="127.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="40.8941%" y="389" width="0.0657%" height="15" fill="rgb(217,5,26)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="399.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="40.8941%" y="373" width="0.0657%" height="15" fill="rgb(235,190,38)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="383.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="40.8941%" y="357" width="0.0657%" height="15" fill="rgb(247,86,24)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="341" width="0.0657%" height="15" fill="rgb(205,101,16)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="325" width="0.0657%" height="15" fill="rgb(246,168,33)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="309" width="0.0657%" height="15" fill="rgb(231,114,1)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="293" width="0.0657%" height="15" fill="rgb(207,184,53)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="277" width="0.0657%" height="15" fill="rgb(224,95,51)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="261" width="0.0657%" height="15" fill="rgb(212,188,45)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="245" width="0.0657%" height="15" fill="rgb(223,154,38)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="229" width="0.0657%" height="15" fill="rgb(251,22,52)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="213" width="0.0657%" height="15" fill="rgb(229,209,22)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="197" width="0.0657%" height="15" fill="rgb(234,138,34)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="181" width="0.0657%" height="15" fill="rgb(212,95,11)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="165" width="0.0657%" height="15" fill="rgb(240,179,47)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="40.8941%" y="149" width="0.0657%" height="15" fill="rgb(240,163,11)" fg:x="1244" fg:w="2"/><text x="41.1441%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="40.9270%" y="133" width="0.0329%" height="15" fill="rgb(236,37,12)" fg:x="1245" fg:w="1"/><text x="41.1770%" y="143.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (3 samples, 0.10%)</title><rect x="40.9599%" y="389" width="0.0986%" height="15" fill="rgb(232,164,16)" fg:x="1246" fg:w="3"/><text x="41.2099%" y="399.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="41.0585%" y="389" width="0.0329%" height="15" fill="rgb(244,205,15)" fg:x="1249" fg:w="1"/><text x="41.3085%" y="399.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="41.0914%" y="389" width="0.0329%" height="15" fill="rgb(223,117,47)" fg:x="1250" fg:w="1"/><text x="41.3414%" y="399.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="41.1243%" y="389" width="0.0657%" height="15" fill="rgb(244,107,35)" fg:x="1251" fg:w="2"/><text x="41.3743%" y="399.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="41.2558%" y="373" width="0.0329%" height="15" fill="rgb(205,140,8)" fg:x="1255" fg:w="1"/><text x="41.5058%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.3872%" y="245" width="0.0329%" height="15" fill="rgb(228,84,46)" fg:x="1259" fg:w="1"/><text x="41.6372%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.3872%" y="229" width="0.0329%" height="15" fill="rgb(254,188,9)" fg:x="1259" fg:w="1"/><text x="41.6372%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.3872%" y="213" width="0.0329%" height="15" fill="rgb(206,112,54)" fg:x="1259" fg:w="1"/><text x="41.6372%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.3872%" y="197" width="0.0329%" height="15" fill="rgb(216,84,49)" fg:x="1259" fg:w="1"/><text x="41.6372%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.3872%" y="181" width="0.0329%" height="15" fill="rgb(214,194,35)" fg:x="1259" fg:w="1"/><text x="41.6372%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="41.3872%" y="165" width="0.0329%" height="15" fill="rgb(249,28,3)" fg:x="1259" fg:w="1"/><text x="41.6372%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="41.3872%" y="261" width="0.0657%" height="15" fill="rgb(222,56,52)" fg:x="1259" fg:w="2"/><text x="41.6372%" y="271.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="41.4201%" y="245" width="0.0329%" height="15" fill="rgb(245,217,50)" fg:x="1260" fg:w="1"/><text x="41.6701%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="41.3872%" y="309" width="0.0986%" height="15" fill="rgb(213,201,24)" fg:x="1259" fg:w="3"/><text x="41.6372%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="41.3872%" y="293" width="0.0986%" height="15" fill="rgb(248,116,28)" fg:x="1259" fg:w="3"/><text x="41.6372%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="41.3872%" y="277" width="0.0986%" height="15" fill="rgb(219,72,43)" fg:x="1259" fg:w="3"/><text x="41.6372%" y="287.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="41.4530%" y="261" width="0.0329%" height="15" fill="rgb(209,138,14)" fg:x="1261" fg:w="1"/><text x="41.7030%" y="271.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="41.4530%" y="245" width="0.0329%" height="15" fill="rgb(222,18,33)" fg:x="1261" fg:w="1"/><text x="41.7030%" y="255.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (5 samples, 0.16%)</title><rect x="41.3544%" y="357" width="0.1644%" height="15" fill="rgb(213,199,7)" fg:x="1258" fg:w="5"/><text x="41.6044%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="41.3544%" y="341" width="0.1644%" height="15" fill="rgb(250,110,10)" fg:x="1258" fg:w="5"/><text x="41.6044%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="41.3872%" y="325" width="0.1315%" height="15" fill="rgb(248,123,6)" fg:x="1259" fg:w="4"/><text x="41.6372%" y="335.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="41.4859%" y="309" width="0.0329%" height="15" fill="rgb(206,91,31)" fg:x="1262" fg:w="1"/><text x="41.7359%" y="319.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.26%)</title><rect x="41.2886%" y="373" width="0.2630%" height="15" fill="rgb(211,154,13)" fg:x="1256" fg:w="8"/><text x="41.5386%" y="383.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="41.5187%" y="357" width="0.0329%" height="15" fill="rgb(225,148,7)" fg:x="1263" fg:w="1"/><text x="41.7687%" y="367.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.23%)</title><rect x="41.5516%" y="373" width="0.2301%" height="15" fill="rgb(220,160,43)" fg:x="1264" fg:w="7"/><text x="41.8016%" y="383.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (5 samples, 0.16%)</title><rect x="41.6174%" y="357" width="0.1644%" height="15" fill="rgb(213,52,39)" fg:x="1266" fg:w="5"/><text x="41.8674%" y="367.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="41.7817%" y="373" width="0.0329%" height="15" fill="rgb(243,137,7)" fg:x="1271" fg:w="1"/><text x="42.0317%" y="383.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="41.7817%" y="357" width="0.0329%" height="15" fill="rgb(230,79,13)" fg:x="1271" fg:w="1"/><text x="42.0317%" y="367.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="41.7817%" y="341" width="0.0329%" height="15" fill="rgb(247,105,23)" fg:x="1271" fg:w="1"/><text x="42.0317%" y="351.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="41.8146%" y="373" width="0.0657%" height="15" fill="rgb(223,179,41)" fg:x="1272" fg:w="2"/><text x="42.0646%" y="383.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.03%)</title><rect x="41.8803%" y="373" width="0.0329%" height="15" fill="rgb(218,9,34)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="383.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="41.8803%" y="357" width="0.0329%" height="15" fill="rgb(222,106,8)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="367.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="41.8803%" y="341" width="0.0329%" height="15" fill="rgb(211,220,0)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="325" width="0.0329%" height="15" fill="rgb(229,52,16)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="309" width="0.0329%" height="15" fill="rgb(212,155,18)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="293" width="0.0329%" height="15" fill="rgb(242,21,14)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="277" width="0.0329%" height="15" fill="rgb(222,19,48)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="261" width="0.0329%" height="15" fill="rgb(232,45,27)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="245" width="0.0329%" height="15" fill="rgb(249,103,42)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="229" width="0.0329%" height="15" fill="rgb(246,81,33)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="213" width="0.0329%" height="15" fill="rgb(252,33,42)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="197" width="0.0329%" height="15" fill="rgb(209,212,41)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="181" width="0.0329%" height="15" fill="rgb(207,154,6)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="165" width="0.0329%" height="15" fill="rgb(223,64,47)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="149" width="0.0329%" height="15" fill="rgb(211,161,38)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="41.8803%" y="133" width="0.0329%" height="15" fill="rgb(219,138,40)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="143.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="41.8803%" y="117" width="0.0329%" height="15" fill="rgb(241,228,46)" fg:x="1274" fg:w="1"/><text x="42.1303%" y="127.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="41.9132%" y="373" width="0.0657%" height="15" fill="rgb(223,209,38)" fg:x="1275" fg:w="2"/><text x="42.1632%" y="383.50"></text></g><g><title>rust-gkat`psm::stack_pointer (1 samples, 0.03%)</title><rect x="41.9790%" y="373" width="0.0329%" height="15" fill="rgb(236,164,45)" fg:x="1277" fg:w="1"/><text x="42.2290%" y="383.50"></text></g><g><title>rust-gkat`recursive::get_stack_allocation_size (1 samples, 0.03%)</title><rect x="42.0118%" y="373" width="0.0329%" height="15" fill="rgb(231,15,5)" fg:x="1278" fg:w="1"/><text x="42.2618%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.1762%" y="293" width="0.0329%" height="15" fill="rgb(252,35,15)" fg:x="1283" fg:w="1"/><text x="42.4262%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.1762%" y="277" width="0.0329%" height="15" fill="rgb(248,181,18)" fg:x="1283" fg:w="1"/><text x="42.4262%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.1762%" y="261" width="0.0329%" height="15" fill="rgb(233,39,42)" fg:x="1283" fg:w="1"/><text x="42.4262%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.1762%" y="245" width="0.0329%" height="15" fill="rgb(238,110,33)" fg:x="1283" fg:w="1"/><text x="42.4262%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.1762%" y="229" width="0.0329%" height="15" fill="rgb(233,195,10)" fg:x="1283" fg:w="1"/><text x="42.4262%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.1762%" y="213" width="0.0329%" height="15" fill="rgb(254,105,3)" fg:x="1283" fg:w="1"/><text x="42.4262%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.13%)</title><rect x="42.1105%" y="357" width="0.1315%" height="15" fill="rgb(221,225,9)" fg:x="1281" fg:w="4"/><text x="42.3605%" y="367.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="42.1762%" y="341" width="0.0657%" height="15" fill="rgb(224,227,45)" fg:x="1283" fg:w="2"/><text x="42.4262%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="42.1762%" y="325" width="0.0657%" height="15" fill="rgb(229,198,43)" fg:x="1283" fg:w="2"/><text x="42.4262%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="42.1762%" y="309" width="0.0657%" height="15" fill="rgb(206,209,35)" fg:x="1283" fg:w="2"/><text x="42.4262%" y="319.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.2091%" y="293" width="0.0329%" height="15" fill="rgb(245,195,53)" fg:x="1284" fg:w="1"/><text x="42.4591%" y="303.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="42.2419%" y="357" width="0.0329%" height="15" fill="rgb(240,92,26)" fg:x="1285" fg:w="1"/><text x="42.4919%" y="367.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="42.2748%" y="357" width="0.0329%" height="15" fill="rgb(207,40,23)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="367.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="42.2748%" y="341" width="0.0329%" height="15" fill="rgb(223,111,35)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="351.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="42.2748%" y="325" width="0.0329%" height="15" fill="rgb(229,147,28)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.2748%" y="309" width="0.0329%" height="15" fill="rgb(211,29,28)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.2748%" y="293" width="0.0329%" height="15" fill="rgb(228,72,33)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.2748%" y="277" width="0.0329%" height="15" fill="rgb(205,214,31)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.2748%" y="261" width="0.0329%" height="15" fill="rgb(224,111,15)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.2748%" y="245" width="0.0329%" height="15" fill="rgb(253,21,26)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.2748%" y="229" width="0.0329%" height="15" fill="rgb(245,139,43)" fg:x="1286" fg:w="1"/><text x="42.5248%" y="239.50"></text></g><g><title>rust-gkat`Cudd_Ref (2 samples, 0.07%)</title><rect x="42.3077%" y="357" width="0.0657%" height="15" fill="rgb(252,170,7)" fg:x="1287" fg:w="2"/><text x="42.5577%" y="367.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.03%)</title><rect x="42.3734%" y="357" width="0.0329%" height="15" fill="rgb(231,118,14)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="367.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="42.3734%" y="341" width="0.0329%" height="15" fill="rgb(238,83,0)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="351.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="42.3734%" y="325" width="0.0329%" height="15" fill="rgb(221,39,39)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="309" width="0.0329%" height="15" fill="rgb(222,119,46)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="293" width="0.0329%" height="15" fill="rgb(222,165,49)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="277" width="0.0329%" height="15" fill="rgb(219,113,52)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="261" width="0.0329%" height="15" fill="rgb(214,7,15)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="245" width="0.0329%" height="15" fill="rgb(235,32,4)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="229" width="0.0329%" height="15" fill="rgb(238,90,54)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="213" width="0.0329%" height="15" fill="rgb(213,208,19)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="197" width="0.0329%" height="15" fill="rgb(233,156,4)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="181" width="0.0329%" height="15" fill="rgb(207,194,5)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="165" width="0.0329%" height="15" fill="rgb(206,111,30)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="149" width="0.0329%" height="15" fill="rgb(243,70,54)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="133" width="0.0329%" height="15" fill="rgb(242,28,8)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="117" width="0.0329%" height="15" fill="rgb(219,106,18)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.3734%" y="101" width="0.0329%" height="15" fill="rgb(244,222,10)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="111.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.3734%" y="85" width="0.0329%" height="15" fill="rgb(236,179,52)" fg:x="1289" fg:w="1"/><text x="42.6234%" y="95.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.5378%" y="229" width="0.0329%" height="15" fill="rgb(213,23,39)" fg:x="1294" fg:w="1"/><text x="42.7878%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.5378%" y="213" width="0.0329%" height="15" fill="rgb(238,48,10)" fg:x="1294" fg:w="1"/><text x="42.7878%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.5378%" y="197" width="0.0329%" height="15" fill="rgb(251,196,23)" fg:x="1294" fg:w="1"/><text x="42.7878%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.5378%" y="181" width="0.0329%" height="15" fill="rgb(250,152,24)" fg:x="1294" fg:w="1"/><text x="42.7878%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="42.5378%" y="245" width="0.0986%" height="15" fill="rgb(209,150,17)" fg:x="1294" fg:w="3"/><text x="42.7878%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="42.5707%" y="229" width="0.0657%" height="15" fill="rgb(234,202,34)" fg:x="1295" fg:w="2"/><text x="42.8207%" y="239.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="42.6036%" y="213" width="0.0329%" height="15" fill="rgb(253,148,53)" fg:x="1296" fg:w="1"/><text x="42.8536%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="42.5378%" y="293" width="0.1315%" height="15" fill="rgb(218,129,16)" fg:x="1294" fg:w="4"/><text x="42.7878%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="42.5378%" y="277" width="0.1315%" height="15" fill="rgb(216,85,19)" fg:x="1294" fg:w="4"/><text x="42.7878%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="42.5378%" y="261" width="0.1315%" height="15" fill="rgb(235,228,7)" fg:x="1294" fg:w="4"/><text x="42.7878%" y="271.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.6364%" y="245" width="0.0329%" height="15" fill="rgb(245,175,0)" fg:x="1297" fg:w="1"/><text x="42.8864%" y="255.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="42.6364%" y="229" width="0.0329%" height="15" fill="rgb(208,168,36)" fg:x="1297" fg:w="1"/><text x="42.8864%" y="239.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.16%)</title><rect x="42.5378%" y="341" width="0.1644%" height="15" fill="rgb(246,171,24)" fg:x="1294" fg:w="5"/><text x="42.7878%" y="351.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (5 samples, 0.16%)</title><rect x="42.5378%" y="325" width="0.1644%" height="15" fill="rgb(215,142,24)" fg:x="1294" fg:w="5"/><text x="42.7878%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="42.5378%" y="309" width="0.1644%" height="15" fill="rgb(250,187,7)" fg:x="1294" fg:w="5"/><text x="42.7878%" y="319.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="42.6693%" y="293" width="0.0329%" height="15" fill="rgb(228,66,33)" fg:x="1298" fg:w="1"/><text x="42.9193%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="42.8337%" y="325" width="0.0329%" height="15" fill="rgb(234,215,21)" fg:x="1303" fg:w="1"/><text x="43.0837%" y="335.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.23%)</title><rect x="42.7022%" y="341" width="0.2301%" height="15" fill="rgb(222,191,20)" fg:x="1299" fg:w="7"/><text x="42.9522%" y="351.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="42.8665%" y="325" width="0.0657%" height="15" fill="rgb(245,79,54)" fg:x="1304" fg:w="2"/><text x="43.1165%" y="335.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="42.9323%" y="341" width="0.0329%" height="15" fill="rgb(240,10,37)" fg:x="1306" fg:w="1"/><text x="43.1823%" y="351.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="42.9323%" y="325" width="0.0329%" height="15" fill="rgb(214,192,32)" fg:x="1306" fg:w="1"/><text x="43.1823%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.9323%" y="309" width="0.0329%" height="15" fill="rgb(209,36,54)" fg:x="1306" fg:w="1"/><text x="43.1823%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="42.9323%" y="293" width="0.0329%" height="15" fill="rgb(220,10,11)" fg:x="1306" fg:w="1"/><text x="43.1823%" y="303.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="42.9323%" y="277" width="0.0329%" height="15" fill="rgb(221,106,17)" fg:x="1306" fg:w="1"/><text x="43.1823%" y="287.50"></text></g><g><title>rust-gkat`Cudd_ReadOne (1 samples, 0.03%)</title><rect x="42.9652%" y="341" width="0.0329%" height="15" fill="rgb(251,142,44)" fg:x="1307" fg:w="1"/><text x="43.2152%" y="351.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.03%)</title><rect x="42.9980%" y="341" width="0.0329%" height="15" fill="rgb(238,13,15)" fg:x="1308" fg:w="1"/><text x="43.2480%" y="351.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="42.9980%" y="325" width="0.0329%" height="15" fill="rgb(208,107,27)" fg:x="1308" fg:w="1"/><text x="43.2480%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="42.9980%" y="309" width="0.0329%" height="15" fill="rgb(205,136,37)" fg:x="1308" fg:w="1"/><text x="43.2480%" y="319.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="42.9980%" y="293" width="0.0329%" height="15" fill="rgb(250,205,27)" fg:x="1308" fg:w="1"/><text x="43.2480%" y="303.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="42.9980%" y="277" width="0.0329%" height="15" fill="rgb(210,80,43)" fg:x="1308" fg:w="1"/><text x="43.2480%" y="287.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="43.0309%" y="341" width="0.0329%" height="15" fill="rgb(247,160,36)" fg:x="1309" fg:w="1"/><text x="43.2809%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.1624%" y="165" width="0.0329%" height="15" fill="rgb(234,13,49)" fg:x="1313" fg:w="1"/><text x="43.4124%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.1624%" y="149" width="0.0329%" height="15" fill="rgb(234,122,0)" fg:x="1313" fg:w="1"/><text x="43.4124%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.1624%" y="133" width="0.0329%" height="15" fill="rgb(207,146,38)" fg:x="1313" fg:w="1"/><text x="43.4124%" y="143.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="43.1624%" y="117" width="0.0329%" height="15" fill="rgb(207,177,25)" fg:x="1313" fg:w="1"/><text x="43.4124%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.1624%" y="181" width="0.0657%" height="15" fill="rgb(211,178,42)" fg:x="1313" fg:w="2"/><text x="43.4124%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.1953%" y="165" width="0.0329%" height="15" fill="rgb(230,69,54)" fg:x="1314" fg:w="1"/><text x="43.4453%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.1624%" y="213" width="0.0986%" height="15" fill="rgb(214,135,41)" fg:x="1313" fg:w="3"/><text x="43.4124%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.1624%" y="197" width="0.0986%" height="15" fill="rgb(237,67,25)" fg:x="1313" fg:w="3"/><text x="43.4124%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="43.2281%" y="181" width="0.0329%" height="15" fill="rgb(222,189,50)" fg:x="1315" fg:w="1"/><text x="43.4781%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.1624%" y="261" width="0.1315%" height="15" fill="rgb(245,148,34)" fg:x="1313" fg:w="4"/><text x="43.4124%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.1624%" y="245" width="0.1315%" height="15" fill="rgb(222,29,6)" fg:x="1313" fg:w="4"/><text x="43.4124%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.1624%" y="229" width="0.1315%" height="15" fill="rgb(221,189,43)" fg:x="1313" fg:w="4"/><text x="43.4124%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.2610%" y="213" width="0.0329%" height="15" fill="rgb(207,36,27)" fg:x="1316" fg:w="1"/><text x="43.5110%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.16%)</title><rect x="43.1624%" y="325" width="0.1644%" height="15" fill="rgb(217,90,24)" fg:x="1313" fg:w="5"/><text x="43.4124%" y="335.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (5 samples, 0.16%)</title><rect x="43.1624%" y="309" width="0.1644%" height="15" fill="rgb(224,66,35)" fg:x="1313" fg:w="5"/><text x="43.4124%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="43.1624%" y="293" width="0.1644%" height="15" fill="rgb(221,13,50)" fg:x="1313" fg:w="5"/><text x="43.4124%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="43.1624%" y="277" width="0.1644%" height="15" fill="rgb(236,68,49)" fg:x="1313" fg:w="5"/><text x="43.4124%" y="287.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.2939%" y="261" width="0.0329%" height="15" fill="rgb(229,146,28)" fg:x="1317" fg:w="1"/><text x="43.5439%" y="271.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="43.2939%" y="245" width="0.0329%" height="15" fill="rgb(225,31,38)" fg:x="1317" fg:w="1"/><text x="43.5439%" y="255.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="43.3268%" y="325" width="0.0329%" height="15" fill="rgb(250,208,3)" fg:x="1318" fg:w="1"/><text x="43.5768%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="245" width="0.0329%" height="15" fill="rgb(246,54,23)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="229" width="0.0329%" height="15" fill="rgb(243,76,11)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="213" width="0.0329%" height="15" fill="rgb(245,21,50)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="197" width="0.0329%" height="15" fill="rgb(228,9,43)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="181" width="0.0329%" height="15" fill="rgb(208,100,47)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="165" width="0.0329%" height="15" fill="rgb(232,26,8)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="149" width="0.0329%" height="15" fill="rgb(216,166,38)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="133" width="0.0329%" height="15" fill="rgb(251,202,51)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.3596%" y="117" width="0.0329%" height="15" fill="rgb(254,216,34)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="127.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="43.3596%" y="101" width="0.0329%" height="15" fill="rgb(251,32,27)" fg:x="1319" fg:w="1"/><text x="43.6096%" y="111.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="43.3596%" y="325" width="0.0657%" height="15" fill="rgb(208,127,28)" fg:x="1319" fg:w="2"/><text x="43.6096%" y="335.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="43.3596%" y="309" width="0.0657%" height="15" fill="rgb(224,137,22)" fg:x="1319" fg:w="2"/><text x="43.6096%" y="319.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="43.3596%" y="293" width="0.0657%" height="15" fill="rgb(254,70,32)" fg:x="1319" fg:w="2"/><text x="43.6096%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.3596%" y="277" width="0.0657%" height="15" fill="rgb(229,75,37)" fg:x="1319" fg:w="2"/><text x="43.6096%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.3596%" y="261" width="0.0657%" height="15" fill="rgb(252,64,23)" fg:x="1319" fg:w="2"/><text x="43.6096%" y="271.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.3925%" y="245" width="0.0329%" height="15" fill="rgb(232,162,48)" fg:x="1320" fg:w="1"/><text x="43.6425%" y="255.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="43.3925%" y="229" width="0.0329%" height="15" fill="rgb(246,160,12)" fg:x="1320" fg:w="1"/><text x="43.6425%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="43.4583%" y="309" width="0.0329%" height="15" fill="rgb(247,166,0)" fg:x="1322" fg:w="1"/><text x="43.7083%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.4911%" y="213" width="0.0657%" height="15" fill="rgb(249,219,21)" fg:x="1323" fg:w="2"/><text x="43.7411%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.4911%" y="197" width="0.0657%" height="15" fill="rgb(205,209,3)" fg:x="1323" fg:w="2"/><text x="43.7411%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.5240%" y="181" width="0.0329%" height="15" fill="rgb(243,44,1)" fg:x="1324" fg:w="1"/><text x="43.7740%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.4911%" y="229" width="0.0986%" height="15" fill="rgb(206,159,16)" fg:x="1323" fg:w="3"/><text x="43.7411%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.5569%" y="213" width="0.0329%" height="15" fill="rgb(244,77,30)" fg:x="1325" fg:w="1"/><text x="43.8069%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.13%)</title><rect x="43.4911%" y="309" width="0.1315%" height="15" fill="rgb(218,69,12)" fg:x="1323" fg:w="4"/><text x="43.7411%" y="319.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (4 samples, 0.13%)</title><rect x="43.4911%" y="293" width="0.1315%" height="15" fill="rgb(212,87,7)" fg:x="1323" fg:w="4"/><text x="43.7411%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.4911%" y="277" width="0.1315%" height="15" fill="rgb(245,114,25)" fg:x="1323" fg:w="4"/><text x="43.7411%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.4911%" y="261" width="0.1315%" height="15" fill="rgb(210,61,42)" fg:x="1323" fg:w="4"/><text x="43.7411%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.4911%" y="245" width="0.1315%" height="15" fill="rgb(211,52,33)" fg:x="1323" fg:w="4"/><text x="43.7411%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.5897%" y="229" width="0.0329%" height="15" fill="rgb(234,58,33)" fg:x="1326" fg:w="1"/><text x="43.8397%" y="239.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="43.6226%" y="309" width="0.0329%" height="15" fill="rgb(220,115,36)" fg:x="1327" fg:w="1"/><text x="43.8726%" y="319.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="43.6226%" y="293" width="0.0329%" height="15" fill="rgb(243,153,54)" fg:x="1327" fg:w="1"/><text x="43.8726%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.6555%" y="213" width="0.0657%" height="15" fill="rgb(251,47,18)" fg:x="1328" fg:w="2"/><text x="43.9055%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="43.6555%" y="197" width="0.0657%" height="15" fill="rgb(242,102,42)" fg:x="1328" fg:w="2"/><text x="43.9055%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="43.6555%" y="181" width="0.0657%" height="15" fill="rgb(234,31,38)" fg:x="1328" fg:w="2"/><text x="43.9055%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.6555%" y="229" width="0.0986%" height="15" fill="rgb(221,117,51)" fg:x="1328" fg:w="3"/><text x="43.9055%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.7212%" y="213" width="0.0329%" height="15" fill="rgb(212,20,18)" fg:x="1330" fg:w="1"/><text x="43.9712%" y="223.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="43.7212%" y="197" width="0.0329%" height="15" fill="rgb(245,133,36)" fg:x="1330" fg:w="1"/><text x="43.9712%" y="207.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.13%)</title><rect x="43.6555%" y="293" width="0.1315%" height="15" fill="rgb(212,6,19)" fg:x="1328" fg:w="4"/><text x="43.9055%" y="303.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (4 samples, 0.13%)</title><rect x="43.6555%" y="277" width="0.1315%" height="15" fill="rgb(218,1,36)" fg:x="1328" fg:w="4"/><text x="43.9055%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.6555%" y="261" width="0.1315%" height="15" fill="rgb(246,84,54)" fg:x="1328" fg:w="4"/><text x="43.9055%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="43.6555%" y="245" width="0.1315%" height="15" fill="rgb(242,110,6)" fg:x="1328" fg:w="4"/><text x="43.9055%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="43.7541%" y="229" width="0.0329%" height="15" fill="rgb(214,47,5)" fg:x="1331" fg:w="1"/><text x="44.0041%" y="239.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.16%)</title><rect x="43.6555%" y="309" width="0.1644%" height="15" fill="rgb(218,159,25)" fg:x="1328" fg:w="5"/><text x="43.9055%" y="319.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="43.7870%" y="293" width="0.0329%" height="15" fill="rgb(215,211,28)" fg:x="1332" fg:w="1"/><text x="44.0370%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.7870%" y="277" width="0.0329%" height="15" fill="rgb(238,59,32)" fg:x="1332" fg:w="1"/><text x="44.0370%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.7870%" y="261" width="0.0329%" height="15" fill="rgb(226,82,3)" fg:x="1332" fg:w="1"/><text x="44.0370%" y="271.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="43.7870%" y="245" width="0.0329%" height="15" fill="rgb(240,164,32)" fg:x="1332" fg:w="1"/><text x="44.0370%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="43.8199%" y="197" width="0.0329%" height="15" fill="rgb(232,46,7)" fg:x="1333" fg:w="1"/><text x="44.0699%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="43.8199%" y="181" width="0.0329%" height="15" fill="rgb(229,129,53)" fg:x="1333" fg:w="1"/><text x="44.0699%" y="191.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="43.8199%" y="277" width="0.0986%" height="15" fill="rgb(234,188,29)" fg:x="1333" fg:w="3"/><text x="44.0699%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.8199%" y="261" width="0.0986%" height="15" fill="rgb(246,141,4)" fg:x="1333" fg:w="3"/><text x="44.0699%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.8199%" y="245" width="0.0986%" height="15" fill="rgb(229,23,39)" fg:x="1333" fg:w="3"/><text x="44.0699%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.8199%" y="229" width="0.0986%" height="15" fill="rgb(206,12,3)" fg:x="1333" fg:w="3"/><text x="44.0699%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="43.8199%" y="213" width="0.0986%" height="15" fill="rgb(252,226,20)" fg:x="1333" fg:w="3"/><text x="44.0699%" y="223.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="43.8527%" y="197" width="0.0657%" height="15" fill="rgb(216,123,35)" fg:x="1334" fg:w="2"/><text x="44.1027%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheResize (2 samples, 0.07%)</title><rect x="43.8527%" y="181" width="0.0657%" height="15" fill="rgb(212,68,40)" fg:x="1334" fg:w="2"/><text x="44.1027%" y="191.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (4 samples, 0.13%)</title><rect x="43.8199%" y="309" width="0.1315%" height="15" fill="rgb(254,125,32)" fg:x="1333" fg:w="4"/><text x="44.0699%" y="319.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.13%)</title><rect x="43.8199%" y="293" width="0.1315%" height="15" fill="rgb(253,97,22)" fg:x="1333" fg:w="4"/><text x="44.0699%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="43.9185%" y="277" width="0.0329%" height="15" fill="rgb(241,101,14)" fg:x="1336" fg:w="1"/><text x="44.1685%" y="287.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="43.9185%" y="261" width="0.0329%" height="15" fill="rgb(238,103,29)" fg:x="1336" fg:w="1"/><text x="44.1685%" y="271.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="44.0500%" y="293" width="0.0657%" height="15" fill="rgb(233,195,47)" fg:x="1340" fg:w="2"/><text x="44.3000%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.1486%" y="197" width="0.0329%" height="15" fill="rgb(246,218,30)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.1486%" y="181" width="0.0329%" height="15" fill="rgb(219,145,47)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.1486%" y="165" width="0.0329%" height="15" fill="rgb(243,12,26)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.1486%" y="149" width="0.0329%" height="15" fill="rgb(214,87,16)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.1486%" y="133" width="0.0329%" height="15" fill="rgb(208,99,42)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.1486%" y="117" width="0.0329%" height="15" fill="rgb(253,99,2)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="127.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.1486%" y="101" width="0.0329%" height="15" fill="rgb(220,168,23)" fg:x="1343" fg:w="1"/><text x="44.3986%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="44.1486%" y="213" width="0.0986%" height="15" fill="rgb(242,38,24)" fg:x="1343" fg:w="3"/><text x="44.3986%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="44.1815%" y="197" width="0.0657%" height="15" fill="rgb(225,182,9)" fg:x="1344" fg:w="2"/><text x="44.4315%" y="207.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="44.2143%" y="181" width="0.0329%" height="15" fill="rgb(243,178,37)" fg:x="1345" fg:w="1"/><text x="44.4643%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="44.1486%" y="229" width="0.1644%" height="15" fill="rgb(232,139,19)" fg:x="1343" fg:w="5"/><text x="44.3986%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="44.2472%" y="213" width="0.0657%" height="15" fill="rgb(225,201,24)" fg:x="1346" fg:w="2"/><text x="44.4972%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="44.1486%" y="245" width="0.1972%" height="15" fill="rgb(221,47,46)" fg:x="1343" fg:w="6"/><text x="44.3986%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.3130%" y="229" width="0.0329%" height="15" fill="rgb(249,23,13)" fg:x="1348" fg:w="1"/><text x="44.5630%" y="239.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.30%)</title><rect x="44.1157%" y="293" width="0.2959%" height="15" fill="rgb(219,9,5)" fg:x="1342" fg:w="9"/><text x="44.3657%" y="303.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (9 samples, 0.30%)</title><rect x="44.1157%" y="277" width="0.2959%" height="15" fill="rgb(254,171,16)" fg:x="1342" fg:w="9"/><text x="44.3657%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (8 samples, 0.26%)</title><rect x="44.1486%" y="261" width="0.2630%" height="15" fill="rgb(230,171,20)" fg:x="1343" fg:w="8"/><text x="44.3986%" y="271.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="44.3458%" y="245" width="0.0657%" height="15" fill="rgb(210,71,41)" fg:x="1349" fg:w="2"/><text x="44.5958%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="229" width="0.0329%" height="15" fill="rgb(206,173,20)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="213" width="0.0329%" height="15" fill="rgb(233,88,34)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="197" width="0.0329%" height="15" fill="rgb(223,209,46)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="181" width="0.0329%" height="15" fill="rgb(250,43,18)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="165" width="0.0329%" height="15" fill="rgb(208,13,10)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="149" width="0.0329%" height="15" fill="rgb(212,200,36)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="133" width="0.0329%" height="15" fill="rgb(225,90,30)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="117" width="0.0329%" height="15" fill="rgb(236,182,39)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.4116%" y="101" width="0.0329%" height="15" fill="rgb(212,144,35)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="111.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="44.4116%" y="85" width="0.0329%" height="15" fill="rgb(228,63,44)" fg:x="1351" fg:w="1"/><text x="44.6616%" y="95.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.10%)</title><rect x="44.4116%" y="277" width="0.0986%" height="15" fill="rgb(228,109,6)" fg:x="1351" fg:w="3"/><text x="44.6616%" y="287.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="44.4116%" y="261" width="0.0986%" height="15" fill="rgb(238,117,24)" fg:x="1351" fg:w="3"/><text x="44.6616%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="44.4116%" y="245" width="0.0986%" height="15" fill="rgb(242,26,26)" fg:x="1351" fg:w="3"/><text x="44.6616%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="44.4444%" y="229" width="0.0657%" height="15" fill="rgb(221,92,48)" fg:x="1352" fg:w="2"/><text x="44.6944%" y="239.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="44.4773%" y="213" width="0.0329%" height="15" fill="rgb(209,209,32)" fg:x="1353" fg:w="1"/><text x="44.7273%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.13%)</title><rect x="44.4116%" y="293" width="0.1315%" height="15" fill="rgb(221,70,22)" fg:x="1351" fg:w="4"/><text x="44.6616%" y="303.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="44.5102%" y="277" width="0.0329%" height="15" fill="rgb(248,145,5)" fg:x="1354" fg:w="1"/><text x="44.7602%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.5102%" y="261" width="0.0329%" height="15" fill="rgb(226,116,26)" fg:x="1354" fg:w="1"/><text x="44.7602%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.5102%" y="245" width="0.0329%" height="15" fill="rgb(244,5,17)" fg:x="1354" fg:w="1"/><text x="44.7602%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.5102%" y="229" width="0.0329%" height="15" fill="rgb(252,159,33)" fg:x="1354" fg:w="1"/><text x="44.7602%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.5102%" y="213" width="0.0329%" height="15" fill="rgb(206,71,0)" fg:x="1354" fg:w="1"/><text x="44.7602%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.5102%" y="197" width="0.0329%" height="15" fill="rgb(233,118,54)" fg:x="1354" fg:w="1"/><text x="44.7602%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.5431%" y="245" width="0.0329%" height="15" fill="rgb(234,83,48)" fg:x="1355" fg:w="1"/><text x="44.7931%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.5431%" y="229" width="0.0329%" height="15" fill="rgb(228,3,54)" fg:x="1355" fg:w="1"/><text x="44.7931%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.5431%" y="213" width="0.0329%" height="15" fill="rgb(226,155,13)" fg:x="1355" fg:w="1"/><text x="44.7931%" y="223.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="44.5431%" y="197" width="0.0329%" height="15" fill="rgb(241,28,37)" fg:x="1355" fg:w="1"/><text x="44.7931%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="44.5431%" y="261" width="0.0657%" height="15" fill="rgb(233,93,10)" fg:x="1355" fg:w="2"/><text x="44.7931%" y="271.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="44.5759%" y="245" width="0.0329%" height="15" fill="rgb(225,113,19)" fg:x="1356" fg:w="1"/><text x="44.8259%" y="255.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (3 samples, 0.10%)</title><rect x="44.5431%" y="293" width="0.0986%" height="15" fill="rgb(241,2,18)" fg:x="1355" fg:w="3"/><text x="44.7931%" y="303.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.10%)</title><rect x="44.5431%" y="277" width="0.0986%" height="15" fill="rgb(228,207,21)" fg:x="1355" fg:w="3"/><text x="44.7931%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="44.6088%" y="261" width="0.0329%" height="15" fill="rgb(213,211,35)" fg:x="1357" fg:w="1"/><text x="44.8588%" y="271.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="44.6088%" y="245" width="0.0329%" height="15" fill="rgb(209,83,10)" fg:x="1357" fg:w="1"/><text x="44.8588%" y="255.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="44.6088%" y="229" width="0.0329%" height="15" fill="rgb(209,164,1)" fg:x="1357" fg:w="1"/><text x="44.8588%" y="239.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="44.6417%" y="293" width="0.0329%" height="15" fill="rgb(213,184,43)" fg:x="1358" fg:w="1"/><text x="44.8917%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.7732%" y="197" width="0.0329%" height="15" fill="rgb(231,61,34)" fg:x="1362" fg:w="1"/><text x="45.0232%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="44.7732%" y="213" width="0.0657%" height="15" fill="rgb(235,75,3)" fg:x="1362" fg:w="2"/><text x="45.0232%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.8060%" y="197" width="0.0329%" height="15" fill="rgb(220,106,47)" fg:x="1363" fg:w="1"/><text x="45.0560%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="44.8389%" y="213" width="0.0329%" height="15" fill="rgb(210,196,33)" fg:x="1364" fg:w="1"/><text x="45.0889%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.13%)</title><rect x="44.7732%" y="277" width="0.1315%" height="15" fill="rgb(229,154,42)" fg:x="1362" fg:w="4"/><text x="45.0232%" y="287.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (4 samples, 0.13%)</title><rect x="44.7732%" y="261" width="0.1315%" height="15" fill="rgb(228,114,26)" fg:x="1362" fg:w="4"/><text x="45.0232%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="44.7732%" y="245" width="0.1315%" height="15" fill="rgb(208,144,1)" fg:x="1362" fg:w="4"/><text x="45.0232%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="44.7732%" y="229" width="0.1315%" height="15" fill="rgb(239,112,37)" fg:x="1362" fg:w="4"/><text x="45.0232%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.8718%" y="213" width="0.0329%" height="15" fill="rgb(210,96,50)" fg:x="1365" fg:w="1"/><text x="45.1218%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="44.9047%" y="277" width="0.0329%" height="15" fill="rgb(222,178,2)" fg:x="1366" fg:w="1"/><text x="45.1547%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="44.9047%" y="261" width="0.0329%" height="15" fill="rgb(226,74,18)" fg:x="1366" fg:w="1"/><text x="45.1547%" y="271.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="44.9375%" y="261" width="0.0329%" height="15" fill="rgb(225,67,54)" fg:x="1367" fg:w="1"/><text x="45.1875%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="44.9375%" y="245" width="0.0329%" height="15" fill="rgb(251,92,32)" fg:x="1367" fg:w="1"/><text x="45.1875%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9375%" y="229" width="0.0329%" height="15" fill="rgb(228,149,22)" fg:x="1367" fg:w="1"/><text x="45.1875%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9375%" y="213" width="0.0329%" height="15" fill="rgb(243,54,13)" fg:x="1367" fg:w="1"/><text x="45.1875%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9375%" y="197" width="0.0329%" height="15" fill="rgb(243,180,28)" fg:x="1367" fg:w="1"/><text x="45.1875%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="44.9375%" y="181" width="0.0329%" height="15" fill="rgb(208,167,24)" fg:x="1367" fg:w="1"/><text x="45.1875%" y="191.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="44.9375%" y="277" width="0.0657%" height="15" fill="rgb(245,73,45)" fg:x="1367" fg:w="2"/><text x="45.1875%" y="287.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="44.9704%" y="261" width="0.0329%" height="15" fill="rgb(237,203,48)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9704%" y="245" width="0.0329%" height="15" fill="rgb(211,197,16)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9704%" y="229" width="0.0329%" height="15" fill="rgb(243,99,51)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9704%" y="213" width="0.0329%" height="15" fill="rgb(215,123,29)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9704%" y="197" width="0.0329%" height="15" fill="rgb(239,186,37)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="44.9704%" y="181" width="0.0329%" height="15" fill="rgb(252,136,39)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="44.9704%" y="165" width="0.0329%" height="15" fill="rgb(223,213,32)" fg:x="1368" fg:w="1"/><text x="45.2204%" y="175.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="45.0033%" y="277" width="0.0329%" height="15" fill="rgb(233,115,5)" fg:x="1369" fg:w="1"/><text x="45.2533%" y="287.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="45.0362%" y="277" width="0.0329%" height="15" fill="rgb(207,226,44)" fg:x="1370" fg:w="1"/><text x="45.2862%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.0690%" y="213" width="0.0329%" height="15" fill="rgb(208,126,0)" fg:x="1371" fg:w="1"/><text x="45.3190%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.0690%" y="197" width="0.0329%" height="15" fill="rgb(244,66,21)" fg:x="1371" fg:w="1"/><text x="45.3190%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="45.0690%" y="245" width="0.0657%" height="15" fill="rgb(222,97,12)" fg:x="1371" fg:w="2"/><text x="45.3190%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.0690%" y="229" width="0.0657%" height="15" fill="rgb(219,213,19)" fg:x="1371" fg:w="2"/><text x="45.3190%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.1019%" y="213" width="0.0329%" height="15" fill="rgb(252,169,30)" fg:x="1372" fg:w="1"/><text x="45.3519%" y="223.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (4 samples, 0.13%)</title><rect x="45.0690%" y="277" width="0.1315%" height="15" fill="rgb(206,32,51)" fg:x="1371" fg:w="4"/><text x="45.3190%" y="287.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.13%)</title><rect x="45.0690%" y="261" width="0.1315%" height="15" fill="rgb(250,172,42)" fg:x="1371" fg:w="4"/><text x="45.3190%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (2 samples, 0.07%)</title><rect x="45.1348%" y="245" width="0.0657%" height="15" fill="rgb(209,34,43)" fg:x="1373" fg:w="2"/><text x="45.3848%" y="255.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="45.1348%" y="229" width="0.0657%" height="15" fill="rgb(223,11,35)" fg:x="1373" fg:w="2"/><text x="45.3848%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="45.1348%" y="213" width="0.0657%" height="15" fill="rgb(251,219,26)" fg:x="1373" fg:w="2"/><text x="45.3848%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="45.2005%" y="277" width="0.0329%" height="15" fill="rgb(231,119,3)" fg:x="1375" fg:w="1"/><text x="45.4505%" y="287.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="45.2334%" y="277" width="0.0329%" height="15" fill="rgb(216,97,11)" fg:x="1376" fg:w="1"/><text x="45.4834%" y="287.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="45.3978%" y="261" width="0.0329%" height="15" fill="rgb(223,59,9)" fg:x="1381" fg:w="1"/><text x="45.6478%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.4635%" y="165" width="0.0329%" height="15" fill="rgb(233,93,31)" fg:x="1383" fg:w="1"/><text x="45.7135%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.4635%" y="149" width="0.0329%" height="15" fill="rgb(239,81,33)" fg:x="1383" fg:w="1"/><text x="45.7135%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.4635%" y="133" width="0.0329%" height="15" fill="rgb(213,120,34)" fg:x="1383" fg:w="1"/><text x="45.7135%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.4635%" y="197" width="0.0657%" height="15" fill="rgb(243,49,53)" fg:x="1383" fg:w="2"/><text x="45.7135%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.4635%" y="181" width="0.0657%" height="15" fill="rgb(247,216,33)" fg:x="1383" fg:w="2"/><text x="45.7135%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.4964%" y="165" width="0.0329%" height="15" fill="rgb(226,26,14)" fg:x="1384" fg:w="1"/><text x="45.7464%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="45.4635%" y="213" width="0.0986%" height="15" fill="rgb(215,49,53)" fg:x="1383" fg:w="3"/><text x="45.7135%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.5293%" y="197" width="0.0329%" height="15" fill="rgb(245,162,40)" fg:x="1385" fg:w="1"/><text x="45.7793%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="45.5621%" y="213" width="0.0329%" height="15" fill="rgb(229,68,17)" fg:x="1386" fg:w="1"/><text x="45.8121%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="45.4306%" y="229" width="0.1972%" height="15" fill="rgb(213,182,10)" fg:x="1382" fg:w="6"/><text x="45.6806%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.5950%" y="213" width="0.0329%" height="15" fill="rgb(245,125,30)" fg:x="1387" fg:w="1"/><text x="45.8450%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.23%)</title><rect x="45.4306%" y="261" width="0.2301%" height="15" fill="rgb(232,202,2)" fg:x="1382" fg:w="7"/><text x="45.6806%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (7 samples, 0.23%)</title><rect x="45.4306%" y="245" width="0.2301%" height="15" fill="rgb(237,140,51)" fg:x="1382" fg:w="7"/><text x="45.6806%" y="255.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="45.6279%" y="229" width="0.0329%" height="15" fill="rgb(236,157,25)" fg:x="1388" fg:w="1"/><text x="45.8779%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.6936%" y="165" width="0.0329%" height="15" fill="rgb(219,209,0)" fg:x="1390" fg:w="1"/><text x="45.9436%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.6936%" y="149" width="0.0329%" height="15" fill="rgb(240,116,54)" fg:x="1390" fg:w="1"/><text x="45.9436%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.6936%" y="133" width="0.0329%" height="15" fill="rgb(216,10,36)" fg:x="1390" fg:w="1"/><text x="45.9436%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.6936%" y="117" width="0.0329%" height="15" fill="rgb(222,72,44)" fg:x="1390" fg:w="1"/><text x="45.9436%" y="127.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.6936%" y="101" width="0.0329%" height="15" fill="rgb(232,159,9)" fg:x="1390" fg:w="1"/><text x="45.9436%" y="111.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="45.6936%" y="245" width="0.0657%" height="15" fill="rgb(210,39,32)" fg:x="1390" fg:w="2"/><text x="45.9436%" y="255.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="45.6936%" y="229" width="0.0657%" height="15" fill="rgb(216,194,45)" fg:x="1390" fg:w="2"/><text x="45.9436%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.6936%" y="213" width="0.0657%" height="15" fill="rgb(218,18,35)" fg:x="1390" fg:w="2"/><text x="45.9436%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.6936%" y="197" width="0.0657%" height="15" fill="rgb(207,83,51)" fg:x="1390" fg:w="2"/><text x="45.9436%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.6936%" y="181" width="0.0657%" height="15" fill="rgb(225,63,43)" fg:x="1390" fg:w="2"/><text x="45.9436%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="45.7265%" y="165" width="0.0329%" height="15" fill="rgb(207,57,36)" fg:x="1391" fg:w="1"/><text x="45.9765%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.7922%" y="213" width="0.0657%" height="15" fill="rgb(216,99,33)" fg:x="1393" fg:w="2"/><text x="46.0422%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="45.7922%" y="197" width="0.0657%" height="15" fill="rgb(225,42,16)" fg:x="1393" fg:w="2"/><text x="46.0422%" y="207.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.23%)</title><rect x="45.6607%" y="261" width="0.2301%" height="15" fill="rgb(220,201,45)" fg:x="1389" fg:w="7"/><text x="45.9107%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (4 samples, 0.13%)</title><rect x="45.7594%" y="245" width="0.1315%" height="15" fill="rgb(225,33,4)" fg:x="1392" fg:w="4"/><text x="46.0094%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="45.7594%" y="229" width="0.1315%" height="15" fill="rgb(224,33,50)" fg:x="1392" fg:w="4"/><text x="46.0094%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.8580%" y="213" width="0.0329%" height="15" fill="rgb(246,198,51)" fg:x="1395" fg:w="1"/><text x="46.1080%" y="223.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="45.8909%" y="261" width="0.0329%" height="15" fill="rgb(205,22,4)" fg:x="1396" fg:w="1"/><text x="46.1409%" y="271.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="45.9237%" y="261" width="0.0329%" height="15" fill="rgb(206,3,8)" fg:x="1397" fg:w="1"/><text x="46.1737%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.9566%" y="149" width="0.0329%" height="15" fill="rgb(251,23,15)" fg:x="1398" fg:w="1"/><text x="46.2066%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.9566%" y="133" width="0.0329%" height="15" fill="rgb(252,88,28)" fg:x="1398" fg:w="1"/><text x="46.2066%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="45.9566%" y="117" width="0.0329%" height="15" fill="rgb(212,127,14)" fg:x="1398" fg:w="1"/><text x="46.2066%" y="127.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="45.9566%" y="101" width="0.0329%" height="15" fill="rgb(247,145,37)" fg:x="1398" fg:w="1"/><text x="46.2066%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.9566%" y="197" width="0.0657%" height="15" fill="rgb(209,117,53)" fg:x="1398" fg:w="2"/><text x="46.2066%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.9566%" y="181" width="0.0657%" height="15" fill="rgb(212,90,42)" fg:x="1398" fg:w="2"/><text x="46.2066%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="45.9566%" y="165" width="0.0657%" height="15" fill="rgb(218,164,37)" fg:x="1398" fg:w="2"/><text x="46.2066%" y="175.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="45.9895%" y="149" width="0.0329%" height="15" fill="rgb(246,65,34)" fg:x="1399" fg:w="1"/><text x="46.2395%" y="159.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="46.0224%" y="197" width="0.0329%" height="15" fill="rgb(231,100,33)" fg:x="1400" fg:w="1"/><text x="46.2724%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (4 samples, 0.13%)</title><rect x="45.9566%" y="229" width="0.1315%" height="15" fill="rgb(228,126,14)" fg:x="1398" fg:w="4"/><text x="46.2066%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="45.9566%" y="213" width="0.1315%" height="15" fill="rgb(215,173,21)" fg:x="1398" fg:w="4"/><text x="46.2066%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="46.0552%" y="197" width="0.0329%" height="15" fill="rgb(210,6,40)" fg:x="1401" fg:w="1"/><text x="46.3052%" y="207.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (5 samples, 0.16%)</title><rect x="45.9566%" y="261" width="0.1644%" height="15" fill="rgb(212,48,18)" fg:x="1398" fg:w="5"/><text x="46.2066%" y="271.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.16%)</title><rect x="45.9566%" y="245" width="0.1644%" height="15" fill="rgb(230,214,11)" fg:x="1398" fg:w="5"/><text x="46.2066%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="46.0881%" y="229" width="0.0329%" height="15" fill="rgb(254,105,39)" fg:x="1402" fg:w="1"/><text x="46.3381%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="46.0881%" y="213" width="0.0329%" height="15" fill="rgb(245,158,5)" fg:x="1402" fg:w="1"/><text x="46.3381%" y="223.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="46.0881%" y="197" width="0.0329%" height="15" fill="rgb(249,208,11)" fg:x="1402" fg:w="1"/><text x="46.3381%" y="207.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="46.1210%" y="261" width="0.1315%" height="15" fill="rgb(210,39,28)" fg:x="1403" fg:w="4"/><text x="46.3710%" y="271.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.07%)</title><rect x="46.1867%" y="245" width="0.0657%" height="15" fill="rgb(211,56,53)" fg:x="1405" fg:w="2"/><text x="46.4367%" y="255.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="46.2525%" y="261" width="0.0329%" height="15" fill="rgb(226,201,30)" fg:x="1407" fg:w="1"/><text x="46.5025%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="46.4826%" y="245" width="0.0329%" height="15" fill="rgb(239,101,34)" fg:x="1414" fg:w="1"/><text x="46.7326%" y="255.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 0.13%)</title><rect x="46.5155%" y="245" width="0.1315%" height="15" fill="rgb(226,209,5)" fg:x="1415" fg:w="4"/><text x="46.7655%" y="255.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="46.7127%" y="133" width="0.0329%" height="15" fill="rgb(250,105,47)" fg:x="1421" fg:w="1"/><text x="46.9627%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="46.7127%" y="165" width="0.0657%" height="15" fill="rgb(230,72,3)" fg:x="1421" fg:w="2"/><text x="46.9627%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="46.7127%" y="149" width="0.0657%" height="15" fill="rgb(232,218,39)" fg:x="1421" fg:w="2"/><text x="46.9627%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="46.7456%" y="133" width="0.0329%" height="15" fill="rgb(248,166,6)" fg:x="1422" fg:w="1"/><text x="46.9956%" y="143.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="46.7784%" y="165" width="0.0329%" height="15" fill="rgb(247,89,20)" fg:x="1423" fg:w="1"/><text x="47.0284%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (5 samples, 0.16%)</title><rect x="46.7127%" y="181" width="0.1644%" height="15" fill="rgb(248,130,54)" fg:x="1421" fg:w="5"/><text x="46.9627%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="46.8113%" y="165" width="0.0657%" height="15" fill="rgb(234,196,4)" fg:x="1424" fg:w="2"/><text x="47.0613%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.26%)</title><rect x="46.6469%" y="245" width="0.2630%" height="15" fill="rgb(250,143,31)" fg:x="1419" fg:w="8"/><text x="46.8969%" y="255.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (7 samples, 0.23%)</title><rect x="46.6798%" y="229" width="0.2301%" height="15" fill="rgb(211,110,34)" fg:x="1420" fg:w="7"/><text x="46.9298%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (7 samples, 0.23%)</title><rect x="46.6798%" y="213" width="0.2301%" height="15" fill="rgb(215,124,48)" fg:x="1420" fg:w="7"/><text x="46.9298%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (7 samples, 0.23%)</title><rect x="46.6798%" y="197" width="0.2301%" height="15" fill="rgb(216,46,13)" fg:x="1420" fg:w="7"/><text x="46.9298%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="46.8771%" y="181" width="0.0329%" height="15" fill="rgb(205,184,25)" fg:x="1426" fg:w="1"/><text x="47.1271%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="46.9099%" y="165" width="0.0329%" height="15" fill="rgb(228,1,10)" fg:x="1427" fg:w="1"/><text x="47.1599%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="46.9099%" y="149" width="0.0329%" height="15" fill="rgb(213,116,27)" fg:x="1427" fg:w="1"/><text x="47.1599%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="46.9099%" y="133" width="0.0329%" height="15" fill="rgb(241,95,50)" fg:x="1427" fg:w="1"/><text x="47.1599%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="46.9099%" y="181" width="0.0657%" height="15" fill="rgb(238,48,32)" fg:x="1427" fg:w="2"/><text x="47.1599%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="46.9428%" y="165" width="0.0329%" height="15" fill="rgb(235,113,49)" fg:x="1428" fg:w="1"/><text x="47.1928%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.10%)</title><rect x="46.9099%" y="229" width="0.0986%" height="15" fill="rgb(205,127,43)" fg:x="1427" fg:w="3"/><text x="47.1599%" y="239.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="46.9099%" y="213" width="0.0986%" height="15" fill="rgb(250,162,2)" fg:x="1427" fg:w="3"/><text x="47.1599%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="46.9099%" y="197" width="0.0986%" height="15" fill="rgb(220,13,41)" fg:x="1427" fg:w="3"/><text x="47.1599%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="46.9757%" y="181" width="0.0329%" height="15" fill="rgb(249,221,25)" fg:x="1429" fg:w="1"/><text x="47.2257%" y="191.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.16%)</title><rect x="46.9099%" y="245" width="0.1644%" height="15" fill="rgb(215,208,19)" fg:x="1427" fg:w="5"/><text x="47.1599%" y="255.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="47.0085%" y="229" width="0.0657%" height="15" fill="rgb(236,175,2)" fg:x="1430" fg:w="2"/><text x="47.2585%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="47.0085%" y="213" width="0.0657%" height="15" fill="rgb(241,52,2)" fg:x="1430" fg:w="2"/><text x="47.2585%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="47.0085%" y="197" width="0.0657%" height="15" fill="rgb(248,140,14)" fg:x="1430" fg:w="2"/><text x="47.2585%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="47.0085%" y="181" width="0.0657%" height="15" fill="rgb(253,22,42)" fg:x="1430" fg:w="2"/><text x="47.2585%" y="191.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="47.0414%" y="165" width="0.0329%" height="15" fill="rgb(234,61,47)" fg:x="1431" fg:w="1"/><text x="47.2914%" y="175.50"></text></g><g><title>rust-gkat`Cudd_Ref (2 samples, 0.07%)</title><rect x="47.0743%" y="245" width="0.0657%" height="15" fill="rgb(208,226,15)" fg:x="1432" fg:w="2"/><text x="47.3243%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.1400%" y="133" width="0.0329%" height="15" fill="rgb(217,221,4)" fg:x="1434" fg:w="1"/><text x="47.3900%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.1400%" y="117" width="0.0329%" height="15" fill="rgb(212,174,34)" fg:x="1434" fg:w="1"/><text x="47.3900%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.1400%" y="101" width="0.0329%" height="15" fill="rgb(253,83,4)" fg:x="1434" fg:w="1"/><text x="47.3900%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.1400%" y="85" width="0.0329%" height="15" fill="rgb(250,195,49)" fg:x="1434" fg:w="1"/><text x="47.3900%" y="95.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.1400%" y="69" width="0.0329%" height="15" fill="rgb(241,192,25)" fg:x="1434" fg:w="1"/><text x="47.3900%" y="79.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="47.1400%" y="165" width="0.0657%" height="15" fill="rgb(208,124,10)" fg:x="1434" fg:w="2"/><text x="47.3900%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="47.1400%" y="149" width="0.0657%" height="15" fill="rgb(222,33,0)" fg:x="1434" fg:w="2"/><text x="47.3900%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.1729%" y="133" width="0.0329%" height="15" fill="rgb(234,209,28)" fg:x="1435" fg:w="1"/><text x="47.4229%" y="143.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="47.1400%" y="213" width="0.0986%" height="15" fill="rgb(224,11,23)" fg:x="1434" fg:w="3"/><text x="47.3900%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="47.1400%" y="197" width="0.0986%" height="15" fill="rgb(232,99,1)" fg:x="1434" fg:w="3"/><text x="47.3900%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="47.1400%" y="181" width="0.0986%" height="15" fill="rgb(237,95,45)" fg:x="1434" fg:w="3"/><text x="47.3900%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.2058%" y="165" width="0.0329%" height="15" fill="rgb(208,109,11)" fg:x="1436" fg:w="1"/><text x="47.4558%" y="175.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (4 samples, 0.13%)</title><rect x="47.1400%" y="245" width="0.1315%" height="15" fill="rgb(216,190,48)" fg:x="1434" fg:w="4"/><text x="47.3900%" y="255.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.13%)</title><rect x="47.1400%" y="229" width="0.1315%" height="15" fill="rgb(251,171,36)" fg:x="1434" fg:w="4"/><text x="47.3900%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="47.2387%" y="213" width="0.0329%" height="15" fill="rgb(230,62,22)" fg:x="1437" fg:w="1"/><text x="47.4887%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="47.2387%" y="197" width="0.0329%" height="15" fill="rgb(225,114,35)" fg:x="1437" fg:w="1"/><text x="47.4887%" y="207.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="47.2387%" y="181" width="0.0329%" height="15" fill="rgb(215,118,42)" fg:x="1437" fg:w="1"/><text x="47.4887%" y="191.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="47.2387%" y="165" width="0.0329%" height="15" fill="rgb(243,119,21)" fg:x="1437" fg:w="1"/><text x="47.4887%" y="175.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="47.2715%" y="245" width="0.0657%" height="15" fill="rgb(252,177,53)" fg:x="1438" fg:w="2"/><text x="47.5215%" y="255.50"></text></g><g><title>rust-gkat`recursive::get_stack_allocation_size (1 samples, 0.03%)</title><rect x="47.3373%" y="245" width="0.0329%" height="15" fill="rgb(237,209,29)" fg:x="1440" fg:w="1"/><text x="47.5873%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.6003%" y="165" width="0.0329%" height="15" fill="rgb(212,65,23)" fg:x="1448" fg:w="1"/><text x="47.8503%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.6003%" y="149" width="0.0329%" height="15" fill="rgb(230,222,46)" fg:x="1448" fg:w="1"/><text x="47.8503%" y="159.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="47.6003%" y="133" width="0.0329%" height="15" fill="rgb(215,135,32)" fg:x="1448" fg:w="1"/><text x="47.8503%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="47.6003%" y="181" width="0.0657%" height="15" fill="rgb(246,101,22)" fg:x="1448" fg:w="2"/><text x="47.8503%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.6331%" y="165" width="0.0329%" height="15" fill="rgb(206,107,13)" fg:x="1449" fg:w="1"/><text x="47.8831%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (4 samples, 0.13%)</title><rect x="47.5674%" y="197" width="0.1315%" height="15" fill="rgb(250,100,44)" fg:x="1447" fg:w="4"/><text x="47.8174%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.6660%" y="181" width="0.0329%" height="15" fill="rgb(231,147,38)" fg:x="1450" fg:w="1"/><text x="47.9160%" y="191.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.16%)</title><rect x="47.5674%" y="229" width="0.1644%" height="15" fill="rgb(229,8,40)" fg:x="1447" fg:w="5"/><text x="47.8174%" y="239.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (5 samples, 0.16%)</title><rect x="47.5674%" y="213" width="0.1644%" height="15" fill="rgb(221,135,30)" fg:x="1447" fg:w="5"/><text x="47.8174%" y="223.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="47.6989%" y="197" width="0.0329%" height="15" fill="rgb(249,193,18)" fg:x="1451" fg:w="1"/><text x="47.9489%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="47.7318%" y="213" width="0.0329%" height="15" fill="rgb(209,133,39)" fg:x="1452" fg:w="1"/><text x="47.9818%" y="223.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="47.7646%" y="213" width="0.0329%" height="15" fill="rgb(232,100,14)" fg:x="1453" fg:w="1"/><text x="48.0146%" y="223.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="47.7646%" y="197" width="0.0329%" height="15" fill="rgb(224,185,1)" fg:x="1453" fg:w="1"/><text x="48.0146%" y="207.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="47.7646%" y="181" width="0.0329%" height="15" fill="rgb(223,139,8)" fg:x="1453" fg:w="1"/><text x="48.0146%" y="191.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="47.7646%" y="165" width="0.0329%" height="15" fill="rgb(232,213,38)" fg:x="1453" fg:w="1"/><text x="48.0146%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.10%)</title><rect x="47.7318%" y="229" width="0.0986%" height="15" fill="rgb(207,94,22)" fg:x="1452" fg:w="3"/><text x="47.9818%" y="239.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="47.7975%" y="213" width="0.0329%" height="15" fill="rgb(219,183,54)" fg:x="1454" fg:w="1"/><text x="48.0475%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="47.8304%" y="213" width="0.0657%" height="15" fill="rgb(216,185,54)" fg:x="1455" fg:w="2"/><text x="48.0804%" y="223.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="47.8304%" y="197" width="0.0657%" height="15" fill="rgb(254,217,39)" fg:x="1455" fg:w="2"/><text x="48.0804%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="47.8304%" y="181" width="0.0657%" height="15" fill="rgb(240,178,23)" fg:x="1455" fg:w="2"/><text x="48.0804%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.8632%" y="165" width="0.0329%" height="15" fill="rgb(218,11,47)" fg:x="1456" fg:w="1"/><text x="48.1132%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.10%)</title><rect x="47.8304%" y="229" width="0.0986%" height="15" fill="rgb(218,51,51)" fg:x="1455" fg:w="3"/><text x="48.0804%" y="239.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="47.8961%" y="213" width="0.0329%" height="15" fill="rgb(238,126,27)" fg:x="1457" fg:w="1"/><text x="48.1461%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="47.8961%" y="197" width="0.0329%" height="15" fill="rgb(249,202,22)" fg:x="1457" fg:w="1"/><text x="48.1461%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="47.8961%" y="181" width="0.0329%" height="15" fill="rgb(254,195,49)" fg:x="1457" fg:w="1"/><text x="48.1461%" y="191.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (3 samples, 0.10%)</title><rect x="47.9290%" y="229" width="0.0986%" height="15" fill="rgb(208,123,14)" fg:x="1458" fg:w="3"/><text x="48.1790%" y="239.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="48.0276%" y="229" width="0.0329%" height="15" fill="rgb(224,200,8)" fg:x="1461" fg:w="1"/><text x="48.2776%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="48.0605%" y="197" width="0.0329%" height="15" fill="rgb(217,61,36)" fg:x="1462" fg:w="1"/><text x="48.3105%" y="207.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="48.0934%" y="197" width="0.0329%" height="15" fill="rgb(206,35,45)" fg:x="1463" fg:w="1"/><text x="48.3434%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.1262%" y="133" width="0.0329%" height="15" fill="rgb(217,65,33)" fg:x="1464" fg:w="1"/><text x="48.3762%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.1262%" y="117" width="0.0329%" height="15" fill="rgb(222,158,48)" fg:x="1464" fg:w="1"/><text x="48.3762%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.1262%" y="101" width="0.0329%" height="15" fill="rgb(254,2,54)" fg:x="1464" fg:w="1"/><text x="48.3762%" y="111.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="48.1262%" y="85" width="0.0329%" height="15" fill="rgb(250,143,38)" fg:x="1464" fg:w="1"/><text x="48.3762%" y="95.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="48.1262%" y="165" width="0.0657%" height="15" fill="rgb(248,25,0)" fg:x="1464" fg:w="2"/><text x="48.3762%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="48.1262%" y="149" width="0.0657%" height="15" fill="rgb(206,152,27)" fg:x="1464" fg:w="2"/><text x="48.3762%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="48.1591%" y="133" width="0.0329%" height="15" fill="rgb(240,77,30)" fg:x="1465" fg:w="1"/><text x="48.4091%" y="143.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="48.1262%" y="197" width="0.0986%" height="15" fill="rgb(231,5,3)" fg:x="1464" fg:w="3"/><text x="48.3762%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="48.1262%" y="181" width="0.0986%" height="15" fill="rgb(207,226,32)" fg:x="1464" fg:w="3"/><text x="48.3762%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="48.1920%" y="165" width="0.0329%" height="15" fill="rgb(222,207,47)" fg:x="1466" fg:w="1"/><text x="48.4420%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="48.2906%" y="165" width="0.0329%" height="15" fill="rgb(229,115,45)" fg:x="1469" fg:w="1"/><text x="48.5406%" y="175.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="48.3563%" y="149" width="0.0329%" height="15" fill="rgb(224,191,6)" fg:x="1471" fg:w="1"/><text x="48.6063%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="48.3892%" y="149" width="0.0329%" height="15" fill="rgb(230,227,24)" fg:x="1472" fg:w="1"/><text x="48.6392%" y="159.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="48.3235%" y="165" width="0.1315%" height="15" fill="rgb(228,80,19)" fg:x="1470" fg:w="4"/><text x="48.5735%" y="175.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="48.4221%" y="149" width="0.0329%" height="15" fill="rgb(247,229,0)" fg:x="1473" fg:w="1"/><text x="48.6721%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (13 samples, 0.43%)</title><rect x="48.0605%" y="229" width="0.4274%" height="15" fill="rgb(237,194,15)" fg:x="1462" fg:w="13"/><text x="48.3105%" y="239.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 0.43%)</title><rect x="48.0605%" y="213" width="0.4274%" height="15" fill="rgb(219,203,20)" fg:x="1462" fg:w="13"/><text x="48.3105%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (8 samples, 0.26%)</title><rect x="48.2249%" y="197" width="0.2630%" height="15" fill="rgb(234,128,8)" fg:x="1467" fg:w="8"/><text x="48.4749%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (8 samples, 0.26%)</title><rect x="48.2249%" y="181" width="0.2630%" height="15" fill="rgb(248,202,8)" fg:x="1467" fg:w="8"/><text x="48.4749%" y="191.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="48.4550%" y="165" width="0.0329%" height="15" fill="rgb(206,104,37)" fg:x="1474" fg:w="1"/><text x="48.7050%" y="175.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="48.4878%" y="229" width="0.0329%" height="15" fill="rgb(223,8,27)" fg:x="1475" fg:w="1"/><text x="48.7378%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="48.6193%" y="213" width="0.0329%" height="15" fill="rgb(216,217,28)" fg:x="1479" fg:w="1"/><text x="48.8693%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.6851%" y="149" width="0.0329%" height="15" fill="rgb(249,199,1)" fg:x="1481" fg:w="1"/><text x="48.9351%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.6851%" y="133" width="0.0329%" height="15" fill="rgb(240,85,17)" fg:x="1481" fg:w="1"/><text x="48.9351%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.6851%" y="117" width="0.0329%" height="15" fill="rgb(206,108,45)" fg:x="1481" fg:w="1"/><text x="48.9351%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.6851%" y="101" width="0.0329%" height="15" fill="rgb(245,210,41)" fg:x="1481" fg:w="1"/><text x="48.9351%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.6851%" y="85" width="0.0329%" height="15" fill="rgb(206,13,37)" fg:x="1481" fg:w="1"/><text x="48.9351%" y="95.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.6851%" y="69" width="0.0329%" height="15" fill="rgb(250,61,18)" fg:x="1481" fg:w="1"/><text x="48.9351%" y="79.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="48.6851%" y="165" width="0.0657%" height="15" fill="rgb(235,172,48)" fg:x="1481" fg:w="2"/><text x="48.9351%" y="175.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="48.7179%" y="149" width="0.0329%" height="15" fill="rgb(249,201,17)" fg:x="1482" fg:w="1"/><text x="48.9679%" y="159.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.20%)</title><rect x="48.6522%" y="213" width="0.1972%" height="15" fill="rgb(219,208,6)" fg:x="1480" fg:w="6"/><text x="48.9022%" y="223.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (6 samples, 0.20%)</title><rect x="48.6522%" y="197" width="0.1972%" height="15" fill="rgb(248,31,23)" fg:x="1480" fg:w="6"/><text x="48.9022%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="48.6522%" y="181" width="0.1972%" height="15" fill="rgb(245,15,42)" fg:x="1480" fg:w="6"/><text x="48.9022%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="48.7508%" y="165" width="0.0986%" height="15" fill="rgb(222,217,39)" fg:x="1483" fg:w="3"/><text x="49.0008%" y="175.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="48.8166%" y="149" width="0.0329%" height="15" fill="rgb(210,219,27)" fg:x="1485" fg:w="1"/><text x="49.0666%" y="159.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="48.8494%" y="213" width="0.0329%" height="15" fill="rgb(252,166,36)" fg:x="1486" fg:w="1"/><text x="49.0994%" y="223.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="48.8494%" y="197" width="0.0329%" height="15" fill="rgb(245,132,34)" fg:x="1486" fg:w="1"/><text x="49.0994%" y="207.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="48.8494%" y="181" width="0.0329%" height="15" fill="rgb(236,54,3)" fg:x="1486" fg:w="1"/><text x="49.0994%" y="191.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="48.8494%" y="165" width="0.0329%" height="15" fill="rgb(241,173,43)" fg:x="1486" fg:w="1"/><text x="49.0994%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="48.8823%" y="213" width="0.0329%" height="15" fill="rgb(215,190,9)" fg:x="1487" fg:w="1"/><text x="49.1323%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="48.8823%" y="197" width="0.0329%" height="15" fill="rgb(242,101,16)" fg:x="1487" fg:w="1"/><text x="49.1323%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="48.8823%" y="181" width="0.0329%" height="15" fill="rgb(223,190,21)" fg:x="1487" fg:w="1"/><text x="49.1323%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.8823%" y="165" width="0.0329%" height="15" fill="rgb(215,228,25)" fg:x="1487" fg:w="1"/><text x="49.1323%" y="175.50"></text></g><g><title>rust-gkat`Cudd_Ref (2 samples, 0.07%)</title><rect x="48.9152%" y="213" width="0.0657%" height="15" fill="rgb(225,36,22)" fg:x="1488" fg:w="2"/><text x="49.1652%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.9809%" y="133" width="0.0329%" height="15" fill="rgb(251,106,46)" fg:x="1490" fg:w="1"/><text x="49.2309%" y="143.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="48.9809%" y="117" width="0.0329%" height="15" fill="rgb(208,90,1)" fg:x="1490" fg:w="1"/><text x="49.2309%" y="127.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="48.9809%" y="101" width="0.0329%" height="15" fill="rgb(243,10,4)" fg:x="1490" fg:w="1"/><text x="49.2309%" y="111.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="48.9809%" y="181" width="0.0986%" height="15" fill="rgb(212,137,27)" fg:x="1490" fg:w="3"/><text x="49.2309%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="48.9809%" y="165" width="0.0986%" height="15" fill="rgb(231,220,49)" fg:x="1490" fg:w="3"/><text x="49.2309%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="48.9809%" y="149" width="0.0986%" height="15" fill="rgb(237,96,20)" fg:x="1490" fg:w="3"/><text x="49.2309%" y="159.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="49.0138%" y="133" width="0.0657%" height="15" fill="rgb(239,229,30)" fg:x="1491" fg:w="2"/><text x="49.2638%" y="143.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="49.1124%" y="149" width="0.0657%" height="15" fill="rgb(219,65,33)" fg:x="1494" fg:w="2"/><text x="49.3624%" y="159.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="49.1453%" y="133" width="0.0329%" height="15" fill="rgb(243,134,7)" fg:x="1495" fg:w="1"/><text x="49.3953%" y="143.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (7 samples, 0.23%)</title><rect x="48.9809%" y="213" width="0.2301%" height="15" fill="rgb(216,177,54)" fg:x="1490" fg:w="7"/><text x="49.2309%" y="223.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.23%)</title><rect x="48.9809%" y="197" width="0.2301%" height="15" fill="rgb(211,160,20)" fg:x="1490" fg:w="7"/><text x="49.2309%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (4 samples, 0.13%)</title><rect x="49.0796%" y="181" width="0.1315%" height="15" fill="rgb(239,85,39)" fg:x="1493" fg:w="4"/><text x="49.3296%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.10%)</title><rect x="49.1124%" y="165" width="0.0986%" height="15" fill="rgb(232,125,22)" fg:x="1494" fg:w="3"/><text x="49.3624%" y="175.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="49.1782%" y="149" width="0.0329%" height="15" fill="rgb(244,57,34)" fg:x="1496" fg:w="1"/><text x="49.4282%" y="159.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.16%)</title><rect x="49.2110%" y="213" width="0.1644%" height="15" fill="rgb(214,203,32)" fg:x="1497" fg:w="5"/><text x="49.4610%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.13%)</title><rect x="49.2439%" y="197" width="0.1315%" height="15" fill="rgb(207,58,43)" fg:x="1498" fg:w="4"/><text x="49.4939%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="49.3754%" y="165" width="0.0329%" height="15" fill="rgb(215,193,15)" fg:x="1502" fg:w="1"/><text x="49.6254%" y="175.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="49.3754%" y="149" width="0.0329%" height="15" fill="rgb(232,15,44)" fg:x="1502" fg:w="1"/><text x="49.6254%" y="159.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="49.3754%" y="197" width="0.0657%" height="15" fill="rgb(212,3,48)" fg:x="1502" fg:w="2"/><text x="49.6254%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="49.3754%" y="181" width="0.0657%" height="15" fill="rgb(218,128,7)" fg:x="1502" fg:w="2"/><text x="49.6254%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="49.4083%" y="165" width="0.0329%" height="15" fill="rgb(226,216,39)" fg:x="1503" fg:w="1"/><text x="49.6583%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="49.4412%" y="197" width="0.0329%" height="15" fill="rgb(243,47,51)" fg:x="1504" fg:w="1"/><text x="49.6912%" y="207.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="49.4412%" y="181" width="0.0329%" height="15" fill="rgb(241,183,40)" fg:x="1504" fg:w="1"/><text x="49.6912%" y="191.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="49.4412%" y="165" width="0.0329%" height="15" fill="rgb(231,217,32)" fg:x="1504" fg:w="1"/><text x="49.6912%" y="175.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="49.4412%" y="149" width="0.0329%" height="15" fill="rgb(229,61,38)" fg:x="1504" fg:w="1"/><text x="49.6912%" y="159.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="49.4740%" y="181" width="0.0329%" height="15" fill="rgb(225,210,5)" fg:x="1505" fg:w="1"/><text x="49.7240%" y="191.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="49.4740%" y="197" width="0.0657%" height="15" fill="rgb(231,79,45)" fg:x="1505" fg:w="2"/><text x="49.7240%" y="207.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="49.5069%" y="181" width="0.0329%" height="15" fill="rgb(224,100,7)" fg:x="1506" fg:w="1"/><text x="49.7569%" y="191.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="49.5398%" y="197" width="0.0329%" height="15" fill="rgb(241,198,18)" fg:x="1507" fg:w="1"/><text x="49.7898%" y="207.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="49.5726%" y="165" width="0.0329%" height="15" fill="rgb(252,97,53)" fg:x="1508" fg:w="1"/><text x="49.8226%" y="175.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="49.6055%" y="165" width="0.0657%" height="15" fill="rgb(220,88,7)" fg:x="1509" fg:w="2"/><text x="49.8555%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="49.6055%" y="149" width="0.0657%" height="15" fill="rgb(213,176,14)" fg:x="1509" fg:w="2"/><text x="49.8555%" y="159.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="49.6055%" y="133" width="0.0657%" height="15" fill="rgb(246,73,7)" fg:x="1509" fg:w="2"/><text x="49.8555%" y="143.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="49.7041%" y="133" width="0.0329%" height="15" fill="rgb(245,64,36)" fg:x="1512" fg:w="1"/><text x="49.9541%" y="143.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="49.7041%" y="117" width="0.0329%" height="15" fill="rgb(245,80,10)" fg:x="1512" fg:w="1"/><text x="49.9541%" y="127.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (6 samples, 0.20%)</title><rect x="49.5726%" y="197" width="0.1972%" height="15" fill="rgb(232,107,50)" fg:x="1508" fg:w="6"/><text x="49.8226%" y="207.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.20%)</title><rect x="49.5726%" y="181" width="0.1972%" height="15" fill="rgb(253,3,0)" fg:x="1508" fg:w="6"/><text x="49.8226%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (3 samples, 0.10%)</title><rect x="49.6713%" y="165" width="0.0986%" height="15" fill="rgb(212,99,53)" fg:x="1511" fg:w="3"/><text x="49.9213%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="49.7041%" y="149" width="0.0657%" height="15" fill="rgb(249,111,54)" fg:x="1512" fg:w="2"/><text x="49.9541%" y="159.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="49.7370%" y="133" width="0.0329%" height="15" fill="rgb(249,55,30)" fg:x="1513" fg:w="1"/><text x="49.9870%" y="143.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.03%)</title><rect x="49.8356%" y="181" width="0.0329%" height="15" fill="rgb(237,47,42)" fg:x="1516" fg:w="1"/><text x="50.0856%" y="191.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="49.8356%" y="165" width="0.0329%" height="15" fill="rgb(211,20,18)" fg:x="1516" fg:w="1"/><text x="50.0856%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="49.8356%" y="149" width="0.0329%" height="15" fill="rgb(231,203,46)" fg:x="1516" fg:w="1"/><text x="50.0856%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="49.8356%" y="133" width="0.0329%" height="15" fill="rgb(237,142,3)" fg:x="1516" fg:w="1"/><text x="50.0856%" y="143.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="49.8356%" y="117" width="0.0329%" height="15" fill="rgb(241,107,1)" fg:x="1516" fg:w="1"/><text x="50.0856%" y="127.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="49.8685%" y="181" width="0.0657%" height="15" fill="rgb(229,83,13)" fg:x="1517" fg:w="2"/><text x="50.1185%" y="191.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="49.9014%" y="165" width="0.0329%" height="15" fill="rgb(241,91,40)" fg:x="1518" fg:w="1"/><text x="50.1514%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="49.9343%" y="165" width="0.0657%" height="15" fill="rgb(225,3,45)" fg:x="1519" fg:w="2"/><text x="50.1843%" y="175.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="49.9671%" y="149" width="0.0329%" height="15" fill="rgb(244,223,14)" fg:x="1520" fg:w="1"/><text x="50.2171%" y="159.50"></text></g><g><title>rust-gkat`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.03%)</title><rect x="50.0000%" y="165" width="0.0329%" height="15" fill="rgb(224,124,37)" fg:x="1521" fg:w="1"/><text x="50.2500%" y="175.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="50.0000%" y="149" width="0.0329%" height="15" fill="rgb(251,171,30)" fg:x="1521" fg:w="1"/><text x="50.2500%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="50.0000%" y="133" width="0.0329%" height="15" fill="rgb(236,46,54)" fg:x="1521" fg:w="1"/><text x="50.2500%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="50.0000%" y="117" width="0.0329%" height="15" fill="rgb(245,213,5)" fg:x="1521" fg:w="1"/><text x="50.2500%" y="127.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="50.0000%" y="101" width="0.0329%" height="15" fill="rgb(230,144,27)" fg:x="1521" fg:w="1"/><text x="50.2500%" y="111.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (4 samples, 0.13%)</title><rect x="49.9343%" y="181" width="0.1315%" height="15" fill="rgb(220,86,6)" fg:x="1519" fg:w="4"/><text x="50.1843%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="50.0329%" y="165" width="0.0329%" height="15" fill="rgb(240,20,13)" fg:x="1522" fg:w="1"/><text x="50.2829%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="50.0329%" y="149" width="0.0329%" height="15" fill="rgb(217,89,34)" fg:x="1522" fg:w="1"/><text x="50.2829%" y="159.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="50.0329%" y="133" width="0.0329%" height="15" fill="rgb(229,13,5)" fg:x="1522" fg:w="1"/><text x="50.2829%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (10 samples, 0.33%)</title><rect x="49.7699%" y="197" width="0.3287%" height="15" fill="rgb(244,67,35)" fg:x="1514" fg:w="10"/><text x="50.0199%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="50.0657%" y="181" width="0.0329%" height="15" fill="rgb(221,40,2)" fg:x="1523" fg:w="1"/><text x="50.3157%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="50.0657%" y="165" width="0.0329%" height="15" fill="rgb(237,157,21)" fg:x="1523" fg:w="1"/><text x="50.3157%" y="175.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="50.0657%" y="149" width="0.0329%" height="15" fill="rgb(222,94,11)" fg:x="1523" fg:w="1"/><text x="50.3157%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="50.0986%" y="197" width="0.0329%" height="15" fill="rgb(249,113,6)" fg:x="1524" fg:w="1"/><text x="50.3486%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="50.0986%" y="181" width="0.0329%" height="15" fill="rgb(238,137,36)" fg:x="1524" fg:w="1"/><text x="50.3486%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (25 samples, 0.82%)</title><rect x="49.3754%" y="213" width="0.8218%" height="15" fill="rgb(210,102,26)" fg:x="1502" fg:w="25"/><text x="49.6254%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (2 samples, 0.07%)</title><rect x="50.1315%" y="197" width="0.0657%" height="15" fill="rgb(218,30,30)" fg:x="1525" fg:w="2"/><text x="50.3815%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="50.1315%" y="181" width="0.0657%" height="15" fill="rgb(214,67,26)" fg:x="1525" fg:w="2"/><text x="50.3815%" y="191.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="50.1644%" y="165" width="0.0329%" height="15" fill="rgb(251,9,53)" fg:x="1526" fg:w="1"/><text x="50.4144%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="50.1644%" y="149" width="0.0329%" height="15" fill="rgb(228,204,25)" fg:x="1526" fg:w="1"/><text x="50.4144%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="50.2959%" y="181" width="0.0329%" height="15" fill="rgb(207,153,8)" fg:x="1530" fg:w="1"/><text x="50.5459%" y="191.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="50.3287%" y="181" width="0.0329%" height="15" fill="rgb(242,9,16)" fg:x="1531" fg:w="1"/><text x="50.5787%" y="191.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.16%)</title><rect x="50.3616%" y="181" width="0.1644%" height="15" fill="rgb(217,211,10)" fg:x="1532" fg:w="5"/><text x="50.6116%" y="191.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="50.4602%" y="165" width="0.0657%" height="15" fill="rgb(219,228,52)" fg:x="1535" fg:w="2"/><text x="50.7102%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (14 samples, 0.46%)</title><rect x="50.1972%" y="197" width="0.4602%" height="15" fill="rgb(231,92,29)" fg:x="1527" fg:w="14"/><text x="50.4472%" y="207.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (4 samples, 0.13%)</title><rect x="50.5260%" y="181" width="0.1315%" height="15" fill="rgb(232,8,23)" fg:x="1537" fg:w="4"/><text x="50.7760%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (66 samples, 2.17%)</title><rect x="48.5207%" y="229" width="2.1696%" height="15" fill="rgb(216,211,34)" fg:x="1476" fg:w="66"/><text x="48.7707%" y="239.50">r..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (15 samples, 0.49%)</title><rect x="50.1972%" y="213" width="0.4931%" height="15" fill="rgb(236,151,0)" fg:x="1527" fg:w="15"/><text x="50.4472%" y="223.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="50.6575%" y="197" width="0.0329%" height="15" fill="rgb(209,168,3)" fg:x="1541" fg:w="1"/><text x="50.9075%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="50.6903%" y="229" width="0.0329%" height="15" fill="rgb(208,129,28)" fg:x="1542" fg:w="1"/><text x="50.9403%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="50.8876%" y="197" width="0.0329%" height="15" fill="rgb(229,78,22)" fg:x="1548" fg:w="1"/><text x="51.1376%" y="207.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="50.9204%" y="197" width="0.0329%" height="15" fill="rgb(228,187,13)" fg:x="1549" fg:w="1"/><text x="51.1704%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (4 samples, 0.13%)</title><rect x="50.9533%" y="197" width="0.1315%" height="15" fill="rgb(240,119,24)" fg:x="1550" fg:w="4"/><text x="51.2033%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::hash (4 samples, 0.13%)</title><rect x="51.0848%" y="197" width="0.1315%" height="15" fill="rgb(209,194,42)" fg:x="1554" fg:w="4"/><text x="51.3348%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="51.3807%" y="181" width="0.0657%" height="15" fill="rgb(247,200,46)" fg:x="1563" fg:w="2"/><text x="51.6307%" y="191.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.26%)</title><rect x="51.2163%" y="197" width="0.2630%" height="15" fill="rgb(218,76,16)" fg:x="1558" fg:w="8"/><text x="51.4663%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="51.4464%" y="181" width="0.0329%" height="15" fill="rgb(225,21,48)" fg:x="1565" fg:w="1"/><text x="51.6964%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (24 samples, 0.79%)</title><rect x="50.7561%" y="213" width="0.7890%" height="15" fill="rgb(239,223,50)" fg:x="1544" fg:w="24"/><text x="51.0061%" y="223.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="51.4793%" y="197" width="0.0657%" height="15" fill="rgb(244,45,21)" fg:x="1566" fg:w="2"/><text x="51.7293%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (129 samples, 4.24%)</title><rect x="47.3702%" y="245" width="4.2406%" height="15" fill="rgb(232,33,43)" fg:x="1441" fg:w="129"/><text x="47.6202%" y="255.50">rust-..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (27 samples, 0.89%)</title><rect x="50.7232%" y="229" width="0.8876%" height="15" fill="rgb(209,8,3)" fg:x="1543" fg:w="27"/><text x="50.9732%" y="239.50"></text></g><g><title>rust-gkat`mi_free (2 samples, 0.07%)</title><rect x="51.5450%" y="213" width="0.0657%" height="15" fill="rgb(214,25,53)" fg:x="1568" fg:w="2"/><text x="51.7950%" y="223.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="51.6437%" y="213" width="0.0329%" height="15" fill="rgb(254,186,54)" fg:x="1571" fg:w="1"/><text x="51.8937%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (4 samples, 0.13%)</title><rect x="51.6108%" y="245" width="0.1315%" height="15" fill="rgb(208,174,49)" fg:x="1570" fg:w="4"/><text x="51.8608%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="51.6437%" y="229" width="0.0986%" height="15" fill="rgb(233,191,51)" fg:x="1571" fg:w="3"/><text x="51.8937%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="51.6765%" y="213" width="0.0657%" height="15" fill="rgb(222,134,10)" fg:x="1572" fg:w="2"/><text x="51.9265%" y="223.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="51.7094%" y="197" width="0.0329%" height="15" fill="rgb(230,226,20)" fg:x="1573" fg:w="1"/><text x="51.9594%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="51.7094%" y="181" width="0.0329%" height="15" fill="rgb(251,111,25)" fg:x="1573" fg:w="1"/><text x="51.9594%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="51.7094%" y="165" width="0.0329%" height="15" fill="rgb(224,40,46)" fg:x="1573" fg:w="1"/><text x="51.9594%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="51.7094%" y="149" width="0.0329%" height="15" fill="rgb(236,108,47)" fg:x="1573" fg:w="1"/><text x="51.9594%" y="159.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="51.7094%" y="133" width="0.0329%" height="15" fill="rgb(234,93,0)" fg:x="1573" fg:w="1"/><text x="51.9594%" y="143.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.10%)</title><rect x="51.9395%" y="213" width="0.0986%" height="15" fill="rgb(224,213,32)" fg:x="1580" fg:w="3"/><text x="52.1895%" y="223.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="52.0381%" y="213" width="0.0329%" height="15" fill="rgb(251,11,48)" fg:x="1583" fg:w="1"/><text x="52.2881%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="52.0710%" y="213" width="0.0657%" height="15" fill="rgb(236,173,5)" fg:x="1584" fg:w="2"/><text x="52.3210%" y="223.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (2 samples, 0.07%)</title><rect x="52.1368%" y="213" width="0.0657%" height="15" fill="rgb(230,95,12)" fg:x="1586" fg:w="2"/><text x="52.3868%" y="223.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="52.2025%" y="213" width="0.0329%" height="15" fill="rgb(232,209,1)" fg:x="1588" fg:w="1"/><text x="52.4525%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="52.3340%" y="197" width="0.0657%" height="15" fill="rgb(232,6,1)" fg:x="1592" fg:w="2"/><text x="52.5840%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="52.3997%" y="197" width="0.0986%" height="15" fill="rgb(210,224,50)" fg:x="1594" fg:w="3"/><text x="52.6497%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="52.4984%" y="197" width="0.0329%" height="15" fill="rgb(228,127,35)" fg:x="1597" fg:w="1"/><text x="52.7484%" y="207.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.33%)</title><rect x="52.2354%" y="213" width="0.3287%" height="15" fill="rgb(245,102,45)" fg:x="1589" fg:w="10"/><text x="52.4854%" y="223.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="52.5312%" y="197" width="0.0329%" height="15" fill="rgb(214,1,49)" fg:x="1598" fg:w="1"/><text x="52.7812%" y="207.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="52.5641%" y="213" width="0.0329%" height="15" fill="rgb(226,163,40)" fg:x="1599" fg:w="1"/><text x="52.8141%" y="223.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="52.5641%" y="197" width="0.0329%" height="15" fill="rgb(239,212,28)" fg:x="1599" fg:w="1"/><text x="52.8141%" y="207.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="52.5641%" y="181" width="0.0329%" height="15" fill="rgb(220,20,13)" fg:x="1599" fg:w="1"/><text x="52.8141%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (26 samples, 0.85%)</title><rect x="51.8080%" y="229" width="0.8547%" height="15" fill="rgb(210,164,35)" fg:x="1576" fg:w="26"/><text x="52.0580%" y="239.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="52.5970%" y="213" width="0.0657%" height="15" fill="rgb(248,109,41)" fg:x="1600" fg:w="2"/><text x="52.8470%" y="223.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="52.6627%" y="229" width="0.0329%" height="15" fill="rgb(238,23,50)" fg:x="1602" fg:w="1"/><text x="52.9127%" y="239.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="52.6956%" y="229" width="0.0329%" height="15" fill="rgb(211,48,49)" fg:x="1603" fg:w="1"/><text x="52.9456%" y="239.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="52.7285%" y="229" width="0.0329%" height="15" fill="rgb(223,36,21)" fg:x="1604" fg:w="1"/><text x="52.9785%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="52.7613%" y="229" width="0.0657%" height="15" fill="rgb(207,123,46)" fg:x="1605" fg:w="2"/><text x="53.0113%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (200 samples, 6.57%)</title><rect x="46.2853%" y="261" width="6.5746%" height="15" fill="rgb(240,218,32)" fg:x="1408" fg:w="200"/><text x="46.5353%" y="271.50">rust-gkat..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (34 samples, 1.12%)</title><rect x="51.7423%" y="245" width="1.1177%" height="15" fill="rgb(252,5,43)" fg:x="1574" fg:w="34"/><text x="51.9923%" y="255.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="52.8271%" y="229" width="0.0329%" height="15" fill="rgb(252,84,19)" fg:x="1607" fg:w="1"/><text x="53.0771%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="52.8600%" y="261" width="0.0329%" height="15" fill="rgb(243,152,39)" fg:x="1608" fg:w="1"/><text x="53.1100%" y="271.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.10%)</title><rect x="53.1558%" y="229" width="0.0986%" height="15" fill="rgb(234,160,15)" fg:x="1617" fg:w="3"/><text x="53.4058%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="53.2544%" y="229" width="0.0329%" height="15" fill="rgb(237,34,20)" fg:x="1620" fg:w="1"/><text x="53.5044%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::hash (5 samples, 0.16%)</title><rect x="53.2873%" y="229" width="0.1644%" height="15" fill="rgb(229,97,13)" fg:x="1621" fg:w="5"/><text x="53.5373%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.10%)</title><rect x="53.4845%" y="213" width="0.0986%" height="15" fill="rgb(234,71,50)" fg:x="1627" fg:w="3"/><text x="53.7345%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="53.5832%" y="213" width="0.0657%" height="15" fill="rgb(253,155,4)" fg:x="1630" fg:w="2"/><text x="53.8332%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.23%)</title><rect x="53.4517%" y="229" width="0.2301%" height="15" fill="rgb(222,185,37)" fg:x="1626" fg:w="7"/><text x="53.7017%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="53.6489%" y="213" width="0.0329%" height="15" fill="rgb(251,177,13)" fg:x="1632" fg:w="1"/><text x="53.8989%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (27 samples, 0.89%)</title><rect x="52.9586%" y="245" width="0.8876%" height="15" fill="rgb(250,179,40)" fg:x="1611" fg:w="27"/><text x="53.2086%" y="255.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (5 samples, 0.16%)</title><rect x="53.6818%" y="229" width="0.1644%" height="15" fill="rgb(242,44,2)" fg:x="1633" fg:w="5"/><text x="53.9318%" y="239.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="53.8462%" y="245" width="0.0329%" height="15" fill="rgb(216,177,13)" fg:x="1638" fg:w="1"/><text x="54.0962%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (264 samples, 8.68%)</title><rect x="45.2663%" y="277" width="8.6785%" height="15" fill="rgb(216,106,43)" fg:x="1377" fg:w="264"/><text x="45.5163%" y="287.50">rust-gkat`ru..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (32 samples, 1.05%)</title><rect x="52.8928%" y="261" width="1.0519%" height="15" fill="rgb(216,183,2)" fg:x="1609" fg:w="32"/><text x="53.1428%" y="271.50"></text></g><g><title>rust-gkat`mi_free (2 samples, 0.07%)</title><rect x="53.8790%" y="245" width="0.0657%" height="15" fill="rgb(249,75,3)" fg:x="1639" fg:w="2"/><text x="54.1290%" y="255.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="54.1420%" y="245" width="0.0329%" height="15" fill="rgb(219,67,39)" fg:x="1647" fg:w="1"/><text x="54.3920%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="54.1749%" y="245" width="0.0329%" height="15" fill="rgb(253,228,2)" fg:x="1648" fg:w="1"/><text x="54.4249%" y="255.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="54.2078%" y="245" width="0.1315%" height="15" fill="rgb(235,138,27)" fg:x="1649" fg:w="4"/><text x="54.4578%" y="255.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (11 samples, 0.36%)</title><rect x="54.0105%" y="261" width="0.3616%" height="15" fill="rgb(236,97,51)" fg:x="1643" fg:w="11"/><text x="54.2605%" y="271.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="54.3393%" y="245" width="0.0329%" height="15" fill="rgb(240,80,30)" fg:x="1653" fg:w="1"/><text x="54.5893%" y="255.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="54.3393%" y="229" width="0.0329%" height="15" fill="rgb(230,178,19)" fg:x="1653" fg:w="1"/><text x="54.5893%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="54.3721%" y="261" width="0.0329%" height="15" fill="rgb(210,190,27)" fg:x="1654" fg:w="1"/><text x="54.6221%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (298 samples, 9.80%)</title><rect x="44.6746%" y="293" width="9.7962%" height="15" fill="rgb(222,107,31)" fg:x="1359" fg:w="298"/><text x="44.9246%" y="303.50">rust-gkat`rust..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (16 samples, 0.53%)</title><rect x="53.9448%" y="277" width="0.5260%" height="15" fill="rgb(216,127,34)" fg:x="1641" fg:w="16"/><text x="54.1948%" y="287.50"></text></g><g><title>rust-gkat`mi_free (2 samples, 0.07%)</title><rect x="54.4050%" y="261" width="0.0657%" height="15" fill="rgb(234,116,52)" fg:x="1655" fg:w="2"/><text x="54.6550%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="54.5036%" y="261" width="0.0329%" height="15" fill="rgb(222,124,15)" fg:x="1658" fg:w="1"/><text x="54.7536%" y="271.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="54.5036%" y="277" width="0.1315%" height="15" fill="rgb(231,179,28)" fg:x="1658" fg:w="4"/><text x="54.7536%" y="287.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.10%)</title><rect x="54.5365%" y="261" width="0.0986%" height="15" fill="rgb(226,93,45)" fg:x="1659" fg:w="3"/><text x="54.7865%" y="271.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="54.6351%" y="245" width="0.0329%" height="15" fill="rgb(215,8,51)" fg:x="1662" fg:w="1"/><text x="54.8851%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (8 samples, 0.26%)</title><rect x="54.4707%" y="293" width="0.2630%" height="15" fill="rgb(223,106,5)" fg:x="1657" fg:w="8"/><text x="54.7207%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="54.6351%" y="277" width="0.0986%" height="15" fill="rgb(250,191,5)" fg:x="1662" fg:w="3"/><text x="54.8851%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="54.6351%" y="261" width="0.0986%" height="15" fill="rgb(242,132,44)" fg:x="1662" fg:w="3"/><text x="54.8851%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="54.6680%" y="245" width="0.0657%" height="15" fill="rgb(251,152,29)" fg:x="1663" fg:w="2"/><text x="54.9180%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="54.7009%" y="229" width="0.0329%" height="15" fill="rgb(218,179,5)" fg:x="1664" fg:w="1"/><text x="54.9509%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="54.8323%" y="261" width="0.0657%" height="15" fill="rgb(227,67,19)" fg:x="1668" fg:w="2"/><text x="55.0823%" y="271.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="54.9310%" y="245" width="0.0986%" height="15" fill="rgb(233,119,31)" fg:x="1671" fg:w="3"/><text x="55.1810%" y="255.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="55.0296%" y="245" width="0.0329%" height="15" fill="rgb(241,120,22)" fg:x="1674" fg:w="1"/><text x="55.2796%" y="255.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.16%)</title><rect x="55.5227%" y="229" width="0.1644%" height="15" fill="rgb(224,102,30)" fg:x="1689" fg:w="5"/><text x="55.7727%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="55.6870%" y="229" width="0.1644%" height="15" fill="rgb(210,164,37)" fg:x="1694" fg:w="5"/><text x="55.9370%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (31 samples, 1.02%)</title><rect x="54.8981%" y="261" width="1.0191%" height="15" fill="rgb(226,191,16)" fg:x="1670" fg:w="31"/><text x="55.1481%" y="271.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.85%)</title><rect x="55.0625%" y="245" width="0.8547%" height="15" fill="rgb(214,40,45)" fg:x="1675" fg:w="26"/><text x="55.3125%" y="255.50"></text></g><g><title>rust-gkat`mi_segment_free (2 samples, 0.07%)</title><rect x="55.8514%" y="229" width="0.0657%" height="15" fill="rgb(244,29,26)" fg:x="1699" fg:w="2"/><text x="56.1014%" y="239.50"></text></g><g><title>rust-gkat`_mi_arena_free (2 samples, 0.07%)</title><rect x="55.8514%" y="213" width="0.0657%" height="15" fill="rgb(216,16,5)" fg:x="1699" fg:w="2"/><text x="56.1014%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (2 samples, 0.07%)</title><rect x="55.8514%" y="197" width="0.0657%" height="15" fill="rgb(249,76,35)" fg:x="1699" fg:w="2"/><text x="56.1014%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (35 samples, 1.15%)</title><rect x="54.7995%" y="277" width="1.1506%" height="15" fill="rgb(207,11,44)" fg:x="1667" fg:w="35"/><text x="55.0495%" y="287.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="55.9172%" y="261" width="0.0329%" height="15" fill="rgb(228,190,49)" fg:x="1701" fg:w="1"/><text x="56.1672%" y="271.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="55.9500%" y="277" width="0.0329%" height="15" fill="rgb(214,173,12)" fg:x="1702" fg:w="1"/><text x="56.2000%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (39 samples, 1.28%)</title><rect x="54.7337%" y="293" width="1.2821%" height="15" fill="rgb(218,26,35)" fg:x="1665" fg:w="39"/><text x="54.9837%" y="303.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="55.9829%" y="277" width="0.0329%" height="15" fill="rgb(220,200,19)" fg:x="1703" fg:w="1"/><text x="56.2329%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (368 samples, 12.10%)</title><rect x="43.9513%" y="309" width="12.0973%" height="15" fill="rgb(239,95,49)" fg:x="1337" fg:w="368"/><text x="44.2013%" y="319.50">rust-gkat`rust_gka..</text></g><g><title>rust-gkat`stacker::remaining_stack (1 samples, 0.03%)</title><rect x="56.0158%" y="293" width="0.0329%" height="15" fill="rgb(235,85,53)" fg:x="1704" fg:w="1"/><text x="56.2658%" y="303.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="56.0487%" y="245" width="0.0329%" height="15" fill="rgb(233,133,31)" fg:x="1705" fg:w="1"/><text x="56.2987%" y="255.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="56.0815%" y="245" width="0.0329%" height="15" fill="rgb(218,25,20)" fg:x="1706" fg:w="1"/><text x="56.3315%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="56.0487%" y="309" width="0.0986%" height="15" fill="rgb(252,210,38)" fg:x="1705" fg:w="3"/><text x="56.2987%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="56.0487%" y="293" width="0.0986%" height="15" fill="rgb(242,134,21)" fg:x="1705" fg:w="3"/><text x="56.2987%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="56.0487%" y="277" width="0.0986%" height="15" fill="rgb(213,28,48)" fg:x="1705" fg:w="3"/><text x="56.2987%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="56.0487%" y="261" width="0.0986%" height="15" fill="rgb(250,196,2)" fg:x="1705" fg:w="3"/><text x="56.2987%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.1144%" y="245" width="0.0329%" height="15" fill="rgb(227,5,17)" fg:x="1707" fg:w="1"/><text x="56.3644%" y="255.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="56.1144%" y="229" width="0.0329%" height="15" fill="rgb(221,226,24)" fg:x="1707" fg:w="1"/><text x="56.3644%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="56.3774%" y="277" width="0.0329%" height="15" fill="rgb(211,5,48)" fg:x="1715" fg:w="1"/><text x="56.6274%" y="287.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (8 samples, 0.26%)</title><rect x="56.2459%" y="293" width="0.2630%" height="15" fill="rgb(219,150,6)" fg:x="1711" fg:w="8"/><text x="56.4959%" y="303.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (3 samples, 0.10%)</title><rect x="56.4103%" y="277" width="0.0986%" height="15" fill="rgb(251,46,16)" fg:x="1716" fg:w="3"/><text x="56.6603%" y="287.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="56.5089%" y="293" width="0.0329%" height="15" fill="rgb(220,204,40)" fg:x="1719" fg:w="1"/><text x="56.7589%" y="303.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="56.5417%" y="293" width="0.0329%" height="15" fill="rgb(211,85,2)" fg:x="1720" fg:w="1"/><text x="56.7917%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (401 samples, 13.18%)</title><rect x="43.4254%" y="325" width="13.1821%" height="15" fill="rgb(229,17,7)" fg:x="1321" fg:w="401"/><text x="43.6754%" y="335.50">rust-gkat`rust_gkat:..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (14 samples, 0.46%)</title><rect x="56.1473%" y="309" width="0.4602%" height="15" fill="rgb(239,72,28)" fg:x="1708" fg:w="14"/><text x="56.3973%" y="319.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="56.5746%" y="293" width="0.0329%" height="15" fill="rgb(230,47,54)" fg:x="1721" fg:w="1"/><text x="56.8246%" y="303.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="56.6404%" y="293" width="0.0329%" height="15" fill="rgb(214,50,8)" fg:x="1723" fg:w="1"/><text x="56.8904%" y="303.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="56.6732%" y="293" width="0.0657%" height="15" fill="rgb(216,198,43)" fg:x="1724" fg:w="2"/><text x="56.9232%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (417 samples, 13.71%)</title><rect x="43.0638%" y="341" width="13.7081%" height="15" fill="rgb(234,20,35)" fg:x="1310" fg:w="417"/><text x="43.3138%" y="351.50">rust-gkat`rust_gkat::..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (5 samples, 0.16%)</title><rect x="56.6075%" y="325" width="0.1644%" height="15" fill="rgb(254,45,19)" fg:x="1722" fg:w="5"/><text x="56.8575%" y="335.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 0.16%)</title><rect x="56.6075%" y="309" width="0.1644%" height="15" fill="rgb(219,14,44)" fg:x="1722" fg:w="5"/><text x="56.8575%" y="319.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="56.7390%" y="293" width="0.0329%" height="15" fill="rgb(217,220,26)" fg:x="1726" fg:w="1"/><text x="56.9890%" y="303.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="56.7390%" y="277" width="0.0329%" height="15" fill="rgb(213,158,28)" fg:x="1726" fg:w="1"/><text x="56.9890%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="341" width="0.0329%" height="15" fill="rgb(252,51,52)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="325" width="0.0329%" height="15" fill="rgb(246,89,16)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="309" width="0.0329%" height="15" fill="rgb(216,158,49)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="293" width="0.0329%" height="15" fill="rgb(236,107,19)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="277" width="0.0329%" height="15" fill="rgb(228,185,30)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="261" width="0.0329%" height="15" fill="rgb(246,134,8)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="245" width="0.0329%" height="15" fill="rgb(214,143,50)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="56.7719%" y="229" width="0.0329%" height="15" fill="rgb(228,75,8)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="56.7719%" y="213" width="0.0329%" height="15" fill="rgb(207,175,4)" fg:x="1727" fg:w="1"/><text x="57.0219%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="56.8705%" y="309" width="0.0329%" height="15" fill="rgb(205,108,24)" fg:x="1730" fg:w="1"/><text x="57.1205%" y="319.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="56.9034%" y="309" width="0.0329%" height="15" fill="rgb(244,120,49)" fg:x="1731" fg:w="1"/><text x="57.1534%" y="319.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="56.9691%" y="293" width="0.0329%" height="15" fill="rgb(223,47,38)" fg:x="1733" fg:w="1"/><text x="57.2191%" y="303.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="56.9362%" y="309" width="0.0986%" height="15" fill="rgb(229,179,11)" fg:x="1732" fg:w="3"/><text x="57.1862%" y="319.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="57.0020%" y="293" width="0.0329%" height="15" fill="rgb(231,122,1)" fg:x="1734" fg:w="1"/><text x="57.2520%" y="303.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="57.0348%" y="309" width="0.0329%" height="15" fill="rgb(245,119,9)" fg:x="1735" fg:w="1"/><text x="57.2848%" y="319.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="57.0348%" y="293" width="0.0329%" height="15" fill="rgb(241,163,25)" fg:x="1735" fg:w="1"/><text x="57.2848%" y="303.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="57.0348%" y="277" width="0.0329%" height="15" fill="rgb(217,214,3)" fg:x="1735" fg:w="1"/><text x="57.2848%" y="287.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="57.0348%" y="261" width="0.0329%" height="15" fill="rgb(240,86,28)" fg:x="1735" fg:w="1"/><text x="57.2848%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (449 samples, 14.76%)</title><rect x="42.4063%" y="357" width="14.7600%" height="15" fill="rgb(215,47,9)" fg:x="1290" fg:w="449"/><text x="42.6563%" y="367.50">rust-gkat`rust_gkat::ke..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (11 samples, 0.36%)</title><rect x="56.8047%" y="341" width="0.3616%" height="15" fill="rgb(252,25,45)" fg:x="1728" fg:w="11"/><text x="57.0547%" y="351.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (11 samples, 0.36%)</title><rect x="56.8047%" y="325" width="0.3616%" height="15" fill="rgb(251,164,9)" fg:x="1728" fg:w="11"/><text x="57.0547%" y="335.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (3 samples, 0.10%)</title><rect x="57.0677%" y="309" width="0.0986%" height="15" fill="rgb(233,194,0)" fg:x="1736" fg:w="3"/><text x="57.3177%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="57.1663%" y="357" width="0.0986%" height="15" fill="rgb(249,111,24)" fg:x="1739" fg:w="3"/><text x="57.4163%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="341" width="0.0329%" height="15" fill="rgb(250,223,3)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="325" width="0.0329%" height="15" fill="rgb(236,178,37)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="309" width="0.0329%" height="15" fill="rgb(241,158,50)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="293" width="0.0329%" height="15" fill="rgb(213,121,41)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="277" width="0.0329%" height="15" fill="rgb(240,92,3)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="261" width="0.0329%" height="15" fill="rgb(205,123,3)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="245" width="0.0329%" height="15" fill="rgb(205,97,47)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.2321%" y="229" width="0.0329%" height="15" fill="rgb(247,152,14)" fg:x="1741" fg:w="1"/><text x="57.4821%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.10%)</title><rect x="57.4951%" y="309" width="0.0986%" height="15" fill="rgb(248,195,53)" fg:x="1749" fg:w="3"/><text x="57.7451%" y="319.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.16%)</title><rect x="57.4622%" y="325" width="0.1644%" height="15" fill="rgb(226,201,16)" fg:x="1748" fg:w="5"/><text x="57.7122%" y="335.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="57.5937%" y="309" width="0.0329%" height="15" fill="rgb(205,98,0)" fg:x="1752" fg:w="1"/><text x="57.8437%" y="319.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (13 samples, 0.43%)</title><rect x="57.2650%" y="341" width="0.4274%" height="15" fill="rgb(214,191,48)" fg:x="1742" fg:w="13"/><text x="57.5150%" y="351.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="57.6266%" y="325" width="0.0657%" height="15" fill="rgb(237,112,39)" fg:x="1753" fg:w="2"/><text x="57.8766%" y="335.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="57.6923%" y="341" width="0.0329%" height="15" fill="rgb(247,203,27)" fg:x="1755" fg:w="1"/><text x="57.9423%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (478 samples, 15.71%)</title><rect x="42.0447%" y="373" width="15.7133%" height="15" fill="rgb(235,124,28)" fg:x="1279" fg:w="478"/><text x="42.2947%" y="383.50">rust-gkat`rust_gkat::ker..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (15 samples, 0.49%)</title><rect x="57.2650%" y="357" width="0.4931%" height="15" fill="rgb(208,207,46)" fg:x="1742" fg:w="15"/><text x="57.5150%" y="367.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="57.7252%" y="341" width="0.0329%" height="15" fill="rgb(234,176,4)" fg:x="1756" fg:w="1"/><text x="57.9752%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="373" width="0.0329%" height="15" fill="rgb(230,133,28)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="357" width="0.0329%" height="15" fill="rgb(211,137,40)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="341" width="0.0329%" height="15" fill="rgb(254,35,13)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="325" width="0.0329%" height="15" fill="rgb(225,49,51)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="309" width="0.0329%" height="15" fill="rgb(251,10,15)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="293" width="0.0329%" height="15" fill="rgb(228,207,15)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="277" width="0.0329%" height="15" fill="rgb(241,99,19)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="261" width="0.0329%" height="15" fill="rgb(207,104,49)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="57.7581%" y="245" width="0.0329%" height="15" fill="rgb(234,99,18)" fg:x="1757" fg:w="1"/><text x="58.0081%" y="255.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="58.0210%" y="341" width="0.0329%" height="15" fill="rgb(213,191,49)" fg:x="1765" fg:w="1"/><text x="58.2710%" y="351.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="58.0539%" y="341" width="0.0329%" height="15" fill="rgb(210,226,19)" fg:x="1766" fg:w="1"/><text x="58.3039%" y="351.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="58.0868%" y="341" width="0.0329%" height="15" fill="rgb(229,97,18)" fg:x="1767" fg:w="1"/><text x="58.3368%" y="351.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="58.1525%" y="325" width="0.0329%" height="15" fill="rgb(211,167,15)" fg:x="1769" fg:w="1"/><text x="58.4025%" y="335.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="58.1854%" y="325" width="0.0329%" height="15" fill="rgb(210,169,34)" fg:x="1770" fg:w="1"/><text x="58.4354%" y="335.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="58.1197%" y="341" width="0.1315%" height="15" fill="rgb(241,121,31)" fg:x="1768" fg:w="4"/><text x="58.3697%" y="351.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="58.2183%" y="325" width="0.0329%" height="15" fill="rgb(232,40,11)" fg:x="1771" fg:w="1"/><text x="58.4683%" y="335.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (16 samples, 0.53%)</title><rect x="57.7909%" y="357" width="0.5260%" height="15" fill="rgb(205,86,26)" fg:x="1758" fg:w="16"/><text x="58.0409%" y="367.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="58.2512%" y="341" width="0.0657%" height="15" fill="rgb(231,126,28)" fg:x="1772" fg:w="2"/><text x="58.5012%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (17 samples, 0.56%)</title><rect x="57.7909%" y="373" width="0.5588%" height="15" fill="rgb(219,221,18)" fg:x="1758" fg:w="17"/><text x="58.0409%" y="383.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="58.3169%" y="357" width="0.0329%" height="15" fill="rgb(211,40,0)" fg:x="1774" fg:w="1"/><text x="58.5669%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (524 samples, 17.23%)</title><rect x="41.1900%" y="389" width="17.2255%" height="15" fill="rgb(239,85,43)" fg:x="1253" fg:w="524"/><text x="41.4400%" y="399.50">rust-gkat`rust_gkat::kernel..</text></g><g><title>rust-gkat`stacker::remaining_stack (2 samples, 0.07%)</title><rect x="58.3498%" y="373" width="0.0657%" height="15" fill="rgb(231,55,21)" fg:x="1775" fg:w="2"/><text x="58.5998%" y="383.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="58.5799%" y="357" width="0.0657%" height="15" fill="rgb(225,184,43)" fg:x="1782" fg:w="2"/><text x="58.8299%" y="367.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="58.6456%" y="357" width="0.0657%" height="15" fill="rgb(251,158,41)" fg:x="1784" fg:w="2"/><text x="58.8956%" y="367.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="58.7114%" y="357" width="0.0329%" height="15" fill="rgb(234,159,37)" fg:x="1786" fg:w="1"/><text x="58.9614%" y="367.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="58.9086%" y="341" width="0.0657%" height="15" fill="rgb(216,204,22)" fg:x="1792" fg:w="2"/><text x="59.1586%" y="351.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.26%)</title><rect x="58.7442%" y="357" width="0.2630%" height="15" fill="rgb(214,17,3)" fg:x="1787" fg:w="8"/><text x="58.9942%" y="367.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="58.9744%" y="341" width="0.0329%" height="15" fill="rgb(212,111,17)" fg:x="1794" fg:w="1"/><text x="59.2244%" y="351.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="59.0072%" y="357" width="0.0329%" height="15" fill="rgb(221,157,24)" fg:x="1795" fg:w="1"/><text x="59.2572%" y="367.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="59.0072%" y="341" width="0.0329%" height="15" fill="rgb(252,16,13)" fg:x="1795" fg:w="1"/><text x="59.2572%" y="351.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="59.0072%" y="325" width="0.0329%" height="15" fill="rgb(221,62,2)" fg:x="1795" fg:w="1"/><text x="59.2572%" y="335.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="59.0072%" y="309" width="0.0329%" height="15" fill="rgb(247,87,22)" fg:x="1795" fg:w="1"/><text x="59.2572%" y="319.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (26 samples, 0.85%)</title><rect x="58.4155%" y="373" width="0.8547%" height="15" fill="rgb(215,73,9)" fg:x="1777" fg:w="26"/><text x="58.6655%" y="383.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (7 samples, 0.23%)</title><rect x="59.0401%" y="357" width="0.2301%" height="15" fill="rgb(207,175,33)" fg:x="1796" fg:w="7"/><text x="59.2901%" y="367.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="59.2702%" y="373" width="0.0329%" height="15" fill="rgb(243,129,54)" fg:x="1803" fg:w="1"/><text x="59.5202%" y="383.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="59.3031%" y="373" width="0.0329%" height="15" fill="rgb(227,119,45)" fg:x="1804" fg:w="1"/><text x="59.5531%" y="383.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="59.3360%" y="373" width="0.0657%" height="15" fill="rgb(205,109,36)" fg:x="1805" fg:w="2"/><text x="59.5860%" y="383.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="59.4017%" y="373" width="0.0657%" height="15" fill="rgb(205,6,39)" fg:x="1807" fg:w="2"/><text x="59.6517%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (33 samples, 1.08%)</title><rect x="58.4155%" y="389" width="1.0848%" height="15" fill="rgb(221,32,16)" fg:x="1777" fg:w="33"/><text x="58.6655%" y="399.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="59.4675%" y="373" width="0.0329%" height="15" fill="rgb(228,144,50)" fg:x="1809" fg:w="1"/><text x="59.7175%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (586 samples, 19.26%)</title><rect x="40.2696%" y="405" width="19.2636%" height="15" fill="rgb(229,201,53)" fg:x="1225" fg:w="586"/><text x="40.5196%" y="415.50">rust-gkat`rust_gkat::kernel1::..</text></g><g><title>rust-gkat`stacker::remaining_stack (1 samples, 0.03%)</title><rect x="59.5003%" y="389" width="0.0329%" height="15" fill="rgb(249,153,27)" fg:x="1810" fg:w="1"/><text x="59.7503%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="405" width="0.0657%" height="15" fill="rgb(227,106,25)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="389" width="0.0657%" height="15" fill="rgb(230,65,29)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="373" width="0.0657%" height="15" fill="rgb(221,57,46)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="357" width="0.0657%" height="15" fill="rgb(229,161,17)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="341" width="0.0657%" height="15" fill="rgb(222,213,11)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="325" width="0.0657%" height="15" fill="rgb(235,35,13)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="309" width="0.0657%" height="15" fill="rgb(233,158,34)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="293" width="0.0657%" height="15" fill="rgb(215,151,48)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="277" width="0.0657%" height="15" fill="rgb(229,84,14)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="261" width="0.0657%" height="15" fill="rgb(229,68,14)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="59.5332%" y="245" width="0.0657%" height="15" fill="rgb(243,106,26)" fg:x="1811" fg:w="2"/><text x="59.7832%" y="255.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="59.5661%" y="229" width="0.0329%" height="15" fill="rgb(206,45,38)" fg:x="1812" fg:w="1"/><text x="59.8161%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="59.7633%" y="373" width="0.0329%" height="15" fill="rgb(226,6,15)" fg:x="1818" fg:w="1"/><text x="60.0133%" y="383.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="59.7962%" y="373" width="0.0329%" height="15" fill="rgb(232,22,54)" fg:x="1819" fg:w="1"/><text x="60.0462%" y="383.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="59.8291%" y="373" width="0.0986%" height="15" fill="rgb(229,222,32)" fg:x="1820" fg:w="3"/><text x="60.0791%" y="383.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="59.9277%" y="373" width="0.0329%" height="15" fill="rgb(228,62,29)" fg:x="1823" fg:w="1"/><text x="60.1777%" y="383.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="59.9934%" y="357" width="0.1315%" height="15" fill="rgb(251,103,34)" fg:x="1825" fg:w="4"/><text x="60.2434%" y="367.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.20%)</title><rect x="59.9606%" y="373" width="0.1972%" height="15" fill="rgb(233,12,30)" fg:x="1824" fg:w="6"/><text x="60.2106%" y="383.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="60.1249%" y="357" width="0.0329%" height="15" fill="rgb(238,52,0)" fg:x="1829" fg:w="1"/><text x="60.3749%" y="367.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.07%)</title><rect x="60.1578%" y="373" width="0.0657%" height="15" fill="rgb(223,98,5)" fg:x="1830" fg:w="2"/><text x="60.4078%" y="383.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (2 samples, 0.07%)</title><rect x="60.1578%" y="357" width="0.0657%" height="15" fill="rgb(228,75,37)" fg:x="1830" fg:w="2"/><text x="60.4078%" y="367.50"></text></g><g><title>rust-gkat`mi_find_page (2 samples, 0.07%)</title><rect x="60.1578%" y="341" width="0.0657%" height="15" fill="rgb(205,115,49)" fg:x="1830" fg:w="2"/><text x="60.4078%" y="351.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="60.1907%" y="325" width="0.0329%" height="15" fill="rgb(250,154,43)" fg:x="1831" fg:w="1"/><text x="60.4407%" y="335.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (23 samples, 0.76%)</title><rect x="59.5989%" y="389" width="0.7561%" height="15" fill="rgb(226,43,29)" fg:x="1813" fg:w="23"/><text x="59.8489%" y="399.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (4 samples, 0.13%)</title><rect x="60.2235%" y="373" width="0.1315%" height="15" fill="rgb(249,228,39)" fg:x="1832" fg:w="4"/><text x="60.4735%" y="383.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="60.3550%" y="389" width="0.0329%" height="15" fill="rgb(216,79,43)" fg:x="1836" fg:w="1"/><text x="60.6050%" y="399.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="60.3879%" y="389" width="0.0329%" height="15" fill="rgb(228,95,12)" fg:x="1837" fg:w="1"/><text x="60.6379%" y="399.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="60.4208%" y="389" width="0.0657%" height="15" fill="rgb(249,221,15)" fg:x="1838" fg:w="2"/><text x="60.6708%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (28 samples, 0.92%)</title><rect x="59.5989%" y="405" width="0.9204%" height="15" fill="rgb(233,34,13)" fg:x="1813" fg:w="28"/><text x="59.8489%" y="415.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="60.4865%" y="389" width="0.0329%" height="15" fill="rgb(214,103,39)" fg:x="1840" fg:w="1"/><text x="60.7365%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (664 samples, 21.83%)</title><rect x="38.7903%" y="421" width="21.8277%" height="15" fill="rgb(251,126,39)" fg:x="1180" fg:w="664"/><text x="39.0403%" y="431.50">rust-gkat`rust_gkat::kernel1::deri..</text></g><g><title>rust-gkat`stacker::remaining_stack (3 samples, 0.10%)</title><rect x="60.5194%" y="405" width="0.0986%" height="15" fill="rgb(214,216,36)" fg:x="1841" fg:w="3"/><text x="60.7694%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="60.6180%" y="421" width="0.0657%" height="15" fill="rgb(220,221,8)" fg:x="1844" fg:w="2"/><text x="60.8680%" y="431.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="405" width="0.0329%" height="15" fill="rgb(240,216,3)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="389" width="0.0329%" height="15" fill="rgb(232,218,17)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="373" width="0.0329%" height="15" fill="rgb(229,163,45)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="357" width="0.0329%" height="15" fill="rgb(231,110,42)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="341" width="0.0329%" height="15" fill="rgb(208,170,48)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="325" width="0.0329%" height="15" fill="rgb(239,116,25)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="309" width="0.0329%" height="15" fill="rgb(219,200,50)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="293" width="0.0329%" height="15" fill="rgb(245,200,0)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="277" width="0.0329%" height="15" fill="rgb(245,119,33)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="261" width="0.0329%" height="15" fill="rgb(231,125,12)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="60.6509%" y="245" width="0.0329%" height="15" fill="rgb(216,96,41)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="255.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="60.6509%" y="229" width="0.0329%" height="15" fill="rgb(248,43,45)" fg:x="1845" fg:w="1"/><text x="60.9009%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="60.9796%" y="389" width="0.0329%" height="15" fill="rgb(217,222,7)" fg:x="1855" fg:w="1"/><text x="61.2296%" y="399.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.16%)</title><rect x="61.0125%" y="389" width="0.1644%" height="15" fill="rgb(233,28,6)" fg:x="1856" fg:w="5"/><text x="61.2625%" y="399.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (3 samples, 0.10%)</title><rect x="61.1769%" y="389" width="0.0986%" height="15" fill="rgb(231,218,15)" fg:x="1861" fg:w="3"/><text x="61.4269%" y="399.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="61.2755%" y="389" width="0.0329%" height="15" fill="rgb(226,171,48)" fg:x="1864" fg:w="1"/><text x="61.5255%" y="399.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (4 samples, 0.13%)</title><rect x="61.3083%" y="389" width="0.1315%" height="15" fill="rgb(235,201,9)" fg:x="1865" fg:w="4"/><text x="61.5583%" y="399.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="61.4727%" y="373" width="0.0657%" height="15" fill="rgb(217,80,15)" fg:x="1870" fg:w="2"/><text x="61.7227%" y="383.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="61.4398%" y="389" width="0.1315%" height="15" fill="rgb(219,152,8)" fg:x="1869" fg:w="4"/><text x="61.6898%" y="399.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="61.5385%" y="373" width="0.0329%" height="15" fill="rgb(243,107,38)" fg:x="1872" fg:w="1"/><text x="61.7885%" y="383.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (34 samples, 1.12%)</title><rect x="60.7495%" y="405" width="1.1177%" height="15" fill="rgb(231,17,5)" fg:x="1848" fg:w="34"/><text x="60.9995%" y="415.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (9 samples, 0.30%)</title><rect x="61.5713%" y="389" width="0.2959%" height="15" fill="rgb(209,25,54)" fg:x="1873" fg:w="9"/><text x="61.8213%" y="399.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="61.8672%" y="405" width="0.0329%" height="15" fill="rgb(219,0,2)" fg:x="1882" fg:w="1"/><text x="62.1172%" y="415.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="61.9001%" y="405" width="0.0329%" height="15" fill="rgb(246,9,5)" fg:x="1883" fg:w="1"/><text x="62.1501%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="61.9329%" y="405" width="0.0329%" height="15" fill="rgb(226,159,4)" fg:x="1884" fg:w="1"/><text x="62.1829%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (40 samples, 1.31%)</title><rect x="60.6838%" y="421" width="1.3149%" height="15" fill="rgb(219,175,34)" fg:x="1846" fg:w="40"/><text x="60.9338%" y="431.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="61.9658%" y="405" width="0.0329%" height="15" fill="rgb(236,10,46)" fg:x="1885" fg:w="1"/><text x="62.2158%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (773 samples, 25.41%)</title><rect x="36.6206%" y="437" width="25.4109%" height="15" fill="rgb(240,211,16)" fg:x="1114" fg:w="773"/><text x="36.8706%" y="447.50">rust-gkat`rust_gkat::kernel1::derivative:..</text></g><g><title>rust-gkat`stacker::remaining_stack (1 samples, 0.03%)</title><rect x="61.9987%" y="421" width="0.0329%" height="15" fill="rgb(205,3,43)" fg:x="1886" fg:w="1"/><text x="62.2487%" y="431.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="62.0316%" y="437" width="0.0657%" height="15" fill="rgb(245,7,22)" fg:x="1887" fg:w="2"/><text x="62.2816%" y="447.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="421" width="0.0329%" height="15" fill="rgb(239,132,32)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="431.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="405" width="0.0329%" height="15" fill="rgb(228,202,34)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="389" width="0.0329%" height="15" fill="rgb(254,200,22)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="373" width="0.0329%" height="15" fill="rgb(219,10,39)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="357" width="0.0329%" height="15" fill="rgb(226,210,39)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="341" width="0.0329%" height="15" fill="rgb(208,219,16)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="325" width="0.0329%" height="15" fill="rgb(216,158,51)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="309" width="0.0329%" height="15" fill="rgb(233,14,44)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="293" width="0.0329%" height="15" fill="rgb(237,97,39)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="277" width="0.0329%" height="15" fill="rgb(218,198,43)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="62.0644%" y="261" width="0.0329%" height="15" fill="rgb(231,104,20)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddOr (1 samples, 0.03%)</title><rect x="62.0644%" y="245" width="0.0329%" height="15" fill="rgb(254,36,13)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="62.0644%" y="229" width="0.0329%" height="15" fill="rgb(248,14,50)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="62.0644%" y="213" width="0.0329%" height="15" fill="rgb(217,107,29)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="62.0644%" y="197" width="0.0329%" height="15" fill="rgb(251,169,33)" fg:x="1888" fg:w="1"/><text x="62.3144%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.20%)</title><rect x="62.6233%" y="405" width="0.1972%" height="15" fill="rgb(217,108,32)" fg:x="1905" fg:w="6"/><text x="62.8733%" y="415.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (3 samples, 0.10%)</title><rect x="62.8205%" y="405" width="0.0986%" height="15" fill="rgb(219,66,42)" fg:x="1911" fg:w="3"/><text x="63.0705%" y="415.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (4 samples, 0.13%)</title><rect x="62.9191%" y="405" width="0.1315%" height="15" fill="rgb(206,180,7)" fg:x="1914" fg:w="4"/><text x="63.1691%" y="415.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="63.0506%" y="405" width="0.0657%" height="15" fill="rgb(208,226,31)" fg:x="1918" fg:w="2"/><text x="63.3006%" y="415.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.20%)</title><rect x="63.2807%" y="389" width="0.1972%" height="15" fill="rgb(218,26,49)" fg:x="1925" fg:w="6"/><text x="63.5307%" y="399.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="63.4780%" y="389" width="0.0986%" height="15" fill="rgb(233,197,48)" fg:x="1931" fg:w="3"/><text x="63.7280%" y="399.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (3 samples, 0.10%)</title><rect x="63.5766%" y="389" width="0.0986%" height="15" fill="rgb(252,181,51)" fg:x="1934" fg:w="3"/><text x="63.8266%" y="399.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.59%)</title><rect x="63.1164%" y="405" width="0.5917%" height="15" fill="rgb(253,90,19)" fg:x="1920" fg:w="18"/><text x="63.3664%" y="415.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="63.6752%" y="389" width="0.0329%" height="15" fill="rgb(215,171,30)" fg:x="1937" fg:w="1"/><text x="63.9252%" y="399.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (52 samples, 1.71%)</title><rect x="62.1631%" y="421" width="1.7094%" height="15" fill="rgb(214,222,9)" fg:x="1891" fg:w="52"/><text x="62.4131%" y="431.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (5 samples, 0.16%)</title><rect x="63.7081%" y="405" width="0.1644%" height="15" fill="rgb(223,3,22)" fg:x="1938" fg:w="5"/><text x="63.9581%" y="415.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="63.8725%" y="421" width="0.0329%" height="15" fill="rgb(225,196,46)" fg:x="1943" fg:w="1"/><text x="64.1225%" y="431.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.07%)</title><rect x="63.9053%" y="421" width="0.0657%" height="15" fill="rgb(209,110,37)" fg:x="1944" fg:w="2"/><text x="64.1553%" y="431.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="63.9711%" y="421" width="0.0657%" height="15" fill="rgb(249,89,12)" fg:x="1946" fg:w="2"/><text x="64.2211%" y="431.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (898 samples, 29.52%)</title><rect x="34.5496%" y="453" width="29.5201%" height="15" fill="rgb(226,27,33)" fg:x="1051" fg:w="898"/><text x="34.7996%" y="463.50">rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (60 samples, 1.97%)</title><rect x="62.0973%" y="437" width="1.9724%" height="15" fill="rgb(213,82,22)" fg:x="1889" fg:w="60"/><text x="62.3473%" y="447.50">r..</text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="64.0368%" y="421" width="0.0329%" height="15" fill="rgb(248,140,0)" fg:x="1948" fg:w="1"/><text x="64.2868%" y="431.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="64.0697%" y="453" width="0.0329%" height="15" fill="rgb(228,106,3)" fg:x="1949" fg:w="1"/><text x="64.3197%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.07%)</title><rect x="64.5299%" y="421" width="0.0657%" height="15" fill="rgb(209,23,37)" fg:x="1963" fg:w="2"/><text x="64.7799%" y="431.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="64.5957%" y="421" width="0.0329%" height="15" fill="rgb(241,93,50)" fg:x="1965" fg:w="1"/><text x="64.8457%" y="431.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (3 samples, 0.10%)</title><rect x="64.6285%" y="421" width="0.0986%" height="15" fill="rgb(253,46,43)" fg:x="1966" fg:w="3"/><text x="64.8785%" y="431.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (7 samples, 0.23%)</title><rect x="64.7272%" y="421" width="0.2301%" height="15" fill="rgb(226,206,43)" fg:x="1969" fg:w="7"/><text x="64.9772%" y="431.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="64.9573%" y="421" width="0.0329%" height="15" fill="rgb(217,54,7)" fg:x="1976" fg:w="1"/><text x="65.2073%" y="431.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="65.2531%" y="405" width="0.1315%" height="15" fill="rgb(223,5,52)" fg:x="1985" fg:w="4"/><text x="65.5031%" y="415.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (4 samples, 0.13%)</title><rect x="65.3846%" y="405" width="0.1315%" height="15" fill="rgb(206,52,46)" fg:x="1989" fg:w="4"/><text x="65.6346%" y="415.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (2 samples, 0.07%)</title><rect x="65.5161%" y="405" width="0.0657%" height="15" fill="rgb(253,136,11)" fg:x="1993" fg:w="2"/><text x="65.7661%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.66%)</title><rect x="64.9901%" y="421" width="0.6575%" height="15" fill="rgb(208,106,33)" fg:x="1977" fg:w="20"/><text x="65.2401%" y="431.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="65.5819%" y="405" width="0.0657%" height="15" fill="rgb(206,54,4)" fg:x="1995" fg:w="2"/><text x="65.8319%" y="415.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (61 samples, 2.01%)</title><rect x="64.1683%" y="437" width="2.0053%" height="15" fill="rgb(213,3,15)" fg:x="1952" fg:w="61"/><text x="64.4183%" y="447.50">r..</text></g><g><title>rust-gkat`mi_malloc_aligned (16 samples, 0.53%)</title><rect x="65.6476%" y="421" width="0.5260%" height="15" fill="rgb(252,211,39)" fg:x="1997" fg:w="16"/><text x="65.8976%" y="431.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="66.1736%" y="437" width="0.0329%" height="15" fill="rgb(223,6,36)" fg:x="2013" fg:w="1"/><text x="66.4236%" y="447.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="66.2064%" y="437" width="0.0329%" height="15" fill="rgb(252,169,45)" fg:x="2014" fg:w="1"/><text x="66.4564%" y="447.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="66.2393%" y="437" width="0.0657%" height="15" fill="rgb(212,48,26)" fg:x="2015" fg:w="2"/><text x="66.4893%" y="447.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (1,033 samples, 33.96%)</title><rect x="32.3800%" y="469" width="33.9579%" height="15" fill="rgb(251,102,48)" fg:x="985" fg:w="1033"/><text x="32.6300%" y="479.50">rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_g..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (68 samples, 2.24%)</title><rect x="64.1026%" y="453" width="2.2354%" height="15" fill="rgb(243,208,16)" fg:x="1950" fg:w="68"/><text x="64.3526%" y="463.50">r..</text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="66.3051%" y="437" width="0.0329%" height="15" fill="rgb(219,96,24)" fg:x="2017" fg:w="1"/><text x="66.5551%" y="447.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="66.3379%" y="469" width="0.0329%" height="15" fill="rgb(219,33,29)" fg:x="2018" fg:w="1"/><text x="66.5879%" y="479.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="66.7324%" y="437" width="0.0329%" height="15" fill="rgb(223,176,5)" fg:x="2030" fg:w="1"/><text x="66.9824%" y="447.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (7 samples, 0.23%)</title><rect x="66.7653%" y="437" width="0.2301%" height="15" fill="rgb(228,140,14)" fg:x="2031" fg:w="7"/><text x="67.0153%" y="447.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="66.9954%" y="437" width="0.0329%" height="15" fill="rgb(217,179,31)" fg:x="2038" fg:w="1"/><text x="67.2454%" y="447.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.23%)</title><rect x="67.1926%" y="421" width="0.2301%" height="15" fill="rgb(230,9,30)" fg:x="2044" fg:w="7"/><text x="67.4426%" y="431.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (7 samples, 0.23%)</title><rect x="67.4227%" y="421" width="0.2301%" height="15" fill="rgb(230,136,20)" fg:x="2051" fg:w="7"/><text x="67.6727%" y="431.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="67.6529%" y="421" width="0.0329%" height="15" fill="rgb(215,210,22)" fg:x="2058" fg:w="1"/><text x="67.9029%" y="431.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.69%)</title><rect x="68.3761%" y="405" width="0.6903%" height="15" fill="rgb(218,43,5)" fg:x="2080" fg:w="21"/><text x="68.6261%" y="415.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="69.0664%" y="405" width="0.1644%" height="15" fill="rgb(216,11,5)" fg:x="2101" fg:w="5"/><text x="69.3164%" y="415.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="69.2308%" y="405" width="0.0657%" height="15" fill="rgb(209,82,29)" fg:x="2106" fg:w="2"/><text x="69.4808%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (72 samples, 2.37%)</title><rect x="67.0283%" y="437" width="2.3669%" height="15" fill="rgb(244,115,12)" fg:x="2039" fg:w="72"/><text x="67.2783%" y="447.50">ru..</text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (52 samples, 1.71%)</title><rect x="67.6857%" y="421" width="1.7094%" height="15" fill="rgb(222,82,18)" fg:x="2059" fg:w="52"/><text x="67.9357%" y="431.50"></text></g><g><title>rust-gkat`mi_segment_free (3 samples, 0.10%)</title><rect x="69.2965%" y="405" width="0.0986%" height="15" fill="rgb(249,227,8)" fg:x="2108" fg:w="3"/><text x="69.5465%" y="415.50"></text></g><g><title>rust-gkat`_mi_arena_free (3 samples, 0.10%)</title><rect x="69.2965%" y="389" width="0.0986%" height="15" fill="rgb(253,141,45)" fg:x="2108" fg:w="3"/><text x="69.5465%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (3 samples, 0.10%)</title><rect x="69.2965%" y="373" width="0.0986%" height="15" fill="rgb(234,184,4)" fg:x="2108" fg:w="3"/><text x="69.5465%" y="383.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="69.3951%" y="437" width="0.0329%" height="15" fill="rgb(218,194,23)" fg:x="2111" fg:w="1"/><text x="69.6451%" y="447.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="69.3951%" y="421" width="0.0329%" height="15" fill="rgb(235,66,41)" fg:x="2111" fg:w="1"/><text x="69.6451%" y="431.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="69.3951%" y="405" width="0.0329%" height="15" fill="rgb(245,217,1)" fg:x="2111" fg:w="1"/><text x="69.6451%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (1,186 samples, 38.99%)</title><rect x="30.8679%" y="485" width="38.9875%" height="15" fill="rgb(229,91,1)" fg:x="939" fg:w="1186"/><text x="31.1179%" y="495.50">rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kern..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (106 samples, 3.48%)</title><rect x="66.3708%" y="469" width="3.4845%" height="15" fill="rgb(207,101,30)" fg:x="2019" fg:w="106"/><text x="66.6208%" y="479.50">rus..</text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (105 samples, 3.45%)</title><rect x="66.4037%" y="453" width="3.4517%" height="15" fill="rgb(223,82,49)" fg:x="2020" fg:w="105"/><text x="66.6537%" y="463.50">rus..</text></g><g><title>rust-gkat`mi_malloc_aligned (13 samples, 0.43%)</title><rect x="69.4280%" y="437" width="0.4274%" height="15" fill="rgb(218,167,17)" fg:x="2112" fg:w="13"/><text x="69.6780%" y="447.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="69.8554%" y="485" width="0.0329%" height="15" fill="rgb(208,103,14)" fg:x="2125" fg:w="1"/><text x="70.1054%" y="495.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="70.1512%" y="453" width="0.0329%" height="15" fill="rgb(238,20,8)" fg:x="2134" fg:w="1"/><text x="70.4012%" y="463.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="70.1841%" y="453" width="0.0657%" height="15" fill="rgb(218,80,54)" fg:x="2135" fg:w="2"/><text x="70.4341%" y="463.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="70.2498%" y="453" width="0.0657%" height="15" fill="rgb(240,144,17)" fg:x="2137" fg:w="2"/><text x="70.4998%" y="463.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="70.3156%" y="453" width="0.1644%" height="15" fill="rgb(245,27,50)" fg:x="2139" fg:w="5"/><text x="70.5656%" y="463.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="70.4799%" y="453" width="0.0329%" height="15" fill="rgb(251,51,7)" fg:x="2144" fg:w="1"/><text x="70.7299%" y="463.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="70.5128%" y="453" width="0.0657%" height="15" fill="rgb(245,217,29)" fg:x="2145" fg:w="2"/><text x="70.7628%" y="463.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="70.7758%" y="437" width="0.0657%" height="15" fill="rgb(221,176,29)" fg:x="2153" fg:w="2"/><text x="71.0258%" y="447.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="70.8416%" y="437" width="0.0329%" height="15" fill="rgb(212,180,24)" fg:x="2155" fg:w="1"/><text x="71.0916%" y="447.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (2 samples, 0.07%)</title><rect x="70.8744%" y="437" width="0.0657%" height="15" fill="rgb(254,24,2)" fg:x="2156" fg:w="2"/><text x="71.1244%" y="447.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.39%)</title><rect x="70.5786%" y="453" width="0.3945%" height="15" fill="rgb(230,100,2)" fg:x="2147" fg:w="12"/><text x="70.8286%" y="463.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="70.9402%" y="437" width="0.0329%" height="15" fill="rgb(219,142,25)" fg:x="2158" fg:w="1"/><text x="71.1902%" y="447.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.07%)</title><rect x="70.9730%" y="453" width="0.0657%" height="15" fill="rgb(240,73,43)" fg:x="2159" fg:w="2"/><text x="71.2230%" y="463.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="71.0059%" y="437" width="0.0329%" height="15" fill="rgb(214,114,15)" fg:x="2160" fg:w="1"/><text x="71.2559%" y="447.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="71.0059%" y="421" width="0.0329%" height="15" fill="rgb(207,130,4)" fg:x="2160" fg:w="1"/><text x="71.2559%" y="431.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (43 samples, 1.41%)</title><rect x="69.8882%" y="469" width="1.4135%" height="15" fill="rgb(221,25,40)" fg:x="2126" fg:w="43"/><text x="70.1382%" y="479.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (8 samples, 0.26%)</title><rect x="71.0388%" y="453" width="0.2630%" height="15" fill="rgb(241,184,7)" fg:x="2161" fg:w="8"/><text x="71.2888%" y="463.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="71.3018%" y="469" width="0.0329%" height="15" fill="rgb(235,159,4)" fg:x="2169" fg:w="1"/><text x="71.5518%" y="479.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="71.3346%" y="469" width="0.0329%" height="15" fill="rgb(214,87,48)" fg:x="2170" fg:w="1"/><text x="71.5846%" y="479.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="71.3675%" y="469" width="0.0329%" height="15" fill="rgb(246,198,24)" fg:x="2171" fg:w="1"/><text x="71.6175%" y="479.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="71.4004%" y="469" width="0.0657%" height="15" fill="rgb(209,66,40)" fg:x="2172" fg:w="2"/><text x="71.6504%" y="479.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="71.4661%" y="469" width="0.0329%" height="15" fill="rgb(233,147,39)" fg:x="2174" fg:w="1"/><text x="71.7161%" y="479.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (50 samples, 1.64%)</title><rect x="69.8882%" y="485" width="1.6437%" height="15" fill="rgb(231,145,52)" fg:x="2126" fg:w="50"/><text x="70.1382%" y="495.50"></text></g><g><title>rust-gkat`mi_page_queue_enqueue_from (1 samples, 0.03%)</title><rect x="71.4990%" y="469" width="0.0329%" height="15" fill="rgb(206,20,26)" fg:x="2175" fg:w="1"/><text x="71.7490%" y="479.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (1,300 samples, 42.74%)</title><rect x="28.8626%" y="501" width="42.7350%" height="15" fill="rgb(238,220,4)" fg:x="878" fg:w="1300"/><text x="29.1126%" y="511.50">rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::s..</text></g><g><title>rust-gkat`rust_psm_stack_pointer (2 samples, 0.07%)</title><rect x="71.5319%" y="485" width="0.0657%" height="15" fill="rgb(252,195,42)" fg:x="2176" fg:w="2"/><text x="71.7819%" y="495.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (2 samples, 0.07%)</title><rect x="71.5976%" y="501" width="0.0657%" height="15" fill="rgb(209,10,6)" fg:x="2178" fg:w="2"/><text x="71.8476%" y="511.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="72.0907%" y="469" width="0.0657%" height="15" fill="rgb(229,3,52)" fg:x="2193" fg:w="2"/><text x="72.3407%" y="479.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="72.1565%" y="469" width="0.0657%" height="15" fill="rgb(253,49,37)" fg:x="2195" fg:w="2"/><text x="72.4065%" y="479.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="72.2222%" y="469" width="0.0986%" height="15" fill="rgb(240,103,49)" fg:x="2197" fg:w="3"/><text x="72.4722%" y="479.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="72.3208%" y="469" width="0.0329%" height="15" fill="rgb(250,182,30)" fg:x="2200" fg:w="1"/><text x="72.5708%" y="479.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="72.6824%" y="453" width="0.0657%" height="15" fill="rgb(248,8,30)" fg:x="2211" fg:w="2"/><text x="72.9324%" y="463.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="72.7482%" y="453" width="0.0657%" height="15" fill="rgb(237,120,30)" fg:x="2213" fg:w="2"/><text x="72.9982%" y="463.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (2 samples, 0.07%)</title><rect x="72.8139%" y="453" width="0.0657%" height="15" fill="rgb(221,146,34)" fg:x="2215" fg:w="2"/><text x="73.0639%" y="463.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.59%)</title><rect x="72.3537%" y="469" width="0.5917%" height="15" fill="rgb(242,55,13)" fg:x="2201" fg:w="18"/><text x="72.6037%" y="479.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="72.8797%" y="453" width="0.0657%" height="15" fill="rgb(242,112,31)" fg:x="2217" fg:w="2"/><text x="73.1297%" y="463.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (45 samples, 1.48%)</title><rect x="71.7949%" y="485" width="1.4793%" height="15" fill="rgb(249,192,27)" fg:x="2184" fg:w="45"/><text x="72.0449%" y="495.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (10 samples, 0.33%)</title><rect x="72.9454%" y="469" width="0.3287%" height="15" fill="rgb(208,204,44)" fg:x="2219" fg:w="10"/><text x="73.1954%" y="479.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="73.2742%" y="485" width="0.0329%" height="15" fill="rgb(208,93,54)" fg:x="2229" fg:w="1"/><text x="73.5242%" y="495.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="73.3070%" y="485" width="0.0329%" height="15" fill="rgb(242,1,31)" fg:x="2230" fg:w="1"/><text x="73.5570%" y="495.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (1,434 samples, 47.14%)</title><rect x="26.2656%" y="517" width="47.1400%" height="15" fill="rgb(241,83,25)" fg:x="799" fg:w="1434"/><text x="26.5156%" y="527.50">rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (53 samples, 1.74%)</title><rect x="71.6634%" y="501" width="1.7423%" height="15" fill="rgb(205,169,50)" fg:x="2180" fg:w="53"/><text x="71.9134%" y="511.50"></text></g><g><title>rust-gkat`mi_free (2 samples, 0.07%)</title><rect x="73.3399%" y="485" width="0.0657%" height="15" fill="rgb(239,186,37)" fg:x="2231" fg:w="2"/><text x="73.5899%" y="495.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="73.4057%" y="517" width="0.0329%" height="15" fill="rgb(205,221,10)" fg:x="2233" fg:w="1"/><text x="73.6557%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="73.7015%" y="485" width="0.0329%" height="15" fill="rgb(218,196,15)" fg:x="2242" fg:w="1"/><text x="73.9515%" y="495.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="73.7344%" y="485" width="0.1315%" height="15" fill="rgb(218,196,35)" fg:x="2243" fg:w="4"/><text x="73.9844%" y="495.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="73.8659%" y="485" width="0.0329%" height="15" fill="rgb(233,63,24)" fg:x="2247" fg:w="1"/><text x="74.1159%" y="495.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="73.8988%" y="485" width="0.1644%" height="15" fill="rgb(225,8,4)" fg:x="2248" fg:w="5"/><text x="74.1488%" y="495.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="74.1946%" y="469" width="0.0329%" height="15" fill="rgb(234,105,35)" fg:x="2257" fg:w="1"/><text x="74.4446%" y="479.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="74.2275%" y="469" width="0.0329%" height="15" fill="rgb(236,21,32)" fg:x="2258" fg:w="1"/><text x="74.4775%" y="479.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (4 samples, 0.13%)</title><rect x="74.2604%" y="469" width="0.1315%" height="15" fill="rgb(228,109,6)" fg:x="2259" fg:w="4"/><text x="74.5104%" y="479.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.43%)</title><rect x="74.0631%" y="485" width="0.4274%" height="15" fill="rgb(229,215,31)" fg:x="2253" fg:w="13"/><text x="74.3131%" y="495.50"></text></g><g><title>rust-gkat`core::ptr::hash (3 samples, 0.10%)</title><rect x="74.3918%" y="469" width="0.0986%" height="15" fill="rgb(221,52,54)" fg:x="2263" fg:w="3"/><text x="74.6418%" y="479.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (38 samples, 1.25%)</title><rect x="73.4714%" y="501" width="1.2492%" height="15" fill="rgb(252,129,43)" fg:x="2235" fg:w="38"/><text x="73.7214%" y="511.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (7 samples, 0.23%)</title><rect x="74.4905%" y="485" width="0.2301%" height="15" fill="rgb(248,183,27)" fg:x="2266" fg:w="7"/><text x="74.7405%" y="495.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="74.7206%" y="501" width="0.0329%" height="15" fill="rgb(250,0,22)" fg:x="2273" fg:w="1"/><text x="74.9706%" y="511.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="74.7535%" y="501" width="0.0329%" height="15" fill="rgb(213,166,10)" fg:x="2274" fg:w="1"/><text x="75.0035%" y="511.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (42 samples, 1.38%)</title><rect x="73.4385%" y="517" width="1.3807%" height="15" fill="rgb(207,163,36)" fg:x="2234" fg:w="42"/><text x="73.6885%" y="527.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="74.7863%" y="501" width="0.0329%" height="15" fill="rgb(208,122,22)" fg:x="2275" fg:w="1"/><text x="75.0363%" y="511.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::derivative (1,518 samples, 49.90%)</title><rect x="24.9507%" y="533" width="49.9014%" height="15" fill="rgb(207,104,49)" fg:x="759" fg:w="1518"/><text x="25.2007%" y="543.50">rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solve..</text></g><g><title>rust-gkat`rust_psm_stack_pointer (1 samples, 0.03%)</title><rect x="74.8192%" y="517" width="0.0329%" height="15" fill="rgb(248,211,50)" fg:x="2276" fg:w="1"/><text x="75.0692%" y="527.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.59%)</title><rect x="74.8849%" y="517" width="0.5917%" height="15" fill="rgb(217,13,45)" fg:x="2278" fg:w="18"/><text x="75.1349%" y="527.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.56%)</title><rect x="74.9178%" y="501" width="0.5588%" height="15" fill="rgb(211,216,49)" fg:x="2279" fg:w="17"/><text x="75.1678%" y="511.50"></text></g><g><title>rust-gkat`mi_segment_free (1 samples, 0.03%)</title><rect x="75.4438%" y="485" width="0.0329%" height="15" fill="rgb(221,58,53)" fg:x="2295" fg:w="1"/><text x="75.6938%" y="495.50"></text></g><g><title>rust-gkat`_mi_arena_free (1 samples, 0.03%)</title><rect x="75.4438%" y="469" width="0.0329%" height="15" fill="rgb(220,112,41)" fg:x="2295" fg:w="1"/><text x="75.6938%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.03%)</title><rect x="75.4438%" y="453" width="0.0329%" height="15" fill="rgb(236,38,28)" fg:x="2295" fg:w="1"/><text x="75.6938%" y="463.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="75.6082%" y="501" width="0.0329%" height="15" fill="rgb(227,195,22)" fg:x="2300" fg:w="1"/><text x="75.8582%" y="511.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="75.6410%" y="501" width="0.0329%" height="15" fill="rgb(214,55,33)" fg:x="2301" fg:w="1"/><text x="75.8910%" y="511.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="75.7068%" y="485" width="0.0329%" height="15" fill="rgb(248,80,13)" fg:x="2303" fg:w="1"/><text x="75.9568%" y="495.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="75.7725%" y="469" width="0.0657%" height="15" fill="rgb(238,52,6)" fg:x="2305" fg:w="2"/><text x="76.0225%" y="479.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="75.8383%" y="469" width="0.0329%" height="15" fill="rgb(224,198,47)" fg:x="2307" fg:w="1"/><text x="76.0883%" y="479.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="75.8711%" y="469" width="0.0329%" height="15" fill="rgb(233,171,20)" fg:x="2308" fg:w="1"/><text x="76.1211%" y="479.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="75.9698%" y="453" width="0.0329%" height="15" fill="rgb(241,30,25)" fg:x="2311" fg:w="1"/><text x="76.2198%" y="463.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.36%)</title><rect x="76.0026%" y="453" width="0.3616%" height="15" fill="rgb(207,171,38)" fg:x="2312" fg:w="11"/><text x="76.2526%" y="463.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.23%)</title><rect x="76.1341%" y="437" width="0.2301%" height="15" fill="rgb(234,70,1)" fg:x="2316" fg:w="7"/><text x="76.3841%" y="447.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="76.5286%" y="437" width="0.0329%" height="15" fill="rgb(232,178,18)" fg:x="2328" fg:w="1"/><text x="76.7786%" y="447.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="76.5615%" y="437" width="0.0329%" height="15" fill="rgb(241,78,40)" fg:x="2329" fg:w="1"/><text x="76.8115%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="76.5615%" y="421" width="0.0329%" height="15" fill="rgb(222,35,25)" fg:x="2329" fg:w="1"/><text x="76.8115%" y="431.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="76.6930%" y="421" width="0.0329%" height="15" fill="rgb(207,92,16)" fg:x="2333" fg:w="1"/><text x="76.9430%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="76.6930%" y="405" width="0.0329%" height="15" fill="rgb(216,59,51)" fg:x="2333" fg:w="1"/><text x="76.9430%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="76.7258%" y="421" width="0.0329%" height="15" fill="rgb(213,80,28)" fg:x="2334" fg:w="1"/><text x="76.9758%" y="431.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="76.7916%" y="405" width="0.0329%" height="15" fill="rgb(220,93,7)" fg:x="2336" fg:w="1"/><text x="77.0416%" y="415.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="76.8245%" y="405" width="0.0329%" height="15" fill="rgb(225,24,44)" fg:x="2337" fg:w="1"/><text x="77.0745%" y="415.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="76.8573%" y="405" width="0.0657%" height="15" fill="rgb(243,74,40)" fg:x="2338" fg:w="2"/><text x="77.1073%" y="415.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="77.0217%" y="389" width="0.0329%" height="15" fill="rgb(228,39,7)" fg:x="2343" fg:w="1"/><text x="77.2717%" y="399.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="77.0546%" y="389" width="0.0657%" height="15" fill="rgb(227,79,8)" fg:x="2344" fg:w="2"/><text x="77.3046%" y="399.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="77.0546%" y="373" width="0.0657%" height="15" fill="rgb(236,58,11)" fg:x="2344" fg:w="2"/><text x="77.3046%" y="383.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="77.0874%" y="357" width="0.0329%" height="15" fill="rgb(249,63,35)" fg:x="2345" fg:w="1"/><text x="77.3374%" y="367.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.1203%" y="389" width="0.0329%" height="15" fill="rgb(252,114,16)" fg:x="2346" fg:w="1"/><text x="77.3703%" y="399.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="77.2518%" y="373" width="0.0329%" height="15" fill="rgb(254,151,24)" fg:x="2350" fg:w="1"/><text x="77.5018%" y="383.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="77.3176%" y="357" width="0.0329%" height="15" fill="rgb(253,54,39)" fg:x="2352" fg:w="1"/><text x="77.5676%" y="367.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (2 samples, 0.07%)</title><rect x="77.3504%" y="357" width="0.0657%" height="15" fill="rgb(243,25,45)" fg:x="2353" fg:w="2"/><text x="77.6004%" y="367.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="77.3504%" y="341" width="0.0657%" height="15" fill="rgb(234,134,9)" fg:x="2353" fg:w="2"/><text x="77.6004%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="77.3833%" y="325" width="0.0329%" height="15" fill="rgb(227,166,31)" fg:x="2354" fg:w="1"/><text x="77.6333%" y="335.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="77.3833%" y="309" width="0.0329%" height="15" fill="rgb(245,143,41)" fg:x="2354" fg:w="1"/><text x="77.6333%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="77.3833%" y="293" width="0.0329%" height="15" fill="rgb(238,181,32)" fg:x="2354" fg:w="1"/><text x="77.6333%" y="303.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="77.3833%" y="277" width="0.0329%" height="15" fill="rgb(224,113,18)" fg:x="2354" fg:w="1"/><text x="77.6333%" y="287.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.6134%" y="325" width="0.0329%" height="15" fill="rgb(240,229,28)" fg:x="2361" fg:w="1"/><text x="77.8634%" y="335.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="77.6792%" y="277" width="0.0329%" height="15" fill="rgb(250,185,3)" fg:x="2363" fg:w="1"/><text x="77.9292%" y="287.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="77.7120%" y="277" width="0.0329%" height="15" fill="rgb(212,59,25)" fg:x="2364" fg:w="1"/><text x="77.9620%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="77.7120%" y="261" width="0.0329%" height="15" fill="rgb(221,87,20)" fg:x="2364" fg:w="1"/><text x="77.9620%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="77.7120%" y="245" width="0.0329%" height="15" fill="rgb(213,74,28)" fg:x="2364" fg:w="1"/><text x="77.9620%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="77.7120%" y="229" width="0.0329%" height="15" fill="rgb(224,132,34)" fg:x="2364" fg:w="1"/><text x="77.9620%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="77.7120%" y="213" width="0.0329%" height="15" fill="rgb(222,101,24)" fg:x="2364" fg:w="1"/><text x="77.9620%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.7449%" y="277" width="0.0329%" height="15" fill="rgb(254,142,4)" fg:x="2365" fg:w="1"/><text x="77.9949%" y="287.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="77.7449%" y="261" width="0.0329%" height="15" fill="rgb(230,229,49)" fg:x="2365" fg:w="1"/><text x="77.9949%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (3 samples, 0.10%)</title><rect x="77.7778%" y="261" width="0.0986%" height="15" fill="rgb(238,70,47)" fg:x="2366" fg:w="3"/><text x="78.0278%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="77.8107%" y="245" width="0.0657%" height="15" fill="rgb(231,160,17)" fg:x="2367" fg:w="2"/><text x="78.0607%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="77.8435%" y="229" width="0.0329%" height="15" fill="rgb(218,68,53)" fg:x="2368" fg:w="1"/><text x="78.0935%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="77.8764%" y="261" width="0.0657%" height="15" fill="rgb(236,111,10)" fg:x="2369" fg:w="2"/><text x="78.1264%" y="271.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.07%)</title><rect x="77.8764%" y="245" width="0.0657%" height="15" fill="rgb(224,34,41)" fg:x="2369" fg:w="2"/><text x="78.1264%" y="255.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="78.0736%" y="245" width="0.0329%" height="15" fill="rgb(241,118,19)" fg:x="2375" fg:w="1"/><text x="78.3236%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="78.0736%" y="229" width="0.0329%" height="15" fill="rgb(238,129,25)" fg:x="2375" fg:w="1"/><text x="78.3236%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="78.0736%" y="213" width="0.0329%" height="15" fill="rgb(238,22,31)" fg:x="2375" fg:w="1"/><text x="78.3236%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="78.0736%" y="197" width="0.0329%" height="15" fill="rgb(222,174,48)" fg:x="2375" fg:w="1"/><text x="78.3236%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (102 samples, 3.35%)</title><rect x="74.8521%" y="533" width="3.3531%" height="15" fill="rgb(206,152,40)" fg:x="2277" fg:w="102"/><text x="75.1021%" y="543.50">rus..</text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (83 samples, 2.73%)</title><rect x="75.4767%" y="517" width="2.7285%" height="15" fill="rgb(218,99,54)" fg:x="2296" fg:w="83"/><text x="75.7267%" y="527.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (77 samples, 2.53%)</title><rect x="75.6739%" y="501" width="2.5312%" height="15" fill="rgb(220,174,26)" fg:x="2302" fg:w="77"/><text x="75.9239%" y="511.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (75 samples, 2.47%)</title><rect x="75.7396%" y="485" width="2.4655%" height="15" fill="rgb(245,116,9)" fg:x="2304" fg:w="75"/><text x="75.9896%" y="495.50">ru..</text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (70 samples, 2.30%)</title><rect x="75.9040%" y="469" width="2.3011%" height="15" fill="rgb(209,72,35)" fg:x="2309" fg:w="70"/><text x="76.1540%" y="479.50">r..</text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (56 samples, 1.84%)</title><rect x="76.3642%" y="453" width="1.8409%" height="15" fill="rgb(226,126,21)" fg:x="2323" fg:w="56"/><text x="76.6142%" y="463.50">r..</text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (49 samples, 1.61%)</title><rect x="76.5943%" y="437" width="1.6108%" height="15" fill="rgb(227,192,1)" fg:x="2330" fg:w="49"/><text x="76.8443%" y="447.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (44 samples, 1.45%)</title><rect x="76.7587%" y="421" width="1.4464%" height="15" fill="rgb(237,180,29)" fg:x="2335" fg:w="44"/><text x="77.0087%" y="431.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (39 samples, 1.28%)</title><rect x="76.9231%" y="405" width="1.2821%" height="15" fill="rgb(230,197,35)" fg:x="2340" fg:w="39"/><text x="77.1731%" y="415.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (32 samples, 1.05%)</title><rect x="77.1532%" y="389" width="1.0519%" height="15" fill="rgb(246,193,31)" fg:x="2347" fg:w="32"/><text x="77.4032%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (28 samples, 0.92%)</title><rect x="77.2847%" y="373" width="0.9204%" height="15" fill="rgb(241,36,4)" fg:x="2351" fg:w="28"/><text x="77.5347%" y="383.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (24 samples, 0.79%)</title><rect x="77.4162%" y="357" width="0.7890%" height="15" fill="rgb(241,130,17)" fg:x="2355" fg:w="24"/><text x="77.6662%" y="367.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (20 samples, 0.66%)</title><rect x="77.5477%" y="341" width="0.6575%" height="15" fill="rgb(206,137,32)" fg:x="2359" fg:w="20"/><text x="77.7977%" y="351.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (17 samples, 0.56%)</title><rect x="77.6463%" y="325" width="0.5588%" height="15" fill="rgb(237,228,51)" fg:x="2362" fg:w="17"/><text x="77.8963%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (17 samples, 0.56%)</title><rect x="77.6463%" y="309" width="0.5588%" height="15" fill="rgb(243,6,42)" fg:x="2362" fg:w="17"/><text x="77.8963%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (16 samples, 0.53%)</title><rect x="77.6792%" y="293" width="0.5260%" height="15" fill="rgb(251,74,28)" fg:x="2363" fg:w="16"/><text x="77.9292%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (13 samples, 0.43%)</title><rect x="77.7778%" y="277" width="0.4274%" height="15" fill="rgb(218,20,49)" fg:x="2366" fg:w="13"/><text x="78.0278%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (8 samples, 0.26%)</title><rect x="77.9421%" y="261" width="0.2630%" height="15" fill="rgb(238,28,14)" fg:x="2371" fg:w="8"/><text x="78.1921%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (3 samples, 0.10%)</title><rect x="78.1065%" y="245" width="0.0986%" height="15" fill="rgb(229,40,46)" fg:x="2376" fg:w="3"/><text x="78.3565%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::derivative::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::epsilon (1 samples, 0.03%)</title><rect x="78.1723%" y="229" width="0.0329%" height="15" fill="rgb(244,195,20)" fg:x="2378" fg:w="1"/><text x="78.4223%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="78.3037%" y="517" width="0.0986%" height="15" fill="rgb(253,56,35)" fg:x="2382" fg:w="3"/><text x="78.5537%" y="527.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.10%)</title><rect x="78.3037%" y="501" width="0.0986%" height="15" fill="rgb(210,149,44)" fg:x="2382" fg:w="3"/><text x="78.5537%" y="511.50"></text></g><g><title>rust-gkat`_mi_page_free (1 samples, 0.03%)</title><rect x="78.3695%" y="485" width="0.0329%" height="15" fill="rgb(240,135,12)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="495.50"></text></g><g><title>rust-gkat`mi_segment_page_clear (1 samples, 0.03%)</title><rect x="78.3695%" y="469" width="0.0329%" height="15" fill="rgb(251,24,50)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="479.50"></text></g><g><title>rust-gkat`mi_segment_span_free_coalesce (1 samples, 0.03%)</title><rect x="78.3695%" y="453" width="0.0329%" height="15" fill="rgb(243,200,47)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="463.50"></text></g><g><title>rust-gkat`mi_segment_span_free (1 samples, 0.03%)</title><rect x="78.3695%" y="437" width="0.0329%" height="15" fill="rgb(224,166,26)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="447.50"></text></g><g><title>rust-gkat`mi_segment_try_purge (1 samples, 0.03%)</title><rect x="78.3695%" y="421" width="0.0329%" height="15" fill="rgb(233,0,47)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="431.50"></text></g><g><title>rust-gkat`mi_segment_purge (1 samples, 0.03%)</title><rect x="78.3695%" y="405" width="0.0329%" height="15" fill="rgb(253,80,5)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="78.3695%" y="389" width="0.0329%" height="15" fill="rgb(214,133,25)" fg:x="2384" fg:w="1"/><text x="78.6195%" y="399.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::solver::Solver::get_uf (7 samples, 0.23%)</title><rect x="78.2051%" y="533" width="0.2301%" height="15" fill="rgb(209,27,14)" fg:x="2379" fg:w="7"/><text x="78.4551%" y="543.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="78.4024%" y="517" width="0.0329%" height="15" fill="rgb(219,102,51)" fg:x="2385" fg:w="1"/><text x="78.6524%" y="527.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="78.4024%" y="501" width="0.0329%" height="15" fill="rgb(237,18,16)" fg:x="2385" fg:w="1"/><text x="78.6524%" y="511.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="78.8626%" y="117" width="0.0329%" height="15" fill="rgb(241,85,17)" fg:x="2399" fg:w="1"/><text x="79.1126%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="78.8626%" y="101" width="0.0329%" height="15" fill="rgb(236,90,42)" fg:x="2399" fg:w="1"/><text x="79.1126%" y="111.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="78.8626%" y="85" width="0.0329%" height="15" fill="rgb(249,57,21)" fg:x="2399" fg:w="1"/><text x="79.1126%" y="95.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="78.8626%" y="69" width="0.0329%" height="15" fill="rgb(243,12,36)" fg:x="2399" fg:w="1"/><text x="79.1126%" y="79.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="78.8626%" y="53" width="0.0329%" height="15" fill="rgb(253,128,47)" fg:x="2399" fg:w="1"/><text x="79.1126%" y="63.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="78.8297%" y="149" width="0.0986%" height="15" fill="rgb(207,33,20)" fg:x="2398" fg:w="3"/><text x="79.0797%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="78.8626%" y="133" width="0.0657%" height="15" fill="rgb(233,215,35)" fg:x="2399" fg:w="2"/><text x="79.1126%" y="143.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="78.8955%" y="117" width="0.0329%" height="15" fill="rgb(249,188,52)" fg:x="2400" fg:w="1"/><text x="79.1455%" y="127.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (6 samples, 0.20%)</title><rect x="78.7968%" y="165" width="0.1972%" height="15" fill="rgb(225,12,32)" fg:x="2397" fg:w="6"/><text x="79.0468%" y="175.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="78.9283%" y="149" width="0.0657%" height="15" fill="rgb(247,98,14)" fg:x="2401" fg:w="2"/><text x="79.1783%" y="159.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (11 samples, 0.36%)</title><rect x="78.7640%" y="181" width="0.3616%" height="15" fill="rgb(247,219,48)" fg:x="2396" fg:w="11"/><text x="79.0140%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="78.9941%" y="165" width="0.1315%" height="15" fill="rgb(253,60,48)" fg:x="2403" fg:w="4"/><text x="79.2441%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (20 samples, 0.66%)</title><rect x="78.7311%" y="197" width="0.6575%" height="15" fill="rgb(245,15,52)" fg:x="2395" fg:w="20"/><text x="78.9811%" y="207.50"></text></g><g><title>rust-gkat`cuddUniqueInter (8 samples, 0.26%)</title><rect x="79.1256%" y="181" width="0.2630%" height="15" fill="rgb(220,133,28)" fg:x="2407" fg:w="8"/><text x="79.3756%" y="191.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="79.3557%" y="165" width="0.0329%" height="15" fill="rgb(217,180,4)" fg:x="2414" fg:w="1"/><text x="79.6057%" y="175.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="79.3886%" y="197" width="0.0657%" height="15" fill="rgb(251,24,1)" fg:x="2415" fg:w="2"/><text x="79.6386%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (26 samples, 0.85%)</title><rect x="78.7311%" y="213" width="0.8547%" height="15" fill="rgb(212,185,49)" fg:x="2395" fg:w="26"/><text x="78.9811%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="79.4543%" y="197" width="0.1315%" height="15" fill="rgb(215,175,22)" fg:x="2417" fg:w="4"/><text x="79.7043%" y="207.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="79.5858%" y="213" width="0.0329%" height="15" fill="rgb(250,205,14)" fg:x="2421" fg:w="1"/><text x="79.8358%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (31 samples, 1.02%)</title><rect x="78.6982%" y="229" width="1.0191%" height="15" fill="rgb(225,211,22)" fg:x="2394" fg:w="31"/><text x="78.9482%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="79.6187%" y="213" width="0.0986%" height="15" fill="rgb(251,179,42)" fg:x="2422" fg:w="3"/><text x="79.8687%" y="223.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="79.7173%" y="229" width="0.0657%" height="15" fill="rgb(208,216,51)" fg:x="2425" fg:w="2"/><text x="79.9673%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (38 samples, 1.25%)</title><rect x="78.6654%" y="245" width="1.2492%" height="15" fill="rgb(235,36,11)" fg:x="2393" fg:w="38"/><text x="78.9154%" y="255.50"></text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="79.7830%" y="229" width="0.1315%" height="15" fill="rgb(213,189,28)" fg:x="2427" fg:w="4"/><text x="80.0330%" y="239.50"></text></g><g><title>rust-gkat`cuddRehash (2 samples, 0.07%)</title><rect x="79.8488%" y="213" width="0.0657%" height="15" fill="rgb(227,203,42)" fg:x="2429" fg:w="2"/><text x="80.0988%" y="223.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="79.9145%" y="245" width="0.0329%" height="15" fill="rgb(244,72,36)" fg:x="2431" fg:w="1"/><text x="80.1645%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (43 samples, 1.41%)</title><rect x="78.6654%" y="261" width="1.4135%" height="15" fill="rgb(213,53,17)" fg:x="2393" fg:w="43"/><text x="78.9154%" y="271.50"></text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="79.9474%" y="245" width="0.1315%" height="15" fill="rgb(207,167,3)" fg:x="2432" fg:w="4"/><text x="80.1974%" y="255.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="80.0460%" y="229" width="0.0329%" height="15" fill="rgb(216,98,30)" fg:x="2435" fg:w="1"/><text x="80.2960%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (46 samples, 1.51%)</title><rect x="78.6654%" y="277" width="1.5122%" height="15" fill="rgb(236,123,15)" fg:x="2393" fg:w="46"/><text x="78.9154%" y="287.50"></text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="80.0789%" y="261" width="0.0986%" height="15" fill="rgb(248,81,50)" fg:x="2436" fg:w="3"/><text x="80.3289%" y="271.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (3 samples, 0.10%)</title><rect x="80.1775%" y="277" width="0.0986%" height="15" fill="rgb(214,120,4)" fg:x="2439" fg:w="3"/><text x="80.4275%" y="287.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (55 samples, 1.81%)</title><rect x="78.6654%" y="293" width="1.8080%" height="15" fill="rgb(208,179,34)" fg:x="2393" fg:w="55"/><text x="78.9154%" y="303.50">r..</text></g><g><title>rust-gkat`cuddUniqueInter (6 samples, 0.20%)</title><rect x="80.2761%" y="277" width="0.1972%" height="15" fill="rgb(227,140,7)" fg:x="2442" fg:w="6"/><text x="80.5261%" y="287.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="80.4405%" y="261" width="0.0329%" height="15" fill="rgb(214,22,6)" fg:x="2447" fg:w="1"/><text x="80.6905%" y="271.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="80.4734%" y="293" width="0.0329%" height="15" fill="rgb(207,137,27)" fg:x="2448" fg:w="1"/><text x="80.7234%" y="303.50"></text></g><g><title>rust-gkat`cuddReclaim (1 samples, 0.03%)</title><rect x="80.5062%" y="293" width="0.0329%" height="15" fill="rgb(210,8,46)" fg:x="2449" fg:w="1"/><text x="80.7562%" y="303.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (68 samples, 2.24%)</title><rect x="78.6325%" y="309" width="2.2354%" height="15" fill="rgb(240,16,54)" fg:x="2392" fg:w="68"/><text x="78.8825%" y="319.50">r..</text></g><g><title>rust-gkat`cuddUniqueInter (10 samples, 0.33%)</title><rect x="80.5391%" y="293" width="0.3287%" height="15" fill="rgb(211,209,29)" fg:x="2450" fg:w="10"/><text x="80.7891%" y="303.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="80.8350%" y="277" width="0.0329%" height="15" fill="rgb(226,228,24)" fg:x="2459" fg:w="1"/><text x="81.0850%" y="287.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="80.8679%" y="309" width="0.0657%" height="15" fill="rgb(222,84,9)" fg:x="2460" fg:w="2"/><text x="81.1179%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (78 samples, 2.56%)</title><rect x="78.5996%" y="325" width="2.5641%" height="15" fill="rgb(234,203,30)" fg:x="2391" fg:w="78"/><text x="78.8496%" y="335.50">ru..</text></g><g><title>rust-gkat`cuddUniqueInter (7 samples, 0.23%)</title><rect x="80.9336%" y="309" width="0.2301%" height="15" fill="rgb(238,109,14)" fg:x="2462" fg:w="7"/><text x="81.1836%" y="319.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="81.1308%" y="293" width="0.0329%" height="15" fill="rgb(233,206,34)" fg:x="2468" fg:w="1"/><text x="81.3808%" y="303.50"></text></g><g><title>rust-gkat`cuddReclaim (1 samples, 0.03%)</title><rect x="81.1637%" y="325" width="0.0329%" height="15" fill="rgb(220,167,47)" fg:x="2469" fg:w="1"/><text x="81.4137%" y="335.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="81.3609%" y="309" width="0.0329%" height="15" fill="rgb(238,105,10)" fg:x="2475" fg:w="1"/><text x="81.6109%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (89 samples, 2.93%)</title><rect x="78.5996%" y="341" width="2.9257%" height="15" fill="rgb(213,227,17)" fg:x="2391" fg:w="89"/><text x="78.8496%" y="351.50">ru..</text></g><g><title>rust-gkat`cuddUniqueInter (10 samples, 0.33%)</title><rect x="81.1966%" y="325" width="0.3287%" height="15" fill="rgb(217,132,38)" fg:x="2470" fg:w="10"/><text x="81.4466%" y="335.50"></text></g><g><title>rust-gkat`cuddRehash (4 samples, 0.13%)</title><rect x="81.3938%" y="309" width="0.1315%" height="15" fill="rgb(242,146,4)" fg:x="2476" fg:w="4"/><text x="81.6438%" y="319.50"></text></g><g><title>rust-gkat`cuddReclaim (1 samples, 0.03%)</title><rect x="81.5253%" y="341" width="0.0329%" height="15" fill="rgb(212,61,9)" fg:x="2480" fg:w="1"/><text x="81.7753%" y="351.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (100 samples, 3.29%)</title><rect x="78.5339%" y="357" width="3.2873%" height="15" fill="rgb(247,126,22)" fg:x="2389" fg:w="100"/><text x="78.7839%" y="367.50">rus..</text></g><g><title>rust-gkat`cuddUniqueInter (8 samples, 0.26%)</title><rect x="81.5582%" y="341" width="0.2630%" height="15" fill="rgb(220,196,2)" fg:x="2481" fg:w="8"/><text x="81.8082%" y="351.50"></text></g><g><title>rust-gkat`cuddReclaim (1 samples, 0.03%)</title><rect x="81.8212%" y="357" width="0.0329%" height="15" fill="rgb(208,46,4)" fg:x="2489" fg:w="1"/><text x="82.0712%" y="367.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="81.9527%" y="341" width="0.0329%" height="15" fill="rgb(252,104,46)" fg:x="2493" fg:w="1"/><text x="82.2027%" y="351.50"></text></g><g><title>rust-gkat`util_cpu_time (1 samples, 0.03%)</title><rect x="81.9527%" y="325" width="0.0329%" height="15" fill="rgb(237,152,48)" fg:x="2493" fg:w="1"/><text x="82.2027%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1 samples, 0.03%)</title><rect x="81.9527%" y="309" width="0.0329%" height="15" fill="rgb(221,59,37)" fg:x="2493" fg:w="1"/><text x="82.2027%" y="319.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (106 samples, 3.48%)</title><rect x="78.5339%" y="373" width="3.4845%" height="15" fill="rgb(209,202,51)" fg:x="2389" fg:w="106"/><text x="78.7839%" y="383.50">rus..</text></g><g><title>rust-gkat`cuddUniqueInter (5 samples, 0.16%)</title><rect x="81.8540%" y="357" width="0.1644%" height="15" fill="rgb(228,81,30)" fg:x="2490" fg:w="5"/><text x="82.1040%" y="367.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="81.9855%" y="341" width="0.0329%" height="15" fill="rgb(227,42,39)" fg:x="2494" fg:w="1"/><text x="82.2355%" y="351.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="82.0184%" y="373" width="0.0329%" height="15" fill="rgb(221,26,2)" fg:x="2495" fg:w="1"/><text x="82.2684%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (112 samples, 3.68%)</title><rect x="78.5339%" y="389" width="3.6818%" height="15" fill="rgb(254,61,31)" fg:x="2389" fg:w="112"/><text x="78.7839%" y="399.50">rust..</text></g><g><title>rust-gkat`cuddUniqueInter (5 samples, 0.16%)</title><rect x="82.0513%" y="373" width="0.1644%" height="15" fill="rgb(222,173,38)" fg:x="2496" fg:w="5"/><text x="82.3013%" y="383.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (6 samples, 0.20%)</title><rect x="82.2156%" y="389" width="0.1972%" height="15" fill="rgb(218,50,12)" fg:x="2501" fg:w="6"/><text x="82.4656%" y="399.50"></text></g><g><title>rust-gkat`cuddCacheResize (6 samples, 0.20%)</title><rect x="82.2156%" y="373" width="0.1972%" height="15" fill="rgb(223,88,40)" fg:x="2501" fg:w="6"/><text x="82.4656%" y="383.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (125 samples, 4.11%)</title><rect x="78.5339%" y="405" width="4.1091%" height="15" fill="rgb(237,54,19)" fg:x="2389" fg:w="125"/><text x="78.7839%" y="415.50">rust..</text></g><g><title>rust-gkat`cuddUniqueInter (7 samples, 0.23%)</title><rect x="82.4129%" y="389" width="0.2301%" height="15" fill="rgb(251,129,25)" fg:x="2507" fg:w="7"/><text x="82.6629%" y="399.50"></text></g><g><title>rust-gkat`cuddRehash (1 samples, 0.03%)</title><rect x="82.6101%" y="373" width="0.0329%" height="15" fill="rgb(238,97,19)" fg:x="2513" fg:w="1"/><text x="82.8601%" y="383.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (3 samples, 0.10%)</title><rect x="82.6430%" y="405" width="0.0986%" height="15" fill="rgb(240,169,18)" fg:x="2514" fg:w="3"/><text x="82.8930%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (133 samples, 4.37%)</title><rect x="78.5010%" y="421" width="4.3721%" height="15" fill="rgb(230,187,49)" fg:x="2388" fg:w="133"/><text x="78.7510%" y="431.50">rust-..</text></g><g><title>rust-gkat`cuddUniqueInter (4 samples, 0.13%)</title><rect x="82.7416%" y="405" width="0.1315%" height="15" fill="rgb(209,44,26)" fg:x="2517" fg:w="4"/><text x="82.9916%" y="415.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (135 samples, 4.44%)</title><rect x="78.5010%" y="437" width="4.4379%" height="15" fill="rgb(244,0,6)" fg:x="2388" fg:w="135"/><text x="78.7510%" y="447.50">rust-..</text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="82.8731%" y="421" width="0.0657%" height="15" fill="rgb(248,18,21)" fg:x="2521" fg:w="2"/><text x="83.1231%" y="431.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (138 samples, 4.54%)</title><rect x="78.5010%" y="453" width="4.5365%" height="15" fill="rgb(245,180,19)" fg:x="2388" fg:w="138"/><text x="78.7510%" y="463.50">rust-..</text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="82.9389%" y="437" width="0.0986%" height="15" fill="rgb(252,118,36)" fg:x="2523" fg:w="3"/><text x="83.1889%" y="447.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (142 samples, 4.67%)</title><rect x="78.4681%" y="469" width="4.6680%" height="15" fill="rgb(210,224,19)" fg:x="2387" fg:w="142"/><text x="78.7181%" y="479.50">rust-..</text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="83.0375%" y="453" width="0.0986%" height="15" fill="rgb(218,30,24)" fg:x="2526" fg:w="3"/><text x="83.2875%" y="463.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (145 samples, 4.77%)</title><rect x="78.4681%" y="485" width="4.7666%" height="15" fill="rgb(219,75,50)" fg:x="2387" fg:w="145"/><text x="78.7181%" y="495.50">rust-g..</text></g><g><title>rust-gkat`cuddUniqueInter (3 samples, 0.10%)</title><rect x="83.1361%" y="469" width="0.0986%" height="15" fill="rgb(234,72,50)" fg:x="2529" fg:w="3"/><text x="83.3861%" y="479.50"></text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="83.2347%" y="485" width="0.0329%" height="15" fill="rgb(219,100,48)" fg:x="2532" fg:w="1"/><text x="83.4847%" y="495.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="83.2676%" y="485" width="0.0329%" height="15" fill="rgb(253,5,41)" fg:x="2533" fg:w="1"/><text x="83.5176%" y="495.50"></text></g><g><title>rust-gkat`cuddReclaim (7 samples, 0.23%)</title><rect x="83.3005%" y="485" width="0.2301%" height="15" fill="rgb(247,181,11)" fg:x="2534" fg:w="7"/><text x="83.5505%" y="495.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (157 samples, 5.16%)</title><rect x="78.4352%" y="501" width="5.1611%" height="15" fill="rgb(222,223,25)" fg:x="2386" fg:w="157"/><text x="78.6852%" y="511.50">rust-g..</text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="83.5306%" y="485" width="0.0657%" height="15" fill="rgb(214,198,28)" fg:x="2541" fg:w="2"/><text x="83.7806%" y="495.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::equiv_iter::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::equiv_iter (2,204 samples, 72.45%)</title><rect x="11.1769%" y="549" width="72.4523%" height="15" fill="rgb(230,46,43)" fg:x="340" fg:w="2204"/><text x="11.4269%" y="559.50">rust-gkat`rust_gkat::kernel1::equiv_iter::_&lt;impl rust_gkat::kernel1::solver::Solver&gt;::equiv_iter</text></g><g><title>rust-gkat`rust_gkat::kernel1::solver::Solver::reject (158 samples, 5.19%)</title><rect x="78.4352%" y="533" width="5.1940%" height="15" fill="rgb(233,65,53)" fg:x="2386" fg:w="158"/><text x="78.6852%" y="543.50">rust-g..</text></g><g><title>rust-gkat`Cudd_bddAnd (158 samples, 5.19%)</title><rect x="78.4352%" y="517" width="5.1940%" height="15" fill="rgb(221,121,27)" fg:x="2386" fg:w="158"/><text x="78.6852%" y="527.50">rust-g..</text></g><g><title>rust-gkat`cuddCacheInsert2 (1 samples, 0.03%)</title><rect x="83.5963%" y="501" width="0.0329%" height="15" fill="rgb(247,70,47)" fg:x="2543" fg:w="1"/><text x="83.8463%" y="511.50"></text></g><g><title>rust-gkat`rust_gkat::kernel1::solver::Solver::reject (1 samples, 0.03%)</title><rect x="83.6292%" y="549" width="0.0329%" height="15" fill="rgb(228,85,35)" fg:x="2544" fg:w="1"/><text x="83.8792%" y="559.50"></text></g><g><title>rust-gkat`&lt;lalrpop_util::lexer::Matcher&lt;E&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="83.6621%" y="533" width="0.1315%" height="15" fill="rgb(209,50,18)" fg:x="2545" fg:w="4"/><text x="83.9121%" y="543.50"></text></g><g><title>rust-gkat`lalrpop_util::lexer::MatcherBuilder::new (1 samples, 0.03%)</title><rect x="83.7936%" y="533" width="0.0329%" height="15" fill="rgb(250,19,35)" fg:x="2549" fg:w="1"/><text x="84.0436%" y="543.50"></text></g><g><title>rust-gkat`regex_automata::nfa::thompson::compiler::Compiler::build_many (1 samples, 0.03%)</title><rect x="83.7936%" y="517" width="0.0329%" height="15" fill="rgb(253,107,29)" fg:x="2549" fg:w="1"/><text x="84.0436%" y="527.50"></text></g><g><title>rust-gkat`regex_syntax::parser::Parser::parse (1 samples, 0.03%)</title><rect x="83.7936%" y="501" width="0.0329%" height="15" fill="rgb(252,179,29)" fg:x="2549" fg:w="1"/><text x="84.0436%" y="511.50"></text></g><g><title>rust-gkat`regex_syntax::ast::visitor::visit (1 samples, 0.03%)</title><rect x="83.7936%" y="485" width="0.0329%" height="15" fill="rgb(238,194,6)" fg:x="2549" fg:w="1"/><text x="84.0436%" y="495.50"></text></g><g><title>rust-gkat`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="83.7936%" y="469" width="0.0329%" height="15" fill="rgb(238,164,29)" fg:x="2549" fg:w="1"/><text x="84.0436%" y="479.50"></text></g><g><title>rust-gkat`regex_automata::util::determinize::state::State::match_len (3 samples, 0.10%)</title><rect x="86.3248%" y="501" width="0.0986%" height="15" fill="rgb(224,25,9)" fg:x="2626" fg:w="3"/><text x="86.5748%" y="511.50"></text></g><g><title>rust-gkat`&lt;lalrpop_util::lexer::Matcher&lt;E&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 2.20%)</title><rect x="84.4181%" y="517" width="2.2025%" height="15" fill="rgb(244,153,23)" fg:x="2568" fg:w="67"/><text x="84.6681%" y="527.50">r..</text></g><g><title>rust-gkat`regex_automata::util::determinize::state::State::match_pattern (6 samples, 0.20%)</title><rect x="86.4234%" y="501" width="0.1972%" height="15" fill="rgb(212,203,14)" fg:x="2629" fg:w="6"/><text x="86.6734%" y="511.50"></text></g><g><title>rust-gkat`DYLD-STUB$$memcpy (3 samples, 0.10%)</title><rect x="86.6206%" y="517" width="0.0986%" height="15" fill="rgb(220,164,20)" fg:x="2635" fg:w="3"/><text x="86.8706%" y="527.50"></text></g><g><title>rust-gkat`mi_free (2 samples, 0.07%)</title><rect x="86.7193%" y="517" width="0.0657%" height="15" fill="rgb(222,203,48)" fg:x="2638" fg:w="2"/><text x="86.9693%" y="527.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="86.7850%" y="517" width="0.0329%" height="15" fill="rgb(215,159,22)" fg:x="2640" fg:w="1"/><text x="87.0350%" y="527.50"></text></g><g><title>rust-gkat`regex_automata::hybrid::dfa::LazyRef::get_cached_state (8 samples, 0.26%)</title><rect x="86.8179%" y="517" width="0.2630%" height="15" fill="rgb(216,183,47)" fg:x="2641" fg:w="8"/><text x="87.0679%" y="527.50"></text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__action10 (1 samples, 0.03%)</title><rect x="87.0809%" y="517" width="0.0329%" height="15" fill="rgb(229,195,25)" fg:x="2649" fg:w="1"/><text x="87.3309%" y="527.50"></text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__parse__Input::__goto (6 samples, 0.20%)</title><rect x="87.1137%" y="517" width="0.1972%" height="15" fill="rgb(224,132,51)" fg:x="2650" fg:w="6"/><text x="87.3637%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="88.4287%" y="501" width="0.0329%" height="15" fill="rgb(240,63,7)" fg:x="2690" fg:w="1"/><text x="88.6787%" y="511.50"></text></g><g><title>rust-gkat`_mi_heap_realloc_zero (1 samples, 0.03%)</title><rect x="88.4615%" y="469" width="0.0329%" height="15" fill="rgb(249,182,41)" fg:x="2691" fg:w="1"/><text x="88.7115%" y="479.50"></text></g><g><title>rust-gkat`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.07%)</title><rect x="88.4615%" y="501" width="0.0657%" height="15" fill="rgb(243,47,26)" fg:x="2691" fg:w="2"/><text x="88.7115%" y="511.50"></text></g><g><title>rust-gkat`alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="88.4615%" y="485" width="0.0657%" height="15" fill="rgb(233,48,2)" fg:x="2691" fg:w="2"/><text x="88.7115%" y="495.50"></text></g><g><title>rust-gkat`mi_realloc_aligned (1 samples, 0.03%)</title><rect x="88.4944%" y="469" width="0.0329%" height="15" fill="rgb(244,165,34)" fg:x="2692" fg:w="1"/><text x="88.7444%" y="479.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::parsing::parser::spec::__parse__Input::__Symbol&gt; (5 samples, 0.16%)</title><rect x="88.5273%" y="501" width="0.1644%" height="15" fill="rgb(207,89,7)" fg:x="2693" fg:w="5"/><text x="88.7773%" y="511.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="88.6917%" y="501" width="0.0329%" height="15" fill="rgb(244,117,36)" fg:x="2698" fg:w="1"/><text x="88.9417%" y="511.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="88.6917%" y="485" width="0.0329%" height="15" fill="rgb(226,144,34)" fg:x="2698" fg:w="1"/><text x="88.9417%" y="495.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="88.6917%" y="469" width="0.0329%" height="15" fill="rgb(213,23,19)" fg:x="2698" fg:w="1"/><text x="88.9417%" y="479.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="88.7245%" y="501" width="0.0657%" height="15" fill="rgb(217,75,12)" fg:x="2699" fg:w="2"/><text x="88.9745%" y="511.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="88.8560%" y="453" width="0.0329%" height="15" fill="rgb(224,159,17)" fg:x="2703" fg:w="1"/><text x="89.1060%" y="463.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="88.8560%" y="437" width="0.0329%" height="15" fill="rgb(217,118,1)" fg:x="2703" fg:w="1"/><text x="89.1060%" y="447.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (5 samples, 0.16%)</title><rect x="88.8560%" y="485" width="0.1644%" height="15" fill="rgb(232,180,48)" fg:x="2703" fg:w="5"/><text x="89.1060%" y="495.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (5 samples, 0.16%)</title><rect x="88.8560%" y="469" width="0.1644%" height="15" fill="rgb(230,27,33)" fg:x="2703" fg:w="5"/><text x="89.1060%" y="479.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (4 samples, 0.13%)</title><rect x="88.8889%" y="453" width="0.1315%" height="15" fill="rgb(205,31,21)" fg:x="2704" fg:w="4"/><text x="89.1389%" y="463.50"></text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__action12 (10 samples, 0.33%)</title><rect x="88.7903%" y="501" width="0.3287%" height="15" fill="rgb(253,59,4)" fg:x="2701" fg:w="10"/><text x="89.0403%" y="511.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (3 samples, 0.10%)</title><rect x="89.0204%" y="485" width="0.0986%" height="15" fill="rgb(224,201,9)" fg:x="2708" fg:w="3"/><text x="89.2704%" y="495.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (2 samples, 0.07%)</title><rect x="89.1190%" y="485" width="0.0657%" height="15" fill="rgb(229,206,30)" fg:x="2711" fg:w="2"/><text x="89.3690%" y="495.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (2 samples, 0.07%)</title><rect x="89.1190%" y="469" width="0.0657%" height="15" fill="rgb(212,67,47)" fg:x="2711" fg:w="2"/><text x="89.3690%" y="479.50"></text></g><g><title>rust-gkat`mi_page_free_list_extend (2 samples, 0.07%)</title><rect x="89.1190%" y="453" width="0.0657%" height="15" fill="rgb(211,96,50)" fg:x="2711" fg:w="2"/><text x="89.3690%" y="463.50"></text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__action13 (5 samples, 0.16%)</title><rect x="89.1190%" y="501" width="0.1644%" height="15" fill="rgb(252,114,18)" fg:x="2711" fg:w="5"/><text x="89.3690%" y="511.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (3 samples, 0.10%)</title><rect x="89.1847%" y="485" width="0.0986%" height="15" fill="rgb(223,58,37)" fg:x="2713" fg:w="3"/><text x="89.4347%" y="495.50"></text></g><g><title>rust-gkat`lalrpop_util::state_machine::Parser&lt;D,I&gt;::drive (168 samples, 5.52%)</title><rect x="83.8264%" y="533" width="5.5227%" height="15" fill="rgb(237,70,4)" fg:x="2550" fg:w="168"/><text x="84.0764%" y="543.50">rust-gk..</text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__parse__Input::__reduce (62 samples, 2.04%)</title><rect x="87.3110%" y="517" width="2.0381%" height="15" fill="rgb(244,85,46)" fg:x="2656" fg:w="62"/><text x="87.5610%" y="527.50">r..</text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__action9 (2 samples, 0.07%)</title><rect x="89.2834%" y="501" width="0.0657%" height="15" fill="rgb(223,39,52)" fg:x="2716" fg:w="2"/><text x="89.5334%" y="511.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="89.2834%" y="485" width="0.0657%" height="15" fill="rgb(218,200,14)" fg:x="2716" fg:w="2"/><text x="89.5334%" y="495.50"></text></g><g><title>rust-gkat`rust_gkat::parsing::parser::parse (177 samples, 5.82%)</title><rect x="83.6621%" y="549" width="5.8185%" height="15" fill="rgb(208,171,16)" fg:x="2545" fg:w="177"/><text x="83.9121%" y="559.50">rust-gk..</text></g><g><title>rust-gkat`rust_gkat::parsing::parser::spec::__parse__Input::__reduce (4 samples, 0.13%)</title><rect x="89.3491%" y="533" width="0.1315%" height="15" fill="rgb(234,200,18)" fg:x="2718" fg:w="4"/><text x="89.5991%" y="543.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.10%)</title><rect x="89.6450%" y="293" width="0.0986%" height="15" fill="rgb(228,45,11)" fg:x="2727" fg:w="3"/><text x="89.8950%" y="303.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="89.6450%" y="277" width="0.0986%" height="15" fill="rgb(237,182,11)" fg:x="2727" fg:w="3"/><text x="89.8950%" y="287.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="89.7107%" y="261" width="0.0329%" height="15" fill="rgb(241,175,49)" fg:x="2729" fg:w="1"/><text x="89.9607%" y="271.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="89.8093%" y="261" width="0.0329%" height="15" fill="rgb(247,38,35)" fg:x="2732" fg:w="1"/><text x="90.0593%" y="271.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="89.8422%" y="261" width="0.0329%" height="15" fill="rgb(228,39,49)" fg:x="2733" fg:w="1"/><text x="90.0922%" y="271.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (5 samples, 0.16%)</title><rect x="89.7765%" y="277" width="0.1644%" height="15" fill="rgb(226,101,26)" fg:x="2731" fg:w="5"/><text x="90.0265%" y="287.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="89.8751%" y="261" width="0.0657%" height="15" fill="rgb(206,141,19)" fg:x="2734" fg:w="2"/><text x="90.1251%" y="271.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="89.9080%" y="245" width="0.0329%" height="15" fill="rgb(211,200,13)" fg:x="2735" fg:w="1"/><text x="90.1580%" y="255.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="89.9408%" y="277" width="0.0329%" height="15" fill="rgb(241,121,6)" fg:x="2736" fg:w="1"/><text x="90.1908%" y="287.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="90.0394%" y="245" width="0.0329%" height="15" fill="rgb(234,221,29)" fg:x="2739" fg:w="1"/><text x="90.2894%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="90.0723%" y="229" width="0.0657%" height="15" fill="rgb(229,136,5)" fg:x="2740" fg:w="2"/><text x="90.3223%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="90.0723%" y="245" width="0.0986%" height="15" fill="rgb(238,36,11)" fg:x="2740" fg:w="3"/><text x="90.3223%" y="255.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="90.1381%" y="229" width="0.0329%" height="15" fill="rgb(251,55,41)" fg:x="2742" fg:w="1"/><text x="90.3881%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (7 samples, 0.23%)</title><rect x="89.9737%" y="261" width="0.2301%" height="15" fill="rgb(242,34,40)" fg:x="2737" fg:w="7"/><text x="90.2237%" y="271.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="90.1709%" y="245" width="0.0329%" height="15" fill="rgb(215,42,17)" fg:x="2743" fg:w="1"/><text x="90.4209%" y="255.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="90.2038%" y="261" width="0.0329%" height="15" fill="rgb(207,44,46)" fg:x="2744" fg:w="1"/><text x="90.4538%" y="271.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="90.4339%" y="229" width="0.0329%" height="15" fill="rgb(211,206,28)" fg:x="2751" fg:w="1"/><text x="90.6839%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="90.4668%" y="229" width="0.0329%" height="15" fill="rgb(237,167,16)" fg:x="2752" fg:w="1"/><text x="90.7168%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.16%)</title><rect x="90.4997%" y="229" width="0.1644%" height="15" fill="rgb(233,66,6)" fg:x="2753" fg:w="5"/><text x="90.7497%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="90.6312%" y="213" width="0.0329%" height="15" fill="rgb(246,123,29)" fg:x="2757" fg:w="1"/><text x="90.8812%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (12 samples, 0.39%)</title><rect x="90.3024%" y="245" width="0.3945%" height="15" fill="rgb(209,62,40)" fg:x="2747" fg:w="12"/><text x="90.5524%" y="255.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="90.6640%" y="229" width="0.0329%" height="15" fill="rgb(218,4,25)" fg:x="2758" fg:w="1"/><text x="90.9140%" y="239.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="90.6969%" y="245" width="0.0329%" height="15" fill="rgb(253,91,49)" fg:x="2759" fg:w="1"/><text x="90.9469%" y="255.50"></text></g><g><title>rust-gkat`mi_free (2 samples, 0.07%)</title><rect x="90.7298%" y="245" width="0.0657%" height="15" fill="rgb(228,155,29)" fg:x="2760" fg:w="2"/><text x="90.9798%" y="255.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="91.0256%" y="213" width="0.0329%" height="15" fill="rgb(243,57,37)" fg:x="2769" fg:w="1"/><text x="91.2756%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="91.0585%" y="213" width="0.0657%" height="15" fill="rgb(244,167,17)" fg:x="2770" fg:w="2"/><text x="91.3085%" y="223.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="91.2886%" y="197" width="0.0329%" height="15" fill="rgb(207,181,38)" fg:x="2777" fg:w="1"/><text x="91.5386%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (14 samples, 0.46%)</title><rect x="90.8941%" y="229" width="0.4602%" height="15" fill="rgb(211,8,23)" fg:x="2765" fg:w="14"/><text x="91.1441%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.23%)</title><rect x="91.1243%" y="213" width="0.2301%" height="15" fill="rgb(235,11,44)" fg:x="2772" fg:w="7"/><text x="91.3743%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="91.3215%" y="197" width="0.0329%" height="15" fill="rgb(248,18,52)" fg:x="2778" fg:w="1"/><text x="91.5715%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="91.3215%" y="181" width="0.0329%" height="15" fill="rgb(208,4,7)" fg:x="2778" fg:w="1"/><text x="91.5715%" y="191.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="91.3544%" y="229" width="0.0329%" height="15" fill="rgb(240,17,39)" fg:x="2779" fg:w="1"/><text x="91.6044%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="91.3872%" y="229" width="0.0329%" height="15" fill="rgb(207,170,3)" fg:x="2780" fg:w="1"/><text x="91.6372%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="91.4201%" y="229" width="0.0329%" height="15" fill="rgb(236,100,52)" fg:x="2781" fg:w="1"/><text x="91.6701%" y="239.50"></text></g><g><title>rust-gkat`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (1 samples, 0.03%)</title><rect x="91.4530%" y="229" width="0.0329%" height="15" fill="rgb(246,78,51)" fg:x="2782" fg:w="1"/><text x="91.7030%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="91.6174%" y="197" width="0.0329%" height="15" fill="rgb(211,17,15)" fg:x="2787" fg:w="1"/><text x="91.8674%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="91.6502%" y="197" width="0.0986%" height="15" fill="rgb(209,59,46)" fg:x="2788" fg:w="3"/><text x="91.9002%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (6 samples, 0.20%)</title><rect x="91.6174%" y="213" width="0.1972%" height="15" fill="rgb(210,92,25)" fg:x="2787" fg:w="6"/><text x="91.8674%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="91.7488%" y="197" width="0.0657%" height="15" fill="rgb(238,174,52)" fg:x="2791" fg:w="2"/><text x="91.9988%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="91.7817%" y="181" width="0.0329%" height="15" fill="rgb(230,73,7)" fg:x="2792" fg:w="1"/><text x="92.0317%" y="191.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="91.8146%" y="213" width="0.0329%" height="15" fill="rgb(243,124,40)" fg:x="2793" fg:w="1"/><text x="92.0646%" y="223.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="91.8475%" y="213" width="0.0329%" height="15" fill="rgb(244,170,11)" fg:x="2794" fg:w="1"/><text x="92.0975%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 0.13%)</title><rect x="91.8803%" y="197" width="0.1315%" height="15" fill="rgb(207,114,54)" fg:x="2795" fg:w="4"/><text x="92.1303%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="91.9461%" y="181" width="0.0657%" height="15" fill="rgb(205,42,20)" fg:x="2797" fg:w="2"/><text x="92.1961%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="92.0118%" y="181" width="0.0329%" height="15" fill="rgb(230,30,28)" fg:x="2799" fg:w="1"/><text x="92.2618%" y="191.50"></text></g><g><title>rust-gkat`once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (1 samples, 0.03%)</title><rect x="92.0447%" y="181" width="0.0329%" height="15" fill="rgb(205,73,54)" fg:x="2800" fg:w="1"/><text x="92.2947%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="92.0776%" y="165" width="0.0657%" height="15" fill="rgb(254,227,23)" fg:x="2801" fg:w="2"/><text x="92.3276%" y="175.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="92.1105%" y="149" width="0.0329%" height="15" fill="rgb(228,202,34)" fg:x="2802" fg:w="1"/><text x="92.3605%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="92.1433%" y="149" width="0.0329%" height="15" fill="rgb(222,225,37)" fg:x="2803" fg:w="1"/><text x="92.3933%" y="159.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="92.1433%" y="133" width="0.0329%" height="15" fill="rgb(221,14,54)" fg:x="2803" fg:w="1"/><text x="92.3933%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (4 samples, 0.13%)</title><rect x="92.0776%" y="181" width="0.1315%" height="15" fill="rgb(254,102,2)" fg:x="2801" fg:w="4"/><text x="92.3276%" y="191.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (2 samples, 0.07%)</title><rect x="92.1433%" y="165" width="0.0657%" height="15" fill="rgb(232,104,17)" fg:x="2803" fg:w="2"/><text x="92.3933%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (1 samples, 0.03%)</title><rect x="92.1762%" y="149" width="0.0329%" height="15" fill="rgb(250,220,14)" fg:x="2804" fg:w="1"/><text x="92.4262%" y="159.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (1 samples, 0.03%)</title><rect x="92.1762%" y="133" width="0.0329%" height="15" fill="rgb(241,158,9)" fg:x="2804" fg:w="1"/><text x="92.4262%" y="143.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="92.1762%" y="117" width="0.0329%" height="15" fill="rgb(246,9,43)" fg:x="2804" fg:w="1"/><text x="92.4262%" y="127.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="92.1762%" y="101" width="0.0329%" height="15" fill="rgb(206,73,33)" fg:x="2804" fg:w="1"/><text x="92.4262%" y="111.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="92.2091%" y="149" width="0.0329%" height="15" fill="rgb(222,79,8)" fg:x="2805" fg:w="1"/><text x="92.4591%" y="159.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (8 samples, 0.26%)</title><rect x="92.0118%" y="197" width="0.2630%" height="15" fill="rgb(234,8,54)" fg:x="2799" fg:w="8"/><text x="92.2618%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (2 samples, 0.07%)</title><rect x="92.2091%" y="181" width="0.0657%" height="15" fill="rgb(209,134,38)" fg:x="2805" fg:w="2"/><text x="92.4591%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="92.2091%" y="165" width="0.0657%" height="15" fill="rgb(230,127,29)" fg:x="2805" fg:w="2"/><text x="92.4591%" y="175.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="92.2419%" y="149" width="0.0329%" height="15" fill="rgb(242,44,41)" fg:x="2806" fg:w="1"/><text x="92.4919%" y="159.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="92.2419%" y="133" width="0.0329%" height="15" fill="rgb(222,56,43)" fg:x="2806" fg:w="1"/><text x="92.4919%" y="143.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="92.3734%" y="165" width="0.0329%" height="15" fill="rgb(238,39,47)" fg:x="2810" fg:w="1"/><text x="92.6234%" y="175.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="92.4063%" y="165" width="0.0329%" height="15" fill="rgb(226,79,43)" fg:x="2811" fg:w="1"/><text x="92.6563%" y="175.50"></text></g><g><title>rust-gkat`_mi_page_free (1 samples, 0.03%)</title><rect x="92.5049%" y="133" width="0.0329%" height="15" fill="rgb(242,105,53)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="143.50"></text></g><g><title>rust-gkat`mi_segment_page_clear (1 samples, 0.03%)</title><rect x="92.5049%" y="117" width="0.0329%" height="15" fill="rgb(251,132,46)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="127.50"></text></g><g><title>rust-gkat`mi_segment_span_free_coalesce (1 samples, 0.03%)</title><rect x="92.5049%" y="101" width="0.0329%" height="15" fill="rgb(231,77,14)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="111.50"></text></g><g><title>rust-gkat`mi_segment_span_free (1 samples, 0.03%)</title><rect x="92.5049%" y="85" width="0.0329%" height="15" fill="rgb(240,135,9)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="95.50"></text></g><g><title>rust-gkat`mi_segment_try_purge (1 samples, 0.03%)</title><rect x="92.5049%" y="69" width="0.0329%" height="15" fill="rgb(248,109,14)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="79.50"></text></g><g><title>rust-gkat`mi_segment_purge (1 samples, 0.03%)</title><rect x="92.5049%" y="53" width="0.0329%" height="15" fill="rgb(227,146,52)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="92.5049%" y="37" width="0.0329%" height="15" fill="rgb(232,54,3)" fg:x="2814" fg:w="1"/><text x="92.7549%" y="47.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="92.4392%" y="165" width="0.1315%" height="15" fill="rgb(229,201,43)" fg:x="2812" fg:w="4"/><text x="92.6892%" y="175.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.13%)</title><rect x="92.4392%" y="149" width="0.1315%" height="15" fill="rgb(252,161,33)" fg:x="2812" fg:w="4"/><text x="92.6892%" y="159.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="92.5378%" y="133" width="0.0329%" height="15" fill="rgb(226,146,40)" fg:x="2815" fg:w="1"/><text x="92.7878%" y="143.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (10 samples, 0.33%)</title><rect x="92.2748%" y="197" width="0.3287%" height="15" fill="rgb(219,47,25)" fg:x="2807" fg:w="10"/><text x="92.5248%" y="207.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (10 samples, 0.33%)</title><rect x="92.2748%" y="181" width="0.3287%" height="15" fill="rgb(250,135,13)" fg:x="2807" fg:w="10"/><text x="92.5248%" y="191.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="92.5707%" y="165" width="0.0329%" height="15" fill="rgb(219,229,18)" fg:x="2816" fg:w="1"/><text x="92.8207%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (25 samples, 0.82%)</title><rect x="91.8803%" y="213" width="0.8218%" height="15" fill="rgb(217,152,27)" fg:x="2795" fg:w="25"/><text x="92.1303%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (3 samples, 0.10%)</title><rect x="92.6036%" y="197" width="0.0986%" height="15" fill="rgb(225,71,47)" fg:x="2817" fg:w="3"/><text x="92.8536%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="92.6693%" y="181" width="0.0329%" height="15" fill="rgb(220,139,14)" fg:x="2819" fg:w="1"/><text x="92.9193%" y="191.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="92.6693%" y="165" width="0.0329%" height="15" fill="rgb(247,54,32)" fg:x="2819" fg:w="1"/><text x="92.9193%" y="175.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="92.6693%" y="149" width="0.0329%" height="15" fill="rgb(252,131,39)" fg:x="2819" fg:w="1"/><text x="92.9193%" y="159.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="92.8008%" y="181" width="0.0657%" height="15" fill="rgb(210,108,39)" fg:x="2823" fg:w="2"/><text x="93.0508%" y="191.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="92.8665%" y="181" width="0.0329%" height="15" fill="rgb(205,23,29)" fg:x="2825" fg:w="1"/><text x="93.1165%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="92.8994%" y="181" width="0.0329%" height="15" fill="rgb(246,139,46)" fg:x="2826" fg:w="1"/><text x="93.1494%" y="191.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="92.9323%" y="165" width="0.0657%" height="15" fill="rgb(250,81,26)" fg:x="2827" fg:w="2"/><text x="93.1823%" y="175.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.13%)</title><rect x="92.9323%" y="181" width="0.1315%" height="15" fill="rgb(214,104,7)" fg:x="2827" fg:w="4"/><text x="93.1823%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="92.9980%" y="165" width="0.0657%" height="15" fill="rgb(233,189,8)" fg:x="2829" fg:w="2"/><text x="93.2480%" y="175.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (15 samples, 0.49%)</title><rect x="92.7022%" y="197" width="0.4931%" height="15" fill="rgb(228,141,17)" fg:x="2820" fg:w="15"/><text x="92.9522%" y="207.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (4 samples, 0.13%)</title><rect x="93.0638%" y="181" width="0.1315%" height="15" fill="rgb(247,157,1)" fg:x="2831" fg:w="4"/><text x="93.3138%" y="191.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="93.1953%" y="197" width="0.0329%" height="15" fill="rgb(249,225,5)" fg:x="2835" fg:w="1"/><text x="93.4453%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="93.2281%" y="197" width="0.0329%" height="15" fill="rgb(242,55,13)" fg:x="2836" fg:w="1"/><text x="93.4781%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (18 samples, 0.59%)</title><rect x="92.7022%" y="213" width="0.5917%" height="15" fill="rgb(230,49,50)" fg:x="2820" fg:w="18"/><text x="92.9522%" y="223.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="93.2610%" y="197" width="0.0329%" height="15" fill="rgb(241,111,38)" fg:x="2837" fg:w="1"/><text x="93.5110%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddOr (1 samples, 0.03%)</title><rect x="93.3268%" y="197" width="0.0329%" height="15" fill="rgb(252,155,4)" fg:x="2839" fg:w="1"/><text x="93.5768%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="93.3268%" y="181" width="0.0329%" height="15" fill="rgb(212,69,32)" fg:x="2839" fg:w="1"/><text x="93.5768%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="93.3268%" y="165" width="0.0329%" height="15" fill="rgb(243,107,47)" fg:x="2839" fg:w="1"/><text x="93.5768%" y="175.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="93.4254%" y="181" width="0.0329%" height="15" fill="rgb(247,130,12)" fg:x="2842" fg:w="1"/><text x="93.6754%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="93.4254%" y="165" width="0.0329%" height="15" fill="rgb(233,74,16)" fg:x="2842" fg:w="1"/><text x="93.6754%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (61 samples, 2.01%)</title><rect x="91.4859%" y="229" width="2.0053%" height="15" fill="rgb(208,58,18)" fg:x="2783" fg:w="61"/><text x="91.7359%" y="239.50">r..</text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (6 samples, 0.20%)</title><rect x="93.2939%" y="213" width="0.1972%" height="15" fill="rgb(242,225,1)" fg:x="2838" fg:w="6"/><text x="93.5439%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (4 samples, 0.13%)</title><rect x="93.3596%" y="197" width="0.1315%" height="15" fill="rgb(249,39,40)" fg:x="2840" fg:w="4"/><text x="93.6096%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="93.4583%" y="181" width="0.0329%" height="15" fill="rgb(207,72,44)" fg:x="2843" fg:w="1"/><text x="93.7083%" y="191.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="93.7212%" y="197" width="0.0657%" height="15" fill="rgb(215,193,12)" fg:x="2851" fg:w="2"/><text x="93.9712%" y="207.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="93.7870%" y="197" width="0.0329%" height="15" fill="rgb(248,41,39)" fg:x="2853" fg:w="1"/><text x="94.0370%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="93.8199%" y="197" width="0.0657%" height="15" fill="rgb(253,85,4)" fg:x="2854" fg:w="2"/><text x="94.0699%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="93.8856%" y="197" width="0.0329%" height="15" fill="rgb(243,70,31)" fg:x="2856" fg:w="1"/><text x="94.1356%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="94.0500%" y="181" width="0.0329%" height="15" fill="rgb(253,195,26)" fg:x="2861" fg:w="1"/><text x="94.3000%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="94.0828%" y="181" width="0.0329%" height="15" fill="rgb(243,42,11)" fg:x="2862" fg:w="1"/><text x="94.3328%" y="191.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.23%)</title><rect x="93.9185%" y="197" width="0.2301%" height="15" fill="rgb(239,66,17)" fg:x="2857" fg:w="7"/><text x="94.1685%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="94.1157%" y="181" width="0.0329%" height="15" fill="rgb(217,132,21)" fg:x="2863" fg:w="1"/><text x="94.3657%" y="191.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (28 samples, 0.92%)</title><rect x="93.4911%" y="213" width="0.9204%" height="15" fill="rgb(252,202,21)" fg:x="2844" fg:w="28"/><text x="93.7411%" y="223.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (8 samples, 0.26%)</title><rect x="94.1486%" y="197" width="0.2630%" height="15" fill="rgb(233,98,36)" fg:x="2864" fg:w="8"/><text x="94.3986%" y="207.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="94.4116%" y="213" width="0.0329%" height="15" fill="rgb(216,153,54)" fg:x="2872" fg:w="1"/><text x="94.6616%" y="223.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.07%)</title><rect x="94.4444%" y="213" width="0.0657%" height="15" fill="rgb(250,99,7)" fg:x="2873" fg:w="2"/><text x="94.6944%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (33 samples, 1.08%)</title><rect x="93.4911%" y="229" width="1.0848%" height="15" fill="rgb(207,56,50)" fg:x="2844" fg:w="33"/><text x="93.7411%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="94.5102%" y="213" width="0.0657%" height="15" fill="rgb(244,61,34)" fg:x="2875" fg:w="2"/><text x="94.7602%" y="223.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="94.5759%" y="213" width="0.0329%" height="15" fill="rgb(241,50,38)" fg:x="2877" fg:w="1"/><text x="94.8259%" y="223.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="94.5759%" y="197" width="0.0329%" height="15" fill="rgb(212,166,30)" fg:x="2877" fg:w="1"/><text x="94.8259%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="94.5759%" y="181" width="0.0329%" height="15" fill="rgb(249,127,32)" fg:x="2877" fg:w="1"/><text x="94.8259%" y="191.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="94.5759%" y="165" width="0.0329%" height="15" fill="rgb(209,103,0)" fg:x="2877" fg:w="1"/><text x="94.8259%" y="175.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="94.6088%" y="213" width="0.0329%" height="15" fill="rgb(238,209,51)" fg:x="2878" fg:w="1"/><text x="94.8588%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="94.7403%" y="197" width="0.0329%" height="15" fill="rgb(237,56,23)" fg:x="2882" fg:w="1"/><text x="94.9903%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (122 samples, 4.01%)</title><rect x="90.7955%" y="245" width="4.0105%" height="15" fill="rgb(215,153,46)" fg:x="2762" fg:w="122"/><text x="91.0455%" y="255.50">rust..</text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (7 samples, 0.23%)</title><rect x="94.5759%" y="229" width="0.2301%" height="15" fill="rgb(224,49,31)" fg:x="2877" fg:w="7"/><text x="94.8259%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (5 samples, 0.16%)</title><rect x="94.6417%" y="213" width="0.1644%" height="15" fill="rgb(250,18,42)" fg:x="2879" fg:w="5"/><text x="94.8917%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="94.7732%" y="197" width="0.0329%" height="15" fill="rgb(215,176,39)" fg:x="2883" fg:w="1"/><text x="95.0232%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddOr (1 samples, 0.03%)</title><rect x="94.7732%" y="181" width="0.0329%" height="15" fill="rgb(223,77,29)" fg:x="2883" fg:w="1"/><text x="95.0232%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="94.7732%" y="165" width="0.0329%" height="15" fill="rgb(234,94,52)" fg:x="2883" fg:w="1"/><text x="95.0232%" y="175.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="94.7732%" y="149" width="0.0329%" height="15" fill="rgb(220,154,50)" fg:x="2883" fg:w="1"/><text x="95.0232%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="95.2334%" y="213" width="0.0329%" height="15" fill="rgb(212,11,10)" fg:x="2897" fg:w="1"/><text x="95.4834%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="95.2663%" y="213" width="0.0329%" height="15" fill="rgb(205,166,19)" fg:x="2898" fg:w="1"/><text x="95.5163%" y="223.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="95.4306%" y="197" width="0.0657%" height="15" fill="rgb(244,198,16)" fg:x="2903" fg:w="2"/><text x="95.6806%" y="207.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (3 samples, 0.10%)</title><rect x="95.4964%" y="197" width="0.0986%" height="15" fill="rgb(219,69,12)" fg:x="2905" fg:w="3"/><text x="95.7464%" y="207.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (2 samples, 0.07%)</title><rect x="95.5950%" y="197" width="0.0657%" height="15" fill="rgb(245,30,7)" fg:x="2908" fg:w="2"/><text x="95.8450%" y="207.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.26%)</title><rect x="95.7922%" y="181" width="0.2630%" height="15" fill="rgb(218,221,48)" fg:x="2914" fg:w="8"/><text x="96.0422%" y="191.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (8 samples, 0.26%)</title><rect x="96.0552%" y="181" width="0.2630%" height="15" fill="rgb(216,66,15)" fg:x="2922" fg:w="8"/><text x="96.3052%" y="191.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="96.3182%" y="181" width="0.0329%" height="15" fill="rgb(226,122,50)" fg:x="2930" fg:w="1"/><text x="96.5682%" y="191.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 1.08%)</title><rect x="95.2991%" y="213" width="1.0848%" height="15" fill="rgb(239,156,16)" fg:x="2899" fg:w="33"/><text x="95.5491%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.72%)</title><rect x="95.6607%" y="197" width="0.7232%" height="15" fill="rgb(224,27,38)" fg:x="2910" fg:w="22"/><text x="95.9107%" y="207.50"></text></g><g><title>rust-gkat`mi_segment_free (1 samples, 0.03%)</title><rect x="96.3511%" y="181" width="0.0329%" height="15" fill="rgb(224,39,27)" fg:x="2931" fg:w="1"/><text x="96.6011%" y="191.50"></text></g><g><title>rust-gkat`mi_arenas_try_purge (1 samples, 0.03%)</title><rect x="96.3511%" y="165" width="0.0329%" height="15" fill="rgb(215,92,29)" fg:x="2931" fg:w="1"/><text x="96.6011%" y="175.50"></text></g><g><title>rust-gkat`mi_arena_purge (1 samples, 0.03%)</title><rect x="96.3511%" y="149" width="0.0329%" height="15" fill="rgb(207,159,16)" fg:x="2931" fg:w="1"/><text x="96.6011%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="96.3511%" y="133" width="0.0329%" height="15" fill="rgb(238,163,47)" fg:x="2931" fg:w="1"/><text x="96.6011%" y="143.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (52 samples, 1.71%)</title><rect x="94.8060%" y="229" width="1.7094%" height="15" fill="rgb(219,91,49)" fg:x="2884" fg:w="52"/><text x="95.0560%" y="239.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (4 samples, 0.13%)</title><rect x="96.3840%" y="213" width="0.1315%" height="15" fill="rgb(227,167,31)" fg:x="2932" fg:w="4"/><text x="96.6340%" y="223.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="96.5155%" y="229" width="0.0329%" height="15" fill="rgb(234,80,54)" fg:x="2936" fg:w="1"/><text x="96.7655%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (54 samples, 1.78%)</title><rect x="94.8060%" y="245" width="1.7751%" height="15" fill="rgb(212,114,2)" fg:x="2884" fg:w="54"/><text x="95.0560%" y="255.50">r..</text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="96.5483%" y="229" width="0.0329%" height="15" fill="rgb(234,50,24)" fg:x="2937" fg:w="1"/><text x="96.7983%" y="239.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="96.6141%" y="229" width="0.0657%" height="15" fill="rgb(221,68,8)" fg:x="2939" fg:w="2"/><text x="96.8641%" y="239.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="96.6798%" y="229" width="0.0329%" height="15" fill="rgb(254,180,31)" fg:x="2941" fg:w="1"/><text x="96.9298%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="96.6798%" y="213" width="0.0329%" height="15" fill="rgb(247,130,50)" fg:x="2941" fg:w="1"/><text x="96.9298%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="96.6798%" y="197" width="0.0329%" height="15" fill="rgb(211,109,4)" fg:x="2941" fg:w="1"/><text x="96.9298%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddOr (2 samples, 0.07%)</title><rect x="96.7127%" y="229" width="0.0657%" height="15" fill="rgb(238,50,21)" fg:x="2942" fg:w="2"/><text x="96.9627%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (2 samples, 0.07%)</title><rect x="96.7127%" y="213" width="0.0657%" height="15" fill="rgb(225,57,45)" fg:x="2942" fg:w="2"/><text x="96.9627%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (2 samples, 0.07%)</title><rect x="96.7127%" y="197" width="0.0657%" height="15" fill="rgb(209,196,50)" fg:x="2942" fg:w="2"/><text x="96.9627%" y="207.50"></text></g><g><title>rust-gkat`cuddAllocNode (1 samples, 0.03%)</title><rect x="96.7456%" y="181" width="0.0329%" height="15" fill="rgb(242,140,13)" fg:x="2943" fg:w="1"/><text x="96.9956%" y="191.50"></text></g><g><title>rust-gkat`util_cpu_time (1 samples, 0.03%)</title><rect x="96.7456%" y="165" width="0.0329%" height="15" fill="rgb(217,111,7)" fg:x="2943" fg:w="1"/><text x="96.9956%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1 samples, 0.03%)</title><rect x="96.7456%" y="149" width="0.0329%" height="15" fill="rgb(253,193,51)" fg:x="2943" fg:w="1"/><text x="96.9956%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="96.7784%" y="213" width="0.0329%" height="15" fill="rgb(252,70,29)" fg:x="2944" fg:w="1"/><text x="97.0284%" y="223.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="96.8113%" y="213" width="0.0329%" height="15" fill="rgb(232,127,12)" fg:x="2945" fg:w="1"/><text x="97.0613%" y="223.50"></text></g><g><title>rust-gkat`Cudd_bddOr (1 samples, 0.03%)</title><rect x="96.8771%" y="197" width="0.0329%" height="15" fill="rgb(211,180,21)" fg:x="2947" fg:w="1"/><text x="97.1271%" y="207.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="96.8771%" y="181" width="0.0329%" height="15" fill="rgb(229,72,13)" fg:x="2947" fg:w="1"/><text x="97.1271%" y="191.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="96.8771%" y="165" width="0.0329%" height="15" fill="rgb(240,211,49)" fg:x="2947" fg:w="1"/><text x="97.1271%" y="175.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (204 samples, 6.71%)</title><rect x="90.2367%" y="261" width="6.7061%" height="15" fill="rgb(219,149,40)" fg:x="2745" fg:w="204"/><text x="90.4867%" y="271.50">rust-gkat..</text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (11 samples, 0.36%)</title><rect x="96.5812%" y="245" width="0.3616%" height="15" fill="rgb(210,127,46)" fg:x="2938" fg:w="11"/><text x="96.8312%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (5 samples, 0.16%)</title><rect x="96.7784%" y="229" width="0.1644%" height="15" fill="rgb(220,106,7)" fg:x="2944" fg:w="5"/><text x="97.0284%" y="239.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (3 samples, 0.10%)</title><rect x="96.8442%" y="213" width="0.0986%" height="15" fill="rgb(249,31,22)" fg:x="2946" fg:w="3"/><text x="97.0942%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="96.9099%" y="197" width="0.0329%" height="15" fill="rgb(253,1,49)" fg:x="2948" fg:w="1"/><text x="97.1599%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="96.9099%" y="181" width="0.0329%" height="15" fill="rgb(227,144,33)" fg:x="2948" fg:w="1"/><text x="97.1599%" y="191.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="96.9099%" y="165" width="0.0329%" height="15" fill="rgb(249,163,44)" fg:x="2948" fg:w="1"/><text x="97.1599%" y="175.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="96.9099%" y="149" width="0.0329%" height="15" fill="rgb(234,15,39)" fg:x="2948" fg:w="1"/><text x="97.1599%" y="159.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="97.0743%" y="229" width="0.0657%" height="15" fill="rgb(207,66,16)" fg:x="2953" fg:w="2"/><text x="97.3243%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="97.1400%" y="229" width="0.0657%" height="15" fill="rgb(233,112,24)" fg:x="2955" fg:w="2"/><text x="97.3900%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="97.2058%" y="229" width="0.0329%" height="15" fill="rgb(230,90,22)" fg:x="2957" fg:w="1"/><text x="97.4558%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::hash (2 samples, 0.07%)</title><rect x="97.2387%" y="229" width="0.0657%" height="15" fill="rgb(229,61,13)" fg:x="2958" fg:w="2"/><text x="97.4887%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="97.4030%" y="213" width="0.0329%" height="15" fill="rgb(225,57,24)" fg:x="2963" fg:w="1"/><text x="97.6530%" y="223.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="97.4359%" y="213" width="0.1644%" height="15" fill="rgb(208,169,48)" fg:x="2964" fg:w="5"/><text x="97.6859%" y="223.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="97.6003%" y="213" width="0.0329%" height="15" fill="rgb(244,218,51)" fg:x="2969" fg:w="1"/><text x="97.8503%" y="223.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.36%)</title><rect x="97.3044%" y="229" width="0.3616%" height="15" fill="rgb(214,148,10)" fg:x="2960" fg:w="11"/><text x="97.5544%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="97.6331%" y="213" width="0.0329%" height="15" fill="rgb(225,174,27)" fg:x="2970" fg:w="1"/><text x="97.8831%" y="223.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="97.6660%" y="229" width="0.0329%" height="15" fill="rgb(230,96,26)" fg:x="2971" fg:w="1"/><text x="97.9160%" y="239.50"></text></g><g><title>rust-gkat`mi_find_page (1 samples, 0.03%)</title><rect x="97.6660%" y="213" width="0.0329%" height="15" fill="rgb(232,10,30)" fg:x="2971" fg:w="1"/><text x="97.9160%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (27 samples, 0.89%)</title><rect x="96.9428%" y="245" width="0.8876%" height="15" fill="rgb(222,8,50)" fg:x="2949" fg:w="27"/><text x="97.1928%" y="255.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (4 samples, 0.13%)</title><rect x="97.6989%" y="229" width="0.1315%" height="15" fill="rgb(213,81,27)" fg:x="2972" fg:w="4"/><text x="97.9489%" y="239.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="97.8304%" y="245" width="0.0329%" height="15" fill="rgb(245,50,10)" fg:x="2976" fg:w="1"/><text x="98.0804%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="97.8632%" y="245" width="0.0329%" height="15" fill="rgb(216,100,18)" fg:x="2977" fg:w="1"/><text x="98.1132%" y="255.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.10%)</title><rect x="97.8961%" y="245" width="0.0986%" height="15" fill="rgb(236,147,54)" fg:x="2978" fg:w="3"/><text x="98.1461%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (33 samples, 1.08%)</title><rect x="96.9428%" y="261" width="1.0848%" height="15" fill="rgb(205,143,26)" fg:x="2949" fg:w="33"/><text x="97.1928%" y="271.50"></text></g><g><title>rust-gkat`mi_free (1 samples, 0.03%)</title><rect x="97.9947%" y="245" width="0.0329%" height="15" fill="rgb(236,26,9)" fg:x="2981" fg:w="1"/><text x="98.2447%" y="255.50"></text></g><g><title>rust-gkat`Cudd_bddAnd (1 samples, 0.03%)</title><rect x="98.0605%" y="245" width="0.0329%" height="15" fill="rgb(221,165,53)" fg:x="2983" fg:w="1"/><text x="98.3105%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="98.0605%" y="229" width="0.0329%" height="15" fill="rgb(214,110,17)" fg:x="2983" fg:w="1"/><text x="98.3105%" y="239.50"></text></g><g><title>rust-gkat`Cudd_bddOr (1 samples, 0.03%)</title><rect x="98.0934%" y="245" width="0.0329%" height="15" fill="rgb(237,197,12)" fg:x="2984" fg:w="1"/><text x="98.3434%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="98.0934%" y="229" width="0.0329%" height="15" fill="rgb(205,84,17)" fg:x="2984" fg:w="1"/><text x="98.3434%" y="239.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (1 samples, 0.03%)</title><rect x="98.0934%" y="213" width="0.0329%" height="15" fill="rgb(237,18,45)" fg:x="2984" fg:w="1"/><text x="98.3434%" y="223.50"></text></g><g><title>rust-gkat`cuddCacheLookup2 (2 samples, 0.07%)</title><rect x="98.1262%" y="197" width="0.0657%" height="15" fill="rgb(221,87,14)" fg:x="2985" fg:w="2"/><text x="98.3762%" y="207.50"></text></g><g><title>rust-gkat`Cudd_bddOr (3 samples, 0.10%)</title><rect x="98.1262%" y="229" width="0.0986%" height="15" fill="rgb(238,186,15)" fg:x="2985" fg:w="3"/><text x="98.3762%" y="239.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (3 samples, 0.10%)</title><rect x="98.1262%" y="213" width="0.0986%" height="15" fill="rgb(208,115,11)" fg:x="2985" fg:w="3"/><text x="98.3762%" y="223.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="98.1920%" y="197" width="0.0329%" height="15" fill="rgb(254,175,0)" fg:x="2987" fg:w="1"/><text x="98.4420%" y="207.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (252 samples, 8.28%)</title><rect x="89.9737%" y="277" width="8.2840%" height="15" fill="rgb(227,24,42)" fg:x="2737" fg:w="252"/><text x="90.2237%" y="287.50">rust-gkat`ru..</text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (7 samples, 0.23%)</title><rect x="98.0276%" y="261" width="0.2301%" height="15" fill="rgb(223,211,37)" fg:x="2982" fg:w="7"/><text x="98.2776%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (4 samples, 0.13%)</title><rect x="98.1262%" y="245" width="0.1315%" height="15" fill="rgb(235,49,27)" fg:x="2985" fg:w="4"/><text x="98.3762%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="98.2249%" y="229" width="0.0329%" height="15" fill="rgb(254,97,51)" fg:x="2988" fg:w="1"/><text x="98.4749%" y="239.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (2 samples, 0.07%)</title><rect x="98.2906%" y="245" width="0.0657%" height="15" fill="rgb(249,51,40)" fg:x="2990" fg:w="2"/><text x="98.5406%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="98.3563%" y="245" width="0.0329%" height="15" fill="rgb(210,128,45)" fg:x="2992" fg:w="1"/><text x="98.6063%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="98.5536%" y="229" width="0.0329%" height="15" fill="rgb(224,137,50)" fg:x="2998" fg:w="1"/><text x="98.8036%" y="239.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (5 samples, 0.16%)</title><rect x="98.5865%" y="229" width="0.1644%" height="15" fill="rgb(242,15,9)" fg:x="2999" fg:w="5"/><text x="98.8365%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::drop_in_place&lt;rust_gkat::syntax::exp::Exp_&gt; (1 samples, 0.03%)</title><rect x="98.7508%" y="229" width="0.0329%" height="15" fill="rgb(233,187,41)" fg:x="3004" fg:w="1"/><text x="99.0008%" y="239.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="98.7837%" y="229" width="0.0329%" height="15" fill="rgb(227,2,29)" fg:x="3005" fg:w="1"/><text x="99.0337%" y="239.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.46%)</title><rect x="98.3892%" y="245" width="0.4602%" height="15" fill="rgb(222,70,3)" fg:x="2993" fg:w="14"/><text x="98.6392%" y="255.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="98.8166%" y="229" width="0.0329%" height="15" fill="rgb(213,11,42)" fg:x="3006" fg:w="1"/><text x="99.0666%" y="239.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="98.8166%" y="213" width="0.0329%" height="15" fill="rgb(225,150,9)" fg:x="3006" fg:w="1"/><text x="99.0666%" y="223.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (19 samples, 0.62%)</title><rect x="98.2577%" y="261" width="0.6246%" height="15" fill="rgb(230,162,45)" fg:x="2989" fg:w="19"/><text x="98.5077%" y="271.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="98.8494%" y="245" width="0.0329%" height="15" fill="rgb(222,14,52)" fg:x="3007" fg:w="1"/><text x="99.0994%" y="255.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (20 samples, 0.66%)</title><rect x="98.2577%" y="277" width="0.6575%" height="15" fill="rgb(254,198,14)" fg:x="2989" fg:w="20"/><text x="98.5077%" y="287.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="98.8823%" y="261" width="0.0329%" height="15" fill="rgb(220,217,30)" fg:x="3008" fg:w="1"/><text x="99.1323%" y="271.50"></text></g><g><title>rust-gkat`Cudd_bddOr (1 samples, 0.03%)</title><rect x="98.9152%" y="261" width="0.0329%" height="15" fill="rgb(215,146,41)" fg:x="3009" fg:w="1"/><text x="99.1652%" y="271.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="98.9152%" y="245" width="0.0329%" height="15" fill="rgb(217,27,36)" fg:x="3009" fg:w="1"/><text x="99.1652%" y="255.50"></text></g><g><title>rust-gkat`cuddBddAndRecur (1 samples, 0.03%)</title><rect x="98.9152%" y="229" width="0.0329%" height="15" fill="rgb(219,218,39)" fg:x="3009" fg:w="1"/><text x="99.1652%" y="239.50"></text></g><g><title>rust-gkat`cuddUniqueInter (1 samples, 0.03%)</title><rect x="98.9152%" y="213" width="0.0329%" height="15" fill="rgb(219,4,42)" fg:x="3009" fg:w="1"/><text x="99.1652%" y="223.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (281 samples, 9.24%)</title><rect x="89.7436%" y="293" width="9.2373%" height="15" fill="rgb(249,119,36)" fg:x="2730" fg:w="281"/><text x="89.9936%" y="303.50">rust-gkat`rus..</text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (2 samples, 0.07%)</title><rect x="98.9152%" y="277" width="0.0657%" height="15" fill="rgb(209,23,33)" fg:x="3009" fg:w="2"/><text x="99.1652%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="98.9481%" y="261" width="0.0329%" height="15" fill="rgb(211,10,0)" fg:x="3010" fg:w="1"/><text x="99.1981%" y="271.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="99.0796%" y="261" width="0.0657%" height="15" fill="rgb(208,99,37)" fg:x="3014" fg:w="2"/><text x="99.3296%" y="271.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="99.1453%" y="261" width="0.0329%" height="15" fill="rgb(213,132,31)" fg:x="3016" fg:w="1"/><text x="99.3953%" y="271.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="99.2110%" y="245" width="0.0329%" height="15" fill="rgb(243,129,40)" fg:x="3018" fg:w="1"/><text x="99.4610%" y="255.50"></text></g><g><title>rust-gkat`core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="99.2439%" y="245" width="0.0657%" height="15" fill="rgb(210,66,33)" fg:x="3019" fg:w="2"/><text x="99.4939%" y="255.50"></text></g><g><title>rust-gkat`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.16%)</title><rect x="99.1782%" y="261" width="0.1644%" height="15" fill="rgb(209,189,4)" fg:x="3017" fg:w="5"/><text x="99.4282%" y="271.50"></text></g><g><title>rust-gkat`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="99.3097%" y="245" width="0.0329%" height="15" fill="rgb(214,107,37)" fg:x="3021" fg:w="1"/><text x="99.5597%" y="255.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="99.3097%" y="229" width="0.0329%" height="15" fill="rgb(245,88,54)" fg:x="3021" fg:w="1"/><text x="99.5597%" y="239.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (11 samples, 0.36%)</title><rect x="99.0138%" y="277" width="0.3616%" height="15" fill="rgb(205,146,20)" fg:x="3012" fg:w="11"/><text x="99.2638%" y="287.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="99.3425%" y="261" width="0.0329%" height="15" fill="rgb(220,161,25)" fg:x="3022" fg:w="1"/><text x="99.5925%" y="271.50"></text></g><g><title>rust-gkat`Cudd_Ref (1 samples, 0.03%)</title><rect x="99.3754%" y="277" width="0.0329%" height="15" fill="rgb(215,152,15)" fg:x="3023" fg:w="1"/><text x="99.6254%" y="287.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (299 samples, 9.83%)</title><rect x="89.6121%" y="309" width="9.8291%" height="15" fill="rgb(233,192,44)" fg:x="2726" fg:w="299"/><text x="89.8621%" y="319.50">rust-gkat`rust..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (14 samples, 0.46%)</title><rect x="98.9809%" y="293" width="0.4602%" height="15" fill="rgb(240,170,46)" fg:x="3011" fg:w="14"/><text x="99.2309%" y="303.50"></text></g><g><title>rust-gkat`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="99.4083%" y="277" width="0.0329%" height="15" fill="rgb(207,104,33)" fg:x="3024" fg:w="1"/><text x="99.6583%" y="287.50"></text></g><g><title>rust-gkat`Cudd_RecursiveDeref (1 samples, 0.03%)</title><rect x="99.4412%" y="277" width="0.0329%" height="15" fill="rgb(219,21,39)" fg:x="3025" fg:w="1"/><text x="99.6912%" y="287.50"></text></g><g><title>rust-gkat`core::ptr::hash (1 samples, 0.03%)</title><rect x="99.4740%" y="277" width="0.0329%" height="15" fill="rgb(214,133,29)" fg:x="3026" fg:w="1"/><text x="99.7240%" y="287.50"></text></g><g><title>rust-gkat`mi_heap_malloc_zero_aligned_at_generic (1 samples, 0.03%)</title><rect x="99.5069%" y="277" width="0.0329%" height="15" fill="rgb(226,93,6)" fg:x="3027" fg:w="1"/><text x="99.7569%" y="287.50"></text></g><g><title>rust-gkat`_mi_malloc_generic (1 samples, 0.03%)</title><rect x="99.5069%" y="261" width="0.0329%" height="15" fill="rgb(252,222,34)" fg:x="3027" fg:w="1"/><text x="99.7569%" y="271.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (304 samples, 9.99%)</title><rect x="89.5792%" y="325" width="9.9934%" height="15" fill="rgb(252,92,48)" fg:x="2725" fg:w="304"/><text x="89.8292%" y="335.50">rust-gkat`rust..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (4 samples, 0.13%)</title><rect x="99.4412%" y="309" width="0.1315%" height="15" fill="rgb(245,223,24)" fg:x="3025" fg:w="4"/><text x="99.6912%" y="319.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (4 samples, 0.13%)</title><rect x="99.4412%" y="293" width="0.1315%" height="15" fill="rgb(205,176,3)" fg:x="3025" fg:w="4"/><text x="99.6912%" y="303.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (1 samples, 0.03%)</title><rect x="99.5398%" y="277" width="0.0329%" height="15" fill="rgb(235,151,15)" fg:x="3028" fg:w="1"/><text x="99.7898%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="99.5726%" y="293" width="0.0329%" height="15" fill="rgb(237,209,11)" fg:x="3029" fg:w="1"/><text x="99.8226%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (3 samples, 0.10%)</title><rect x="99.5726%" y="325" width="0.0986%" height="15" fill="rgb(243,227,24)" fg:x="3029" fg:w="3"/><text x="99.8226%" y="335.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (3 samples, 0.10%)</title><rect x="99.5726%" y="309" width="0.0986%" height="15" fill="rgb(239,193,16)" fg:x="3029" fg:w="3"/><text x="99.8226%" y="319.50"></text></g><g><title>rust-gkat`mi_malloc_aligned (2 samples, 0.07%)</title><rect x="99.6055%" y="293" width="0.0657%" height="15" fill="rgb(231,27,9)" fg:x="3030" fg:w="2"/><text x="99.8555%" y="303.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (308 samples, 10.12%)</title><rect x="89.5792%" y="341" width="10.1249%" height="15" fill="rgb(219,169,10)" fg:x="2725" fg:w="308"/><text x="89.8292%" y="351.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="99.6713%" y="325" width="0.0329%" height="15" fill="rgb(244,229,43)" fg:x="3032" fg:w="1"/><text x="99.9213%" y="335.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::from_bexp (1 samples, 0.03%)</title><rect x="99.6713%" y="309" width="0.0329%" height="15" fill="rgb(254,38,20)" fg:x="3032" fg:w="1"/><text x="99.9213%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="549" width="10.3222%" height="15" fill="rgb(250,47,30)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="559.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="533" width="10.3222%" height="15" fill="rgb(224,124,36)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="543.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="517" width="10.3222%" height="15" fill="rgb(246,68,51)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="527.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="501" width="10.3222%" height="15" fill="rgb(253,43,49)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="511.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="485" width="10.3222%" height="15" fill="rgb(219,54,36)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="495.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="469" width="10.3222%" height="15" fill="rgb(227,133,34)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="479.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="453" width="10.3222%" height="15" fill="rgb(247,227,15)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="463.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="437" width="10.3222%" height="15" fill="rgb(229,96,14)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="447.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="421" width="10.3222%" height="15" fill="rgb(220,79,17)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="431.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (314 samples, 10.32%)</title><rect x="89.4806%" y="405" width="10.3222%" height="15" fill="rgb(205,131,53)" fg:x="2722" fg:w="314"/><text x="89.7306%" y="415.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (312 samples, 10.26%)</title><rect x="89.5464%" y="389" width="10.2564%" height="15" fill="rgb(209,50,29)" fg:x="2724" fg:w="312"/><text x="89.7964%" y="399.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (312 samples, 10.26%)</title><rect x="89.5464%" y="373" width="10.2564%" height="15" fill="rgb(245,86,46)" fg:x="2724" fg:w="312"/><text x="89.7964%" y="383.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::from_exp (311 samples, 10.22%)</title><rect x="89.5792%" y="357" width="10.2235%" height="15" fill="rgb(235,66,46)" fg:x="2725" fg:w="311"/><text x="89.8292%" y="367.50">rust-gkat`rust_..</text></g><g><title>rust-gkat`rust_gkat::syntax::exp::_&lt;impl rust_gkat::syntax::gkat::Gkat&gt;::mk_seq (3 samples, 0.10%)</title><rect x="99.7041%" y="341" width="0.0986%" height="15" fill="rgb(232,148,31)" fg:x="3033" fg:w="3"/><text x="99.9541%" y="351.50"></text></g><g><title>rust-gkat`&lt;&amp;mut hashconsing::HConsign&lt;T,S&gt; as hashconsing::HashConsign&lt;T&gt;&gt;::mk_is_new (2 samples, 0.07%)</title><rect x="99.7370%" y="325" width="0.0657%" height="15" fill="rgb(217,149,8)" fg:x="3034" fg:w="2"/><text x="99.9870%" y="335.50"></text></g><g><title>rust-gkat`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="99.7699%" y="309" width="0.0329%" height="15" fill="rgb(209,183,11)" fg:x="3035" fg:w="1"/><text x="100.0199%" y="319.50"></text></g><g><title>rust-gkat`rust_gkat::syntax::gkat::Gkat::new (1 samples, 0.03%)</title><rect x="99.8028%" y="549" width="0.0329%" height="15" fill="rgb(208,55,20)" fg:x="3036" fg:w="1"/><text x="100.0528%" y="559.50"></text></g><g><title>rust-gkat`Cudd_Init (1 samples, 0.03%)</title><rect x="99.8028%" y="533" width="0.0329%" height="15" fill="rgb(218,39,14)" fg:x="3036" fg:w="1"/><text x="100.0528%" y="543.50"></text></g><g><title>rust-gkat`cuddInitCache (1 samples, 0.03%)</title><rect x="99.8028%" y="517" width="0.0329%" height="15" fill="rgb(216,169,33)" fg:x="3036" fg:w="1"/><text x="100.0528%" y="527.50"></text></g><g><title>rust-gkat`std::rt::lang_start::_{{closure}} (3,034 samples, 99.74%)</title><rect x="0.1315%" y="597" width="99.7370%" height="15" fill="rgb(233,80,24)" fg:x="4" fg:w="3034"/><text x="0.3815%" y="607.50">rust-gkat`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-gkat`std::sys::backtrace::__rust_begin_short_backtrace (3,034 samples, 99.74%)</title><rect x="0.1315%" y="581" width="99.7370%" height="15" fill="rgb(213,179,31)" fg:x="4" fg:w="3034"/><text x="0.3815%" y="591.50">rust-gkat`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-gkat`rust_gkat::main (3,033 samples, 99.70%)</title><rect x="0.1644%" y="565" width="99.7041%" height="15" fill="rgb(209,19,5)" fg:x="5" fg:w="3033"/><text x="0.4144%" y="575.50">rust-gkat`rust_gkat::main</text></g><g><title>rust-gkat`std::fs::read_to_string::inner (1 samples, 0.03%)</title><rect x="99.8356%" y="549" width="0.0329%" height="15" fill="rgb(219,18,35)" fg:x="3037" fg:w="1"/><text x="100.0856%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.03%)</title><rect x="99.8356%" y="533" width="0.0329%" height="15" fill="rgb(209,169,16)" fg:x="3037" fg:w="1"/><text x="100.0856%" y="543.50"></text></g><g><title>dyld`start (3,039 samples, 99.90%)</title><rect x="0.0000%" y="645" width="99.9014%" height="15" fill="rgb(245,90,51)" fg:x="0" fg:w="3039"/><text x="0.2500%" y="655.50">dyld`start</text></g><g><title>rust-gkat`main (3,035 samples, 99.77%)</title><rect x="0.1315%" y="629" width="99.7699%" height="15" fill="rgb(220,99,45)" fg:x="4" fg:w="3035"/><text x="0.3815%" y="639.50">rust-gkat`main</text></g><g><title>rust-gkat`std::rt::lang_start_internal (3,035 samples, 99.77%)</title><rect x="0.1315%" y="613" width="99.7699%" height="15" fill="rgb(249,89,25)" fg:x="4" fg:w="3035"/><text x="0.3815%" y="623.50">rust-gkat`std::rt::lang_start_internal</text></g><g><title>rust-gkat`std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.03%)</title><rect x="99.8685%" y="597" width="0.0329%" height="15" fill="rgb(239,193,0)" fg:x="3038" fg:w="1"/><text x="100.1185%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.03%)</title><rect x="99.8685%" y="581" width="0.0329%" height="15" fill="rgb(231,126,1)" fg:x="3038" fg:w="1"/><text x="100.1185%" y="591.50"></text></g><g><title>all (3,042 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(243,166,3)" fg:x="0" fg:w="3042"/><text x="0.2500%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.10%)</title><rect x="99.9014%" y="645" width="0.0986%" height="15" fill="rgb(223,22,34)" fg:x="3039" fg:w="3"/><text x="100.1514%" y="655.50"></text></g></svg></svg>